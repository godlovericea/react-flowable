[{"E:\\react-flowable\\src\\index.js":"1","E:\\react-flowable\\src\\App.js":"2","E:\\react-flowable\\src\\reportWebVitals.js":"3","E:\\react-flowable\\src\\pages\\process\\Process.jsx":"4","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx":"5","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx":"6","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx":"7","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx":"8","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx":"9","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx":"10","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx":"11","E:\\react-flowable\\src\\apis\\process.js":"12","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx":"13","E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx":"14","E:\\react-flowable\\src\\libs\\transform\\transform.js":"15","E:\\react-flowable\\src\\utils\\request.js":"16","E:\\react-flowable\\src\\utils\\config.js":"17","E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx":"18","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx":"19","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx":"20","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx":"21","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx":"22","E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx":"23","E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx":"24","E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx":"25","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx":"26","E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx":"27","E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx":"28","E:\\react-flowable\\src\\pages\\SetFlowForm\\SetFlowForm.jsx":"29","E:\\react-flowable\\src\\components\\FormRenderTrans\\FormRenderTrans.jsx":"30"},{"size":837,"mtime":1615344419861,"results":"31","hashOfConfig":"32"},{"size":2106,"mtime":1615520300566,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1609127554707,"results":"34","hashOfConfig":"32"},{"size":8256,"mtime":1615344419876,"results":"35","hashOfConfig":"32"},{"size":1173,"mtime":1615512679892,"results":"36","hashOfConfig":"32"},{"size":5748,"mtime":1615344419868,"results":"37","hashOfConfig":"32"},{"size":1194,"mtime":1615512244806,"results":"38","hashOfConfig":"32"},{"size":25280,"mtime":1615541361007,"results":"39","hashOfConfig":"32"},{"size":1174,"mtime":1615344419865,"results":"40","hashOfConfig":"32"},{"size":5473,"mtime":1615538334167,"results":"41","hashOfConfig":"32"},{"size":5234,"mtime":1615344419867,"results":"42","hashOfConfig":"32"},{"size":7207,"mtime":1615541835780,"results":"43","hashOfConfig":"32"},{"size":505,"mtime":1615344419865,"results":"44","hashOfConfig":"32"},{"size":1320,"mtime":1615344419864,"results":"45","hashOfConfig":"32"},{"size":13009,"mtime":1615541831906,"results":"46","hashOfConfig":"32"},{"size":2947,"mtime":1615344419878,"results":"47","hashOfConfig":"32"},{"size":205,"mtime":1615529118545,"results":"48","hashOfConfig":"32"},{"size":5994,"mtime":1615533804019,"results":"49","hashOfConfig":"32"},{"size":5044,"mtime":1615533844068,"results":"50","hashOfConfig":"32"},{"size":3596,"mtime":1615521162394,"results":"51","hashOfConfig":"32"},{"size":3028,"mtime":1615377580318,"results":"52","hashOfConfig":"32"},{"size":4895,"mtime":1615538145885,"results":"53","hashOfConfig":"32"},{"size":4472,"mtime":1615529134088,"results":"54","hashOfConfig":"32"},{"size":2514,"mtime":1615521272218,"results":"55","hashOfConfig":"32"},{"size":1518,"mtime":1615536181912,"results":"56","hashOfConfig":"32"},{"size":5300,"mtime":1615521250727,"results":"57","hashOfConfig":"32"},{"size":654,"mtime":1615372890894,"results":"58","hashOfConfig":"32"},{"size":3694,"mtime":1615521175754,"results":"59","hashOfConfig":"32"},{"size":6316,"mtime":1615538118093,"results":"60","hashOfConfig":"32"},{"size":2437,"mtime":1615515902641,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qf848r",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},"E:\\react-flowable\\src\\index.js",[],"E:\\react-flowable\\src\\App.js",[],"E:\\react-flowable\\src\\reportWebVitals.js",[],"E:\\react-flowable\\src\\pages\\process\\Process.jsx",["140","141","142","143","144","145"],"import React from \"react\";\r\nimport { GetWorkflowBaseInfo, UpdateStatus, CreateModel, flowableLogin, GetFormListInfo, DeleteFormLogic } from '../../apis/process'\r\n// import Modeler from \"../../components/Modeler\";\r\nimport { Table, Space, Button, Form, Input, Pagination, Modal, message } from 'antd';\r\nimport './process.less'\r\nconst { TextArea } = Input;\r\nconst { Column } = Table;\r\nclass Process extends React.Component{\r\n    state={\r\n        tableData: [],// 表格数据\r\n        name: '', // 检索栏流程名称\r\n        startDate: '',// 检索栏起始日期\r\n        endDate: '',// 检索栏截止日期\r\n        total: 0, // 数据总数\r\n        curPage: 1,// 当前页码\r\n        pageSize: 20,// 当前分页条数\r\n        confirmLoading: false,// 加载新增接口loading效果\r\n        visible: false, // 模态框显示隐藏\r\n        processName: '',// 新增流程名称\r\n        processKey: '',// 新增流程标识\r\n        processDesc: '',// 新增流程描述\r\n        cookieData: '',\r\n        formId: '', // 表单ID\r\n    }\r\n    handleProName = (e)=>{\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    handleDateChange =(date, dateString)=>{\r\n        console.log(date)\r\n        console.log(dateString)\r\n        this.setState({\r\n            startDate: !dateString[0] ? '' : dateString[0] + ' ' + '00:00:00',\r\n            endDate: !dateString[1]? '' : dateString[1] + ' ' +'23:59:59',\r\n        })\r\n    }\r\n    handlePageChange =(curPage, pageSize) => {\r\n        this.setState({\r\n            curPage: curPage,\r\n            pageSize: pageSize\r\n        },()=>{\r\n            console.log(this.state.curPage,this.state.pageSize)\r\n            this.getData()\r\n        })\r\n        \r\n    }\r\n    handlePageSizeChange=(page, size)=>{\r\n        console.log(page)\r\n        console.log(size)\r\n    }\r\n    // 拉取数据\r\n    getData = ()=> {\r\n        GetFormListInfo(this.state.name,this.state.curPage, this.state.pageSize)\r\n        .then(res=>{\r\n            this.setState({\r\n                tableData: res.data.getMe,\r\n                total: res.data.totalRcdNum\r\n            })\r\n        })\r\n    }\r\n    // 删除流程\r\n    delProcess =(record) =>{\r\n        return ()=>{\r\n            UpdateStatus(record.ID, 0)\r\n            .then((res)=>{\r\n                this.getData()\r\n            })\r\n        }\r\n    }\r\n    // 删除表单\r\n    delForm = (id)=>{\r\n        return ()=>{\r\n            this.setState({\r\n                visible: true,\r\n                formId: id\r\n            })\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        DeleteFormLogic('', this.state.formId)\r\n        .then((res)=>{\r\n            if(res.data.statusCode === \"0000\") {\r\n                message.success(\"删除成功\")\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                this.getData()\r\n            } else {\r\n                message.success(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    handleCreateProcessName=(e)=>{\r\n        this.setState({\r\n            processName: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessKey=(e)=>{\r\n        this.setState({\r\n            processKey: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessDesc=(e)=>{\r\n        this.setState({\r\n            processDesc: e.target.value\r\n        })\r\n    }\r\n    openModal=()=>{\r\n        this.props.history.push({\r\n            pathname: '/new'\r\n        })\r\n    }\r\n    goEdit=(id,name,key,desc)=>{\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/edit',\r\n                state:{\r\n                    id: id,\r\n                    name: name,\r\n                    key: key,\r\n                    desc: desc\r\n                }\r\n            })\r\n        }\r\n    }\r\n    goShow=(id)=>{\r\n        // console.log(id)\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/show',\r\n                state:{\r\n                    id: id\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 跳转到台账\r\n    goShowAccount=(name)=>{\r\n        return ()=>{\r\n            this.props.history.push({                              \r\n                pathname: '/trans',\r\n                state:{\r\n                    name: name\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"modeler-wrapper\">\r\n                {/* <Modeler></Modeler> */}\r\n                <Form layout=\"inline\" >\r\n                    <Form.Item label=\"流程名称\">\r\n                        <Input placeholder=\"请输入表单名称\" allowClear onChange={this.handleProName}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.openModal}>新增</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Table dataSource={this.state.tableData} pagination={false} rowClassName=\"rowClassName\">\r\n                    <Column title=\"流程名称\" dataIndex=\"name\" key=\"WorkflowName\" />\r\n                    <Column title=\"流程标识\" dataIndex=\"key\" key=\"Key\" />\r\n                    <Column title=\"创建人\" dataIndex=\"createdBy\" key=\"createdBy\" />\r\n                    <Column title=\"创建时间\" dataIndex=\"created\" key=\"created\" />\r\n                    <Column title=\"最后修改时间\" dataIndex=\"lastUpdated\" key=\"lastUpdated\" />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.Type === '表单' ?\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.goEdit(record.id, record.name, record.key, record.description)}>编辑</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShow(record.id)}>查看</Button>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShowAccount(record.TableName)}>查看</Button>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n                <Modal\r\n                    title=\"提示\"\r\n                    visible={this.state.visible}\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    onOk={this.handleOk}\r\n                    confirmLoading={this.state.confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    确定删除该表单吗？\r\n                </Modal>\r\n                <Pagination\r\n                    current={this.state.curPage}\r\n                    total={this.state.total}\r\n                    showSizeChanger\r\n                    showQuickJumper\r\n                    defaultPageSize={20}\r\n                    onChange = {this.handlePageChange}\r\n                    showTotal={total => `共 ${total} 条数据`}>\r\n                </Pagination>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Process","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx",["146"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport { GetFormJson } from '../../apis/process'\r\n\r\nconst StartForm = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        const id = props.location.state.id\r\n        GetFormJson(id)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                setSchema(JSON.parse(res.data))\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n            <Button type=\"primary\" style={{ marginLeft: 30 }} onClick={handleClickReback}>\r\n                返回列表\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx",["147","148"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson } from '../../apis/process'\r\nimport {Modal, Form, Input, Button, message} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\n\r\nconst defaultValue = {\r\n    schema: {\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n      },\r\n    },\r\n    displayType: 'row',\r\n    showDescIcon: true,\r\n    labelWidth: 120,\r\n  };\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass NewForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '保存',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                onClick: () => this.goBackToList()\r\n            },\r\n        ]\r\n    }\r\n    handleScheam = ()=>{\r\n        this.setState({\r\n            isModalVisible: true\r\n        })\r\n    }\r\n    goBackToList=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    hanldeEveryObject=(obj)=>{\r\n\r\n    }\r\n    hanldeDeepObject = (properties) => {\r\n        let BaseTypeList = []\r\n        for(let key in properties) {\r\n            if (properties[key].hasOwnProperty('properties')) {\r\n                for(let childkey in properties[key].properties) {\r\n                    BaseTypeList.push({\r\n                        Name:properties[key].properties[childkey].title,\r\n                        Type: properties[key].properties[childkey].type\r\n                    })\r\n                }\r\n            } else {\r\n                BaseTypeList.push({\r\n                    Name:properties[key].title,\r\n                    Type: properties[key].type\r\n                })\r\n            }\r\n        }\r\n        const names = BaseTypeList.map((items)=> items.Name)\r\n        console.log(names)\r\n        const nameSet = new Set(names);\r\n        if (names.length === nameSet.size) {\r\n            return BaseTypeList\r\n        } else {\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        var cookies = document.cookie\r\n        var arr = cookies.split(\";\")\r\n        var cookieKeyVal = \"\"\r\n        arr.forEach(item=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > 0) {\r\n                cookieKeyVal  = item\r\n            }\r\n        })\r\n        var cookie = cookieKeyVal.split(\"=\")[1]\r\n\r\n        console.log(this.formNameRef.current.state.value)\r\n        if (!this.formNameRef.current.state.value) {\r\n            alert(\"表单名称必填\")\r\n            return false\r\n        }\r\n        let {properties} = FormInfo.schema\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.formDescRef.current.state.value,\r\n            key:this.formKeyRef.current.state.value,\r\n            modelType:2,\r\n            name: this.formNameRef.current.state.value,\r\n            BaseTypeList: this.hanldeDeepObject(properties)\r\n        }\r\n        if(!params.BaseTypeList){\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n        CreateModel(cookie,params)\r\n        .then(res=>{\r\n            alert(\"新增成功\")\r\n            this.setState({\r\n                isModalVisible: false\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewForm;\r\n","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx",[],"E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx",["149","150","151","152","153","154","155"],"import React, { useState, useEffect, useRef } from 'react';\nimport FormRender from 'form-render/lib/antd';\nimport FormTransfer from '../../libs/transform/transform'\nimport configData from '../../utils/config'\nimport { Button, message, Modal, Radio, Input, Table, Space} from 'antd';\nimport { getTableName, GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo, getUserName, UpdateTaskInfo, TaskGoBack, WorkflowUrging, GetFlowProcessInfo, WorkflowFileOperation, uploadToService} from '../../apis/process'\nimport './NeedToDeal.less'\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\nimport TableAccount from '../../components/TableAccount/TableAccount'\nimport UploadFile from '../../components/UploadFile/UploadFile'\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\nconst { Search } = Input;\nconst { Column } = Table;\n\nconst NeedToDeal = (props) => {\n    const [valid, setValid] = useState([])\n    const [FormKey, setFormKey] = useState([])\n    const [formData, setFormData] = useState({});\n    const [schema, setSchema] = useState({})\n    const [cookie, setCookie] = useState(\"\")\n    const [taskId, setTaskId] = useState(\"\")\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\n    const [userId, setUserId] = useState(\"\")\n    const [formId, setFormId] = useState(\"\")\n    const [visible, setVisible] = useState(false)\n    const [modelerVisible, setModelerVisible] = useState(false)\n    const [rebackVisible, setRebackVisible] = useState(false)\n    const [urgentVisible, setUrgentVisible] = useState(false)\n    const [transValue, setTransValue] = useState(null)\n    const [userNameArr, setUserNameArr] = useState([])\n    const [userName, setUserName] = useState('')\n    const [processImgSrc, setProcessImgSrc] = useState(null)\n    // 流程详细信息\n    const [Assignee, setAssignee] = useState(null)\n    const [ETime, setETime] = useState(null)\n    const [STime, setSTime] = useState(null)\n    const [TaskName, setTaskName] = useState(null)\n    const [tableData, setTableData] = useState([])\n    const [fileTableData, setFileTableData] = useState([])\n    const [flowVisible, setFlowVisible] = useState(false)\n    const [fileVisible, setFileVisible] = useState(false)\n    const [uploadVisible, setUploadVisible] = useState(false)\n    const [upFileName, setUpFileName] = useState([])\n    const [column, setColumn] = useState(3)\n\n    const [configSchema, setConfigSchema] = useState('')\n    const [prevSchemaValues, setPrevSchemaValues] = useState({})\n\n    const formRef = useRef();\n    const backRef = useRef();\n    const urgentRef = useRef();\n    const onValidate=(valid)=>{\n        setValid(valid)\n    }\n    const getData =()=>{\n        let cookieScope = \"\"\n        let taskIdScope = \"\"\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                cookieScope = itemArr[1]\n                setCookie(cookieScope)\n            }\n        })\n        // 处理任务ID\n        const search = window.location.search.slice(1)\n        const searchArr = search.split(\"&\")\n        searchArr.forEach((item)=>{\n            if (item.indexOf(\"taskId\") > -1) {\n                taskIdScope = decodeURI(item.split(\"=\")[1])\n                setTaskId(taskIdScope)\n                window.taskId = taskIdScope\n            } else if (item.indexOf(\"formId\") > -1) {\n                setFormId(decodeURI(item.split(\"=\")[1]))\n            }\n        })\n        GetFormList(cookieScope, taskIdScope)\n        .then((res)=>{\n            if (res.status === 200) {\n                let fieldData = res.data\n                if(fieldData.Type === \"台账\") {\n                    const tableName = fieldData.Config\n                    getTableName(tableName)\n                    .then(async(response)=>{\n                        const dataArr = response.data.getMe[0].Groups\n                        let formTransfer = new FormTransfer(dataArr)\n                        let schemadata =await formTransfer.handleGroup()\n                        setSchema(schemadata)\n                    })\n                } else {\n                    setConfigSchema(fieldData.Config)\n                    let schemaConfig = JSON.parse(fieldData.Config)\n\n                    if (fieldData.ColumnConfig){\n                        let ColumnConfig = fieldData.ColumnConfig\n                        let arr = []\n                        if(ColumnConfig.indexOf(',') > -1) {\n                            arr = ColumnConfig.split(',')\n                        } else {\n                            arr.push(ColumnConfig)\n                        }\n                        let properties = schemaConfig.schema.properties\n                        console.log(properties)\n                        let cusProperty = {}\n                        let childProperty = {}\n                        for(let key in properties){\n                            for(let ckey in properties[key].properties) {\n                                for(let i = 0;i< arr.length; i++) {\n                                    if (ckey === arr[i]) {\n                                        console.log(ckey)\n                                        childProperty[ckey] = properties[key].properties[ckey]\n                                        console.log(childProperty[ckey])\n                                        cusProperty[key] = properties[key]\n                                        console.log(properties[key])\n                                    }\n                                }\n                            }\n                        }\n                        schemaConfig.schema.properties = cusProperty\n                    }\n                    console.log(schemaConfig)\n                    let fieldConfig = schemaConfig.schema.properties\n                    if (fieldData.formId) {\n                        let formValObj = JSON.parse(fieldData.formId).values\n                        setPrevSchemaValues(formValObj)\n                        for(let skey in fieldConfig){\n                            for(let val in formValObj) {\n                                if (skey === val) {\n                                    let valueObj = formValObj[val]\n                                    let childProps = fieldConfig[skey].properties\n                                    for(let childKey in fieldConfig[skey].properties) {\n                                        for(let childVlue in valueObj) {\n                                            if (childKey === childVlue) {\n                                                childProps[childKey].default = valueObj[childVlue]\n                                            }\n                                        }\n                                    }\n                                    fieldConfig[skey].properties = childProps\n                                }\n                            }\n                        }\n                    }\n                    schemaConfig.schema.properties = fieldConfig\n\n                    setSchema(schemaConfig)\n                }\n            }\n        })\n        GetTaskBaseInfo(taskIdScope)\n        .then((response)=>{\n            let data = response.data\n            setTaskName(data.TaskName)\n            setAssignee(data.Assignee)\n            setSTime(data.STime)\n            setETime(data.ETime)\n        })\n    }\n    // 处理请求参数\n    const hanldeRouterParams =()=>{\n        // 处理Cookie\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                setCookie(itemArr[1])\n            }\n        })\n\n        // 处理任务ID\n        const search = window.location.search.slice(1)\n        console.log(search)\n        const searchArr = search.split(\"&\")\n        searchArr.forEach((item)=>{\n            if (item.indexOf(\"processInstanceId\") > -1) {\n                console.log(item)\n                setProcessDefinitionId(item.split(\"=\")[1])\n            } else if (item.indexOf(\"userId\") > -1) {\n                setUserId(item.split(\"=\")[1])\n            } else if (item.indexOf(\"loginName\") > -1) {\n                setUserName(decodeURI(item.split(\"=\")[1]))\n            } else if (item.indexOf(\"FormKey\") > -1) {\n                setFormKey(decodeURI(item.split(\"=\")[1]))\n            }\n        })\n    }\n    const handleClick = () => {\n        formRef.current.resetData({}).then(res => {\n        alert(JSON.stringify(res, null, 2));\n        });\n    };\n\n    const handleClickReback = ()=>{\n        props.history.push({\n            pathname: '/home'\n        })\n    }\n    const getTransferName =(value)=>{\n        getUserName(value)\n        .then((res)=>{\n            setUserNameArr(res.data.getMe)\n        })\n    }\n    // 保存\n    const saveTask=()=>{\n        if (valid.length > 0) {\n            message.error(\"提交失败,请按照提示填写表单\")\n            return\n        }\n        let obj = {}\n        for(let pkey in prevSchemaValues) {\n            for(let fkey in formData) {\n                obj[pkey] = prevSchemaValues[pkey]\n                obj[fkey] = formData[fkey]\n            }\n        }\n        const myData = {\n            formId:JSON.stringify({\n                formId,\n                values: obj\n            }),\n            Config: configSchema,\n            FormKey: FormKey\n        }\n        TaskSave(cookie, taskId, userId, myData)\n        .then((res)=>{\n            message.success('保存成功');\n        })\n    }\n    // 完成\n    const completeTask=()=>{\n        if (valid.length > 0) {\n            message.error(\"提交失败,请按照提示填写表单\")\n            return\n        }\n        let obj = {}\n        for(let pkey in prevSchemaValues) {\n            for(let fkey in formData) {\n                obj[pkey] = prevSchemaValues[pkey]\n                obj[fkey] = formData[fkey]\n            }\n        }\n        const myData = {\n            formId:JSON.stringify({\n                formId,\n                values: obj\n            }),\n            Config: configSchema,\n            FormKey: FormKey\n        }\n        SaveFormInfo(cookie, taskId, userId, myData)\n        .then((res)=>{\n            message.success('提交成功');\n        })\n    }\n    // 移交\n    const transferTo=()=>{\n        getTransferName(\"\")\n        setVisible(true)\n    }\n    // 回退按钮\n    const goBack =()=>{\n        setRebackVisible(true)\n    }\n    // 取消回退\n    const closeRebackModeler=()=>{\n        setRebackVisible(false)\n    }\n    // 确定回退\n    const sureRebackModeler=()=>{\n        const textVal = backRef.current.state.value\n        TaskGoBack(processDefinitionId,taskId,textVal)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"回退成功！\")\n                setRebackVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    //催办\n    const urgentTask=()=>{\n        setUrgentVisible(true)\n    }\n    // 取消催办\n    const closeUrgentModeler=()=>{\n        setUrgentVisible(false)\n    }\n    // 确定催办\n    const sureUrgentModeler=()=>{\n        const textVal = urgentRef.current.state.value\n        WorkflowUrging(processDefinitionId, userName, textVal)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"催办成功！\")\n                setUrgentVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    // 处理单个文件数据\n    const handleFileInfo=(pathname)=>{\n        var filename = ''\n        var pathnameArr = []\n        if (!pathname){\n            return\n        }\n        pathnameArr = pathname.split('/')\n        filename = pathnameArr[pathnameArr.length - 1]\n        return filename\n    }\n    // 附件\n    const uploadFile = ()=> {\n        WorkflowFileOperation(taskId)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                let arr = []\n                if (res.data.info !== \"\") {\n                    if (res.data.info.indexOf(',') > -1) {\n                        var infoArr = res.data.info.split(\",\")\n                        infoArr.forEach(item=>{\n                            arr.push({\n                                path: document.referrer + 'CityTemp/熊猫智慧水务平台' + item,\n                                name: handleFileInfo(item),\n                                state: \"上传成功\"\n                            })\n                        })\n                    } else {\n                        arr.push({\n                            path:  document.referrer + 'CityTemp/熊猫智慧水务平台' + res.data.info,\n                            name: handleFileInfo(res.data.info),\n                            state: \"上传成功\"\n                        })\n                    }\n                    console.log(arr)\n                    setFileTableData(arr)\n                }\n                setFileVisible(true)\n            }\n        })\n    }\n    // 打开上传附件窗口\n    const openUploadVisible=()=>{\n        setFileVisible(false)\n        setUploadVisible(true)\n    }\n    // 关闭附件上传窗口\n    const closeUploadVisible=()=>{\n        setUploadVisible(false)\n    }\n    // 确定上传附件\n    const sureUploadVisible=()=>{\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ taskId +'/' + upFileName.name;\n        var formData = new FormData();\n        formData.append(\"filedata\", upFileName);\n        var request = new XMLHttpRequest();\n        request.open(\"POST\", encodeURI(_url));\n        request.onreadystatechange = function() {\n            if (request.readyState == 4) {\n                if (request.status == 200) {\n                    try {\n                        var data = JSON.parse(request.responseText);\n                        if (data && data.success) {\n                            message.success(\"数据上传成功\");\n                            fileuploadToService('workflow', taskId ,upFileName.name)\n                        } else {\n                            message.error(\"上传失败\")\n                        }\n                    } catch (e) {\n                        message.error(\"上传失败\")\n                    }\n                } else {\n                    message.error(\"上传失败\")\n                }\n            }\n        }\n        request.send(formData);\n    }\n    // 上传文件至服务器\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\n        uploadToService(taskId, FilePath)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"上传成功！\")\n                setUploadVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    const hanldeFileUpload=(e)=>{\n        console.log(e.target.files[0])\n        setUpFileName(e.target.files[0])\n    }\n    const closeFileVisible=()=>{\n        setFileVisible(false)\n    }\n    // 流转信息\n    const showTransFlow=()=>{\n        GetFlowProcessInfo(processDefinitionId)\n        .then((res)=>{\n            setTableData(res.data.getMe)\n            setFlowVisible(true)\n        })\n    }\n    const closeFlow=()=>{\n        setFlowVisible(false)\n    }\n    const sureFlow =()=>{\n        setFlowVisible(false)\n    }\n    const goShowHistoryForm=(taskId)=>{\n        return ()=>{\n            props.history.push({\n                pathname: '/hisflow',\n                state:{\n                    taskId: taskId\n                }\n            })\n        }\n    }\n    // 流程图\n    const showModeler=()=>{\n        const imgSrc =  document.referrer + configData.baseURL + '/GetWorkflowDiagram?processInstanceId=' + processDefinitionId + '&t=' + (new Date()).getTime()\n        setProcessImgSrc(imgSrc)\n        setModelerVisible(true)\n    }\n    const closeModeler=()=>{\n        setModelerVisible(false)\n    }\n    // 移交Modal\n    const handleOK=()=>{\n        if (!transValue) {\n            message.error(\"请检查移交人！\")\n            return\n        }\n        let Condition = JSON.stringify({\n            assignee: transValue\n        })\n        UpdateTaskInfo(Condition, taskId)\n        .then((res)=>{\n            const parseData = JSON.parse(res.data)\n            if (parseData.assignee === transValue) {\n                message.success(\"移交成功\")\n                setVisible(false)\n            } else {\n                message.error(\"移交失败，请检查移交人！\")\n            }\n        })\n    }\n    const handleCancel=()=>{\n        setVisible(false)\n    }\n    const handleSetTrans=(e)=>{\n        setTransValue(e.target.value)\n    }\n    \n    useEffect(()=>{\n        getData()\n        hanldeRouterParams()\n    }, [])\n\n    return (\n        <div className=\"needWrap\">\n            <div className=\"deal-headerbox\">\n                <h2 className=\"dealheaders\">{TaskName}</h2>\n                <div className=\"dealdetails\">\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\n                    <p className=\"detail-items\">起始时间：{STime}</p>\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\n                </div>\n            </div>\n            <div className=\"divider-box\"></div>\n            <div className=\"btnGroups\">\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={saveTask}>保存</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={completeTask}>完成</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={transferTo}>移交</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={goBack}>回退</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={urgentTask}>催办</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\n            </div>\n            <div className=\"divider-box\"></div>\n            <Modal title=\"任务移交\" visible={visible} onOk={handleOK} onCancel={handleCancel}\n                bodyStyle={{height:'500px',overflowY:'auto'}}>\n                <div>\n                    <Search\n                        placeholder=\"请输入姓名\"\n                        allowClear\n                        enterButton=\"搜索\"\n                        size=\"large\"\n                        onSearch={getTransferName}\n                    />\n                </div>\n                <Radio.Group name=\"radiogroup\" value={transValue} onChange={handleSetTrans}>\n                    <div style={{display: 'flex',flexDirection: 'column'}}>\n                        {\n                            userNameArr.map((item,index)=>{\n                                return(\n                                    <Radio value={item.JobNum} key={index}>\n                                        <div style={{display:\"flex\", height:'36px',lineHeight:\"36px\"}}>\n                                            <p style={{width:'120px'}}>{item.DepName}</p>\n                                            <p>{item.Name}</p>\n                                        </div>\n                                    </Radio>\n                                )\n                            })\n                        }\n                    </div>\n                </Radio.Group>\n            </Modal>\n            <Modal title=\"流程图\" visible={modelerVisible} onCancel={closeModeler} onOk={closeModeler} width={800}\n                bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <img src={processImgSrc} alt=\"process\"/>\n            </Modal>\n\n            <Modal title=\"回退\" visible={rebackVisible} onCancel={closeRebackModeler} onOk={sureRebackModeler}\n                bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Input type=\"text\" ref={backRef}></Input>   \n            </Modal>\n\n            <Modal title=\"催办\" visible={urgentVisible} onCancel={closeUrgentModeler} onOk={sureUrgentModeler}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Input type=\"text\" ref={urgentRef}></Input>   \n            </Modal>\n\n            <Modal title=\"流转信息\" visible={flowVisible} onCancel={closeFlow} onOk={sureFlow} width={900}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Table dataSource={tableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                    <Column title=\"操作步骤\" dataIndex=\"TaskName\" key=\"TaskName\" />\n                    <Column title=\"开始时间\" dataIndex=\"STime\" key=\"STime\" />\n                    <Column title=\"结束时间\" dataIndex=\"ETime\" key=\"ETime\" />\n                    <Column title=\"操作人账号\" dataIndex=\"OperationMan\" key=\"OperationMan\" />\n                    <Column\n                        title=\"流程状态\"\n                        key=\"state\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    record.DeleteReason !== \"\" ?\n                                    <span>回退</span>\n                                    :\n                                    <span>已完成</span>\n                                }\n                            </Space>\n                        )}\n                    />\n                    <Column\n                        title=\"操作\"\n                        key=\"action\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    record.DeleteReason !== \"\" ?\n                                    <div>\n                                        {record.GoBackReason}\n                                    </div>\n                                    :\n                                    <div>\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={goShowHistoryForm(record.TaskID)}>查看</Button>\n                                    </div>\n                                }\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </Modal>\n\n            <Modal title=\"附件\" visible={fileVisible} onCancel={closeFileVisible} okText=\"上传附件\" onOk={openUploadVisible} width={680}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Table dataSource={fileTableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                    <Column title=\"文件名\" dataIndex=\"name\" key=\"name\" />\n                    <Column title=\"状态\" dataIndex=\"state\" key=\"state\" />\n                    <Column\n                        title=\"操作\"\n                        key=\"action\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    <div>\n                                        <a href={record.path} download={upFileName.name} style={{marginRight:'10px'}}>下载</a>\n                                        <a href={record.path} target=\"_blank\">预览</a>\n                                    </div>\n                                }\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </Modal>\n\n            <Modal title=\"上传附件\" visible={uploadVisible} onCancel={closeUploadVisible} onOk={sureUploadVisible}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Input type=\"file\" onChange={hanldeFileUpload}></Input>\n            </Modal>\n            <FormRender\n                ref={formRef}\n                {...schema}\n                formData={formData}\n                onChange={setFormData}\n                onValidate={onValidate}\n                showValidate={false}\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\n            />\n        </div>\n    );\n};\n\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx",["156"],"import React, { useState } from \"react\";\r\nimport FormRender from \"form-render/lib/antd\";\r\nimport SCHEMA from \"./schema.json\";\r\nimport Cascade from \"./Cascader/Cascader\";\r\nimport Calendar from './Sequelize/Sequelize'\r\nclass Demo extends React.Component {\r\n    state = {\r\n        formData: {},\r\n        valid: []\r\n    }\r\n\r\n    submit = () => {\r\n        if (this.state.valid.length > 0) {\r\n            alert(\"没有通过校验\");\r\n        } else {\r\n            alert(JSON.stringify(this.state.formData, null, 4));\r\n        }\r\n    };\r\n\r\n    onValidate = valid => {\r\n        console.log(valid);\r\n    }\r\n    listenChange=(params)=>{\r\n        console.log(params)\r\n    }\r\n    render(){\r\n        return (\r\n            <div style={{ padding: 60 }}>\r\n                <FormRender\r\n                    {...SCHEMA}\r\n                    formData={this.state.formData}\r\n                    onChange={this.listenChange}\r\n                    onValidate={this.onValidate}\r\n                    widgets={{ cascade: Cascade,calendar: Calendar }}\r\n                />\r\n                <button onClick={this.submit}>提交</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Demo\r\n","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx",["157"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message } from 'antd';\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport { GetStartForm, WorkflowStart, getTableName } from '../../apis/process'\r\nimport \"./StartForm.less\"\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\n\r\nconst StartForm = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [FormKey, setFormKey] = useState('')\r\n    const [formId, setFormId] = useState('')\r\n    const [valid, setValid] = useState([])\r\n    const [configSchema, setConfigSchema] = useState('')\r\n    const formRef = useRef();\r\n\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n\r\n    const getData =async()=>{\r\n        let FlowDefID = props.location.state.FlowDefID\r\n        let res =await GetStartForm(FlowDefID)\r\n        \r\n        if (res.data.Errmsg) {\r\n            alert(res.data.Errmsg)\r\n            return\r\n        }\r\n        setFormId(res.data.FormID)\r\n        setFormKey(res.data.FormKey)\r\n        if (res.data.Type === \"台账\") {\r\n            const tableName = res.data.Form\r\n            let response = await getTableName(tableName)\r\n            \r\n            const dataArr = response.data.getMe[0].Groups\r\n            // handleGroup(dataArr)\r\n            let formTransfer = new FormTransfer(dataArr)\r\n            let schemadata =await formTransfer.handleGroup()\r\n            \r\n            setSchema(schemadata)\r\n            setConfigSchema(JSON.stringify(schemadata))\r\n            \r\n        } else if (res.data.Type === \"表单\") {\r\n            let resData = `${res.data.Form}`// 这里必须强转字符串，否则无法解析成对象\r\n            setConfigSchema(resData)\r\n            let jsonData = JSON.parse(resData)\r\n            if (res.data.ColumnConfig) {\r\n                let ColumnConfig = res.data.ColumnConfig\r\n                let arr = ColumnConfig.split(',')\r\n                let properties = jsonData.schema.properties\r\n                let cusProperty = {}\r\n                let childProperty = {}\r\n                for(let key in properties){\r\n                    for(let ckey in properties[key].properties) {\r\n                        for(let i = 0;i< arr.length; i++) {\r\n                            if (ckey === arr[i]) {\r\n                                childProperty[ckey] = properties[key].properties[ckey]\r\n                                cusProperty[key] = properties[key]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                jsonData.schema.properties = cusProperty\r\n            }\r\n            setSchema(jsonData)\r\n        }\r\n        \r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    const handleSubmit = () => {\r\n        if (valid.length > 0) {\r\n            message.error(\"提交失败,请按照提示填写表单！\")\r\n            return\r\n        }\r\n        if(!formId){\r\n            message.error(\"提交失败！原因：该表单未部署成功，请联系系统管理员！\")\r\n            return\r\n        }\r\n        let processDefinitionId = props.location.state.FlowDefID\r\n        let flowName = props.location.state.flowName\r\n        let userId = props.location.state.userId\r\n        let cookie = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookie = itemArr[1]\r\n            }\r\n        })\r\n        var FormInfo=JSON.stringify({\r\n            formId,\r\n            values: formData\r\n        })\r\n        var date = new Date()\r\n        const myData = {\r\n            FormInfo,\r\n            Config: configSchema,\r\n            processDefinitionId,\r\n            name: `${flowName} - ${date.getDate()} ${date.getMonth() + 1} ${date.getFullYear()}`,\r\n            FormKey: FormKey\r\n        }\r\n        WorkflowStart(cookie, userId, myData)\r\n        .then((res)=>{\r\n            message.success(\"提交成功\")\r\n        })\r\n    };\r\n\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n            alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"startwrap\">\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n                showValidate={false}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file:UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n            <Button style={{ marginLeft: 30 }} onClick={handleClick}>\r\n                重置\r\n            </Button>\r\n            <Button type=\"primary\" onClick={handleSubmit}>\r\n                发起\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx",["158","159"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson, UpdateFormDef } from '../../apis/process'\r\nimport {Modal, Form, Input, Button, message} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass EditForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '确定修改',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                type: 'primary',\r\n                onClick: () => this.goBackToHome()\r\n            }\r\n        ]\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData =()=>{\r\n        const id = this.props.location.state.id\r\n        GetFormJson(id)\r\n          .then((res)=>{\r\n              if (res.status === 200) {\r\n                  this.setState({\r\n                    defaultValue: JSON.parse(res.data)\r\n                  })\r\n              }\r\n          })\r\n    }\r\n    handleScheam = ()=>{\r\n      this.handleOk()\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    goBackToHome=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    hanldeDeepObject = (properties) => {\r\n        let BaseTypeList = []\r\n        for(let key in properties) {\r\n            if (properties[key].hasOwnProperty('properties')) {\r\n                for(let childkey in properties[key].properties) {\r\n                    BaseTypeList.push({\r\n                        Name:properties[key].properties[childkey].title,\r\n                        Type: properties[key].properties[childkey].type\r\n                    })\r\n                }\r\n            } else {\r\n                BaseTypeList.push({\r\n                    Name:properties[key].title,\r\n                    Type: properties[key].type\r\n                })\r\n            }\r\n        }\r\n        const names = BaseTypeList.map((items)=> items.Name)\r\n        console.log(names)\r\n        const nameSet = new Set(names);\r\n        if (names.length === nameSet.size) {\r\n            return BaseTypeList\r\n        } else {\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        let {properties} = FormInfo.schema\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.props.location.state.desc,\r\n            key: this.props.location.state.key,\r\n            modelType:2,\r\n            name: this.props.location.state.name,\r\n            BaseTypeList: this.hanldeDeepObject(properties)\r\n        }\r\n        if(!params.BaseTypeList){\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n        UpdateFormDef(this.props.location.state.id,params)\r\n        .then(res=>{\r\n            alert(\"修改成功\")\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={this.state.defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditForm;\r\n","E:\\react-flowable\\src\\apis\\process.js",["160"],"E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx",[],"E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx",[],"E:\\react-flowable\\src\\libs\\transform\\transform.js",[],"E:\\react-flowable\\src\\utils\\request.js",[],"E:\\react-flowable\\src\\utils\\config.js",[],"E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx",["161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message, Modal, Radio } from 'antd';\r\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\r\nimport './DoneDeal.less'\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"taskId\") > -1) {\r\n                taskIdScope = decodeURI(item.split(\"=\")[1])\r\n                setTaskId(taskIdScope)\r\n            }\r\n        })\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                let schemaConfig =  JSON.parse(fieldData.Config)\r\n                let fieldConfig = schemaConfig.schema.properties\r\n                let formValObj = JSON.parse(fieldData.formId).values\r\n                for(let skey in fieldConfig){\r\n                    for(let val in formValObj) {\r\n                        if (skey === val) {\r\n                            fieldConfig[skey].default = formValObj[val]\r\n                        }\r\n                    }\r\n                }\r\n                schemaConfig.schema.properties = fieldConfig\r\n                setFormId(JSON.parse(fieldData.formId).formId)\r\n                setSchema(schemaConfig)\r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    // 处理请求参数\r\n    const hanldeRouterParams =()=>{\r\n        // 处理Cookie\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                setCookie(itemArr[1])\r\n            }\r\n        })\r\n\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"processDefinitionId\") > -1) {\r\n                setProcessDefinitionId(decodeURI(item.split(\"=\")[1]))\r\n            } else if (item.indexOf(\"userId\") > -1) {\r\n                setUserId(item.split(\"=\")[1])\r\n            }\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    // 附件\r\n    const uploadFile=()=>{\r\n\r\n    }\r\n    // 流转信息\r\n    const showTransFlow=()=>{\r\n        \r\n    }\r\n    // 流程图\r\n    const showModeler=()=>{\r\n\r\n    }\r\n\r\n    // 移交Modal\r\n    const handleOK=()=>{\r\n\r\n    }\r\n    const handleCancel=()=>{\r\n\r\n    }\r\n    // 流程图Modal\r\n    const handleModelerOK=()=>{\r\n\r\n    }\r\n    const handleModelerCancel=()=>{\r\n\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldeRouterParams()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx",["180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import React, { useState, useEffect, useRef } from 'react';\nimport FormRender from 'form-render/lib/antd';\nimport { Button, message, Modal, Radio } from 'antd';\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\nimport './HistoryFlow.less'\nimport StaffSelect from '../../components/StaffSelect/StaffSelect'\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\nimport TableAccount from '../../components/TableAccount/TableAccount'\nimport UploadFile from '../../components/UploadFile/UploadFile'\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\n\nconst NeedToDeal = (props) => {\n    const [formData, setFormData] = useState({});\n    const [schema, setSchema] = useState({})\n    const [cookie, setCookie] = useState(\"\")\n    const [taskId, setTaskId] = useState(\"\")\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\n    const [userId, setUserId] = useState(\"\")\n    const [formId, setFormId] = useState(\"\")\n    const [visible, setVisible] = useState(false)\n    const [modelerVisible, setModelerVisible] = useState(false)\n    const [transValue, setTransValue] = useState(null)\n    const [processImgSrc, setProcessImgSrc] = useState(null)\n    // 流程详细信息\n    const [Assignee, setAssignee] = useState(null)\n    const [ETime, setETime] = useState(null)\n    const [STime, setSTime] = useState(null)\n    const [TaskName, setTaskName] = useState(null)\n    const formRef = useRef();\n    const getData =()=>{\n        let cookieScope = \"\"\n        let taskIdScope = \"\"\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                cookieScope = itemArr[1]\n                setCookie(cookieScope)\n            }\n        })\n        // 处理任务ID\n        taskIdScope = props.location.state.taskId\n        GetFormList(cookieScope, taskIdScope)\n        .then((res)=>{\n            if (res.status === 200) {\n                let fieldData = res.data\n                let schemaConfig =  JSON.parse(fieldData.Config)\n                let fieldConfig = schemaConfig.schema.properties\n                let formValObj = JSON.parse(fieldData.formId).values\n                for(let skey in fieldConfig){\n                    for(let val in formValObj) {\n                        if (skey === val) {\n                            fieldConfig[skey].default = formValObj[val]\n                        }\n                    }\n                }\n                schemaConfig.schema.properties = fieldConfig\n                setFormId(JSON.parse(fieldData.formId).formId)\n                setSchema(schemaConfig)\n            }\n        })\n        GetTaskBaseInfo(taskIdScope)\n        .then((response)=>{\n            let data = response.data\n            setTaskName(data.TaskName)\n            setAssignee(data.Assignee)\n            setSTime(data.STime)\n            setETime(data.ETime)\n        })\n    }\n    const handleClick = () => {\n        formRef.current.resetData({}).then(res => {\n        alert(JSON.stringify(res, null, 2));\n        });\n    };\n\n    const handleClickReback = ()=>{\n        props.history.go(-1)\n    }\n    useEffect(()=>{\n        getData()\n    }, [])\n\n    return (\n        <div className=\"needWrap\">\n            <div className=\"deal-headerbox\">\n                <h2 className=\"dealheaders\">{TaskName}</h2>\n                <div className=\"dealdetails\">\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\n                    <p className=\"detail-items\">起始时间：{STime}</p>\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\n                </div>\n            </div>\n            {/* <div className=\"btnGroups\">\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\n            </div>\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\n                <img src={processImgSrc} alt=\"process\"/>\n            </Modal> */}\n            <FormRender\n                ref={formRef}\n                {...schema}\n                formData={formData}\n                onChange={setFormData}\n                widgets={{ staff: StaffSelect, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\n            />\n            <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={handleClickReback}>返回</Button>\n        </div>\n    );\n};\n\nexport default NeedToDeal;","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx",["203","204","205"],"// 自定义Form Render组件,人员选择器\nimport React, { useState, useEffect } from 'react'\nimport { Modal, Button, Radio, Input } from 'antd';\nimport { UserAddOutlined } from '@ant-design/icons';\nimport { getUserListForRole } from '../../apis/process';\nimport './StaffSelect.less';\nconst { Search } = Input;\n\nconst StaffSelect =(props)=> {\n    const [visible, setVisible] = useState(false)\n    const [personArr, setPersonArr] = useState([])\n    const [person, setPerson] = useState('')\n    const getData =()=>{\n        getUserListForRole()\n        .then((res)=>{\n            let arr = []\n            res.data.getMe.forEach((item)=>{\n                if (item.LevelCode.indexOf('1-24') > -1) {\n                    arr.push(item)\n                }\n            })\n            setPersonArr(arr)\n        })\n    }\n    const onFocus = ()=>{\n        setVisible(true)\n    }\n    const onOk=()=>{\n        setVisible(false)\n        props.handleStaff(person);\n    }\n    const onCancel=()=>{\n        setVisible(false)\n        getData()\n    }\n    const onChange=(e)=>{\n        setPerson(e.target.value)\n    }\n    const handleChange=(e)=>{\n        console.log(e)\n        setPerson(e.target.value)\n    }\n    const onSearch=(e)=>{\n        let arr = []\n        personArr.map((item) => {\n            let list = {\n                OUID: item.OUID,\n                OUName: item.OUName,\n                userList: []\n            }\n            item.userList.map((user) => {\n                if (user.userName.indexOf(e) > -1) {\n                    list.userList.push(user);\n                }\n            })\n            if (list.userList.length) {\n                arr.push(list);\n            }\n        })\n        setPersonArr(arr)\n    }\n    useEffect(()=>{\n        getData()\n    }, [])\n    return (\n        <div className=\"personselect-wrapper\">\n            <div>\n                <span className=\"selectvalue\">{person}</span>\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\n            </div>\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\n                <Search\n                    placeholder=\"请输入姓名\"\n                    allowClear\n                    onSearch={onSearch}\n                    enterButton \n                />\n                {\n                    personArr.map((item,index)=>{\n                        return(\n                            <form key={index} className=\"fieldset-class\">\n                                <fieldset className=\"person-select\">\n                                    <legend className=\"personheader\">{item.OUName}</legend>\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\n                                        {\n                                            item.userList.map((child,childIndex)=>{\n                                                return(\n                                                    <Radio value={child.userName} key={childIndex}>{child.userName}</Radio>\n                                                )\n                                            })\n                                        }\n                                    </Radio.Group>\n                                </fieldset>\n                            </form>\n                        )\n                    })\n                }\n            </Modal>\n        </div>\n    )\n    \n}\n\nexport default StaffSelect\n","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx",["206","207","208","209","210","211","212","213","214"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Modal, Button, Radio, Input,message } from 'antd';\r\nimport { uploadToService } from '../../apis/process';\r\nimport { CloudUploadOutlined } from '@ant-design/icons';\r\nimport './UploadFile.less';\r\nconst { Search } = Input;\r\n\r\nconst UploadFile =(props)=> {\r\n    const [upFileName, setUpFileName] = useState(null)\r\n    const [taskId, setTaskId] = useState(window.taskId)\r\n\r\n    const handleChange=(e)=>{\r\n        \r\n        setUpFileName(e.target.files[0])\r\n        console.log(upFileName)\r\n    }\r\n\r\n    // 确定上传附件\r\n    const sureUploadVisible=()=>{\r\n        if (!upFileName){\r\n            message.error(\"请选择上传文件\")\r\n            return false\r\n        }\r\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ props.name +'/' + upFileName.name;\r\n        var formData = new FormData();\r\n        formData.append(\"filedata\", upFileName);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"POST\", encodeURI(_url));\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    try {\r\n                        var data = JSON.parse(request.responseText);\r\n                        if (data && data.success) {\r\n                            message.success(\"数据上传成功\");\r\n                            // fileuploadToService('workflow', taskId ,upFileName.name)\r\n                            props.onChange(props.name, upFileName)\r\n                        } else {\r\n                            message.error(\"上传失败\")\r\n                        }\r\n                    } catch (e) {\r\n                        message.error(\"上传失败\")\r\n                    }\r\n                } else {\r\n                    message.error(\"上传失败\")\r\n                }\r\n            }\r\n        }\r\n        request.send(formData);\r\n    }\r\n    // 上传文件至服务器\r\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\r\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\r\n        uploadToService(taskId, FilePath)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"上传成功！\")\r\n                // setUploadVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n    }, [])\r\n    return (\r\n        <div className=\"fileupload-wrapper\">\r\n            <Input.Group compact>\r\n                <Input size=\"small\" type=\"file\" style={{ width: '80%' }} placeholder=\"请点击选择文件\" onChange={handleChange}></Input>\r\n                <CloudUploadOutlined size=\"small\" style={{ width: '20%' }} type=\"primary\" className=\"uploadBtn\" onClick={sureUploadVisible}>上传</CloudUploadOutlined>\r\n            </Input.Group>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default UploadFile\r\n","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx",["215","216","217","218","219"],"// 自定义Form Render组件\nimport React, { useState, useEffect, useRef } from 'react'\nimport { Button, Input, Form, Row, Col, Checkbox, message } from 'antd';\nimport { ToolFilled } from '@ant-design/icons';\nimport { getUserListForRole, GetWorkflowBaseInfo, UpdateWorkFlowRight } from '../../apis/process';\nimport StaffSelect from '../../components/StaffSelect/StaffSelect';\nimport './FlowPermission.less';\nconst { Search } = Input;\n\nclass FlowPermission extends React.Component {\n    state={\n        userName: '',\n        flowName: '',\n        flowArr: [],\n        defaultVal: [],\n        keyList: []\n    }\n    handleStaff=async (val)=>{\n        this.setState({\n            userName: val\n        })\n    }\n    \n    onChange=(event)=>{\n        const value = event.target.value;\n        let updateData = []\n        this.state.flowArr.forEach((item)=>{\n            if (item.value === value) {\n                item.checked = !item.checked\n            }\n            updateData.push(item)\n        })\n        console.log(updateData)\n        this.setState({\n            flowArr: updateData\n        })\n    }\n\n    getInput=(e)=>{\n        this.setState({\n            flowName: e.target.value\n        })\n    }\n    \n    getData=()=>{\n        console.log(this.state.userName)\n        let arr =[]\n        let name =  ''\n        GetWorkflowBaseInfo(name, this.state.userName, '', '', 1, 1000)\n        .then((res)=>{\n            res.data.getMe.forEach((item)=>{\n                arr.push({\n                    label: item.WorkflowName,\n                    value: item.Key,\n                    id: item.ID,\n                    checked: item.AccessRight === \"1\" ? true: false\n                })\n            })\n            this.setState({\n                flowArr: arr\n            })\n        })\n    }\n    linkToModeler=()=>{\n        let keyList = []\n        this.state.flowArr.forEach((item)=>{\n            if (item.checked) {\n                keyList.push(item.value)\n            }\n        })\n        let FORMKEYLIST = keyList.toString()\n        UpdateWorkFlowRight(this.state.userName, FORMKEYLIST)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"挂接成功\")\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    handleRouteParams=()=>{\n        const search = window.location.search.slice(1)\n        console.log(search)\n        const searchArr = search.split(\"=\")\n        console.log(searchArr)\n        this.setState({\n            userName:decodeURI(searchArr[1])\n        },()=>{\n            console.log(this.state.userName)\n            this.getData()\n        })\n    }\n    routeGo=(id, label)=>{\n        return ()=>{\n            this.props.history.push({\n                pathname: '/setform',\n                state:{\n                    id: id,\n                    label: label\n                }\n            })\n        }\n    }\n    componentDidMount(){\n        this.handleRouteParams()\n    }\n    render(){\n        return (\n            <div className=\"flowpermiss-wrapper\">\n                <div className=\"form-headerbox\">\n                    <Form layout=\"inline\">\n                        <Form.Item label=\"人员选择\">\n                            <StaffSelect handleStaff={this.handleStaff}></StaffSelect>\n                        </Form.Item>\n                        <Form.Item label=\"流程名称\">\n                            <Input type=\"text\" placeholder=\"请输入流程名称\" size=\"small\" allowClear onChange={this.getInput}></Input>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.linkToModeler}>挂接</Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n                <div className=\"contentbox\">\n                    <Row gutter={[20, 10]}>\n                        {\n                            this.state.flowArr.map((item,index)=>{\n                                return(\n                                    <Col span={6} key={index}>\n                                        <Checkbox value={item.value} checked={item.checked} onChange={this.onChange} className=\"lableclass\">{item.label}</Checkbox>\n                                        <ToolFilled title=\"点击配置表单字段\" className=\"set-form-class\" onClick={this.routeGo(item.id, item.label)}/>\n                                    </Col>\n                                )\n                            })\n                        }\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n   \n}\n\nexport default FlowPermission\n","E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx",["220","221","222","223","224","225","226","227","228","229","230"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Input, Form, Row, Col, Checkbox, message } from 'antd';\r\nimport { getUserListForRole, GetWorkflowBaseInfo, UpdateWorkFlowRight } from '../../apis/process';\r\nimport StaffSelect from '../../components/StaffSelect/StaffSelect';\r\nimport { PartitionOutlined, ArrowRightOutlined } from '@ant-design/icons';\r\nimport './StartPermission.less';\r\nimport flowIcon from \"../../assets/flow-icon.png\"\r\nimport flowArrowIcon from \"../../assets/flow-arrow-right.png\"\r\nconst { Search } = Input;\r\n\r\nclass StartPermission extends React.Component {\r\n    state={\r\n        userName: '',\r\n        flowName: '',\r\n        flowArr: [],\r\n        defaultVal: [],\r\n        keyList: [],\r\n        userId: ''\r\n    }\r\n    \r\n    onChange=(val)=>{\r\n        this.setState({\r\n            keyList: val\r\n        })\r\n    }\r\n\r\n    getInput=(e)=>{\r\n        this.setState({\r\n            flowName: e.target.value\r\n        })\r\n    }\r\n    \r\n    getData=()=>{\r\n        let deArr = []\r\n        let name =  this.state.flowName || ''\r\n        // GetWorkflowBaseInfo(name, '王万里', '', '', 1, 1000)\r\n        GetWorkflowBaseInfo(name, this.state.userName, '', '', 1, 1000)\r\n        .then((res)=>{\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.AccessRight === '1') {\r\n                    deArr.push(item)\r\n                }\r\n            })\r\n            this.setState({\r\n                flowArr: deArr\r\n            })\r\n        })\r\n    }\r\n    handleRouteParams=()=>{\r\n        let userId = \"\"\r\n        let userName = ''\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"userId\") > -1) {\r\n                userId = item.split(\"=\")[1]\r\n            } else if (item.indexOf(\"userName\") > -1) {\r\n                userName = decodeURI(item.split(\"=\")[1])\r\n            }\r\n        })\r\n        this.setState({\r\n            userId: userId,\r\n            userName: userName\r\n        },()=>{\r\n            this.getData()\r\n        })\r\n    }\r\n    handleStart=(flowName, FlowDefID)=>{\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/start',\r\n                state:{\r\n                    flowName: flowName,\r\n                    FlowDefID: FlowDefID,\r\n                    userId: this.state.userId\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.handleRouteParams()\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"flowpermiss-wrapper\">\r\n                <div className=\"form-headerbox\">\r\n                    <Form layout=\"inline\">\r\n                        <Form.Item label=\"流程名称\">\r\n                            <Input type=\"text\" placeholder=\"请输入流程名称\" size=\"small\" allowClear onChange={this.getInput}></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"contentbox\">\r\n                    <Row gutter={[20, 10]}>\r\n                        {\r\n                            this.state.flowArr.map((item,index)=>{\r\n                                return(\r\n                                    <Col span={6} key={index}>\r\n                                        <div className=\"card-wrapper\" onClick={this.handleStart(item.WorkflowName, item.FlowID)}>\r\n                                            <div className=\"left-card\">\r\n                                                <img src={flowIcon} alt=\"\" className=\"flow-icon\"/>\r\n                                                <span>{item.WorkflowName}</span>\r\n                                            </div>\r\n                                            <div className=\"arrow-class\">\r\n                                                <img src={flowArrowIcon} alt=\"\"/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default StartPermission\r\n","E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx",[],"E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx",["231","232"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Select } from 'antd';\r\nimport { getSelectName } from '../../apis/process';\r\nimport './SearchSelect.less';\r\nconst { Option } = Select;\r\n\r\nconst SearchSelect =(myOptions)=> {\r\n    const [optionList, setOptionList] = useState([])\r\n    const hanldeChange=(value)=>{\r\n        myOptions.onChange(myOptions.name, value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        console.log(e)\r\n    }\r\n    const getData = ()=>{\r\n        let arr1 =  myOptions.name.split('_')\r\n        let str = arr1[arr1.length-1]\r\n        getSelectName(str)\r\n        .then((res)=>{\r\n            setOptionList(res.data)\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"fileupload-wrapper\">\r\n            <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                onChange={hanldeChange}\r\n                onSearch={onSearch}\r\n                defaultValue={myOptions.value}\r\n                filterOption={(input, option) =>option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n            >\r\n                {\r\n                    optionList.map((item,index)=>{\r\n                        return(\r\n                            <Option value={item.NODEVALUE} key={index}>{item.NODENAME}</Option>\r\n                        )\r\n                    })\r\n                }\r\n            </Select>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchSelect\r\n","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx",["233","234","235","236"],"// 自定义Form Render组件,人员选择器\r\nimport React from 'react';\r\nimport { Modal, Button, Radio, Input, Table, Space } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { GetAccountConfigInfo, GetAccountPageList } from '../../apis/process';\r\nimport './TableAccount.less';\r\nconst { Column } = Table;\r\nconst { Search } = Input;\r\n\r\nclass TableAccount extends React.Component {\r\n    state={\r\n        visible: false,\r\n        columns: [],\r\n        tableData: [],\r\n        tableAccountValue: this.props.name,\r\n        searchVal: '',\r\n        rowSelection: {\r\n            onChange: (selectedRowKeys) => {\r\n                this.setState({\r\n                    tableAccountValue: selectedRowKeys\r\n                })\r\n                // let input = document.getElementById(\"tableAccountInput\")\r\n                // input.value = selectedRowKeys\r\n            }\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData = () => {\r\n        let arr1 = this.props.name.split('.')\r\n        let accountName = arr1[0]\r\n        let rowkey = \"\"\r\n        if (arr1[1].inedxOf('|')> -1) {\r\n            let keyArr = arr1[1].split('|')\r\n            rowkey = keyArr[0]\r\n        } else {\r\n            rowkey = arr1[1]\r\n        }\r\n        let info = this.state.searchVal || ''\r\n        // let accountName = '项目信息台账简略版'\r\n        // let info = this.state.searchVal || ''\r\n        // let rowkey = '项目流水号'\r\n        GetAccountConfigInfo(accountName)\r\n            .then((res) => {\r\n                let colArr = []\r\n                let arr = res.data.getMe[0].WebShowFieldGroup.split(',')\r\n                arr.forEach(item => {\r\n                    if (!item) {\r\n                        return\r\n                    }\r\n                    colArr.push({\r\n                        key: (new Date()).getTime(),\r\n                        title: item,\r\n                        dataIndex: item,\r\n                    })\r\n                })\r\n                this.setState({\r\n                    columns: colArr\r\n                },()=>{\r\n                    GetAccountPageList(1, 2000, accountName, info)\r\n                    .then((response) => {\r\n                        let arrWrap = []\r\n                        response.data.getMe.forEach(async (item) => {\r\n                            let obj = this.hanldeItem(item)\r\n                            obj.key = obj[rowkey]\r\n                            arrWrap.push(obj)\r\n                        })\r\n                        this.setState({\r\n                            tableData: arrWrap\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n    }\r\n\r\n    hanldeItem = (obj) => {\r\n        const dataObj = obj\r\n        let objarr = []\r\n        let objobj = {}\r\n        dataObj.WebRow.forEach((item) => {\r\n            objarr.push(item.FieldValue)\r\n        })\r\n        for (let i = 0; i < this.state.columns.length; i++) {\r\n            for (let j = 0; j < objarr.length; j++) {\r\n                if (i === j) {\r\n                    objobj[this.state.columns[i].dataIndex] = objarr[j]\r\n                }\r\n            }\r\n        }\r\n        return objobj\r\n    }\r\n    hanldeInputClick = (e) => {\r\n        this.setState({\r\n            visible: true\r\n        })\r\n    }\r\n    onOk = () => {\r\n        this.setState({\r\n            visible: false\r\n        },()=>{\r\n            this.props.onChange(this.props.name, this.state.tableAccountValue)\r\n        })\r\n    }\r\n    onCancel = () => {\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    onSearch = (val) => {\r\n        this.setState({\r\n            searchVal: val\r\n        },()=>{\r\n            this.getData()\r\n        })\r\n    }\r\n    hanldeInputChange=(e)=>{\r\n        console.log(e)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"tableAccount-wrapper\">\r\n                <div>\r\n                    <span className=\"keyclass\">{this.state.tableAccountValue}</span>\r\n                    <Button type=\"primary\" size=\"small\" shape=\"round\" onClick={this.hanldeInputClick}>台账选择器</Button>\r\n                    {/* <Input type=\"text\" id=\"tableAccountInput\" onChange={this.hanldeInputChange} defaultValue={this.state.tableAccountValue} onClick={this.hanldeInputClick}></Input> */}\r\n                </div>\r\n                <Modal title=\"流转信息\" visible={this.state.visible} onCancel={this.onCancel} onOk={this.onOk} width={900}\r\n                    bodyStyle={{ height: '500px', overflowY: 'auto' }} wrapClassName=\"personModalClass\">\r\n                    <Search\r\n                        placeholder=\"请输入姓名\"\r\n                        allowClear\r\n                        onSearch={this.onSearch}\r\n                        enterButton\r\n                    />\r\n                    <Table\r\n                        rowSelection={{\r\n                            type: 'radio',\r\n                            ...this.state.rowSelection,\r\n                        }}\r\n                        columns={this.state.columns}\r\n                        dataSource={this.state.tableData}\r\n                        rowClassName=\"rowClassName\" style={{ width: '100%' }}>\r\n                    </Table>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TableAccount\r\n","E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx",[],"E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx",["237","238","239"],"// 自定义Form Render组件,人员选择器\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Modal, Button, Radio, Input } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { getUserListForRole } from '../../apis/process';\r\nimport './StaffSelectWidget.less';\r\nconst { Search } = Input;\r\n\r\nconst StaffSelectWidget =(props)=> {\r\n    const [visible, setVisible] = useState(false)\r\n    const [personArr, setPersonArr] = useState([])\r\n    const [person, setPerson] = useState(props.value)\r\n    const getData =()=>{\r\n        getUserListForRole()\r\n        .then((res)=>{\r\n            let arr = []\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.LevelCode.indexOf('1-24') > -1) {\r\n                    arr.push(item)\r\n                }\r\n            })\r\n            setPersonArr(arr)\r\n        })\r\n    }\r\n    const onFocus = ()=>{\r\n        setVisible(true)\r\n    }\r\n    const onOk=()=>{\r\n        setVisible(false)\r\n        props.onChange(props.name, person)\r\n    }\r\n    const onCancel=()=>{\r\n        setVisible(false)\r\n        getData()\r\n    }\r\n    const onChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const handleChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        let arr = []\r\n        personArr.map((item) => {\r\n            let list = {\r\n                OUID: item.OUID,\r\n                OUName: item.OUName,\r\n                userList: []\r\n            }\r\n            item.userList.map((user) => {\r\n                if (user.userName.indexOf(e) > -1) {\r\n                    list.userList.push(user);\r\n                }\r\n            })\r\n            if (list.userList.length) {\r\n                arr.push(list);\r\n            }\r\n        })\r\n        setPersonArr(arr)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"personselect-wrapper\">\r\n            <div>\r\n                <span className=\"selectvalue\">{person}</span>\r\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\r\n            </div>\r\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\r\n                <Search\r\n                    placeholder=\"请输入姓名\"\r\n                    allowClear\r\n                    onSearch={onSearch}\r\n                    enterButton \r\n                />\r\n                {\r\n                    personArr.map((item,index)=>{\r\n                        return(\r\n                            <form key={index} className=\"fieldset-class\">\r\n                                <fieldset className=\"person-select\">\r\n                                    <legend className=\"personheader\">{item.OUName}</legend>\r\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\r\n                                        {\r\n                                            item.userList.map((child,childIndex)=>{\r\n                                                return(\r\n                                                    <Radio value={child.userName}>{child.userName}</Radio>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Radio.Group>\r\n                                </fieldset>\r\n                            </form>\r\n                        )\r\n                    })\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default StaffSelectWidget\r\n","E:\\react-flowable\\src\\pages\\SetFlowForm\\SetFlowForm.jsx",["240","241","242","243","244","245","246","247","248","249"],"// 给流程配置需要显示的字段\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Button, Input, Form, Row, Col, Checkbox, Tree, message } from 'antd';\r\nimport { ToolFilled } from '@ant-design/icons';\r\nimport { GetActList, SaveColumnConfig, GetColumnConfig } from '../../apis/process';\r\nimport './SetFlowForm.less';\r\n\r\nconst SetFlowForm =(props)=> {\r\n    const [nodeFlow, SetNodeFlow] = useState([]) // 节点数组\r\n    const [treeData, SetTreeData] = useState([]) // 节点数组\r\n    const [keyList, setkeyList] = useState([])\r\n    const [flowId, setFlowId] = useState('')\r\n    const [schema, setSchema] = useState({})\r\n    const [flowName, setFlowName] = useState('')\r\n    const [clickIndex, setClickIndex] = useState(1000)\r\n\r\n    const [actId, setActId] = useState('')\r\n    const [formKey, setFormKey] = useState('')\r\n\r\n    const [expandedKeys, setExpandedKeys] = useState([]);\r\n    const [checkedKeys, setCheckedKeys] = useState([]);\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n    const [autoExpandParent, setAutoExpandParent] = useState(true);\r\n\r\n    const onChange = (event) => {\r\n        const value = event.target.value;\r\n        let updateData = []\r\n        nodeFlow.forEach((item) => {\r\n            if (item.value === value) {\r\n                item.checked = !item.checked\r\n            }\r\n            updateData.push(item)\r\n        })\r\n        SetNodeFlow(updateData)\r\n    }\r\n\r\n    const getData = () => {\r\n        setFlowId(props.location.state.id)\r\n        setFlowName(props.location.state.label)\r\n        GetActList(props.location.state.id)\r\n            .then((res) => {\r\n                SetNodeFlow(res.data.childShapes)\r\n                let firstNodeId = res.data.childShapes[0].resourceId\r\n                let firstFormKey = res.data.childShapes[0].properties.formreference.key\r\n                GetColumnConfig(firstNodeId, firstFormKey)\r\n                .then((res)=>{\r\n                    let config = JSON.parse(res.data.FormJson).schema\r\n                    setSchema(config)\r\n                    hanldleNodeForm(config)\r\n                })\r\n            })\r\n    }\r\n    const getNodeForm=(nodeId, index, formKey)=>{\r\n        return ()=>{\r\n            setClickIndex(index)\r\n            setActId(nodeId)\r\n            setFormKey(formKey)\r\n            GetColumnConfig(nodeId, formKey)\r\n            .then((res)=>{\r\n                let config = JSON.parse(res.data.FormJson).schema\r\n                setSchema(config)\r\n                hanldleNodeForm(config)\r\n                setCheckedKeys([]);\r\n            })\r\n\r\n        }\r\n    }\r\n    // 处理返回的表单\r\n    const hanldleNodeForm =() => {\r\n        const { properties } = schema\r\n        let propertiesArr = []\r\n        for(let key in properties) {\r\n            const parentNode = {\r\n                title: properties[key].title,\r\n                key: key,\r\n                children: handleEverGroup(properties[key])\r\n            }\r\n            propertiesArr.push(parentNode)\r\n        }\r\n        SetTreeData(propertiesArr)\r\n    }\r\n    // 处理每一个分组的表单\r\n    const handleEverGroup=(itemObj)=>{\r\n        const {properties} = itemObj\r\n        let arr = []\r\n        for(let key in properties) {\r\n            arr.push({\r\n                title: properties[key].title,\r\n                key: key\r\n            })\r\n        }\r\n        return arr\r\n    }\r\n\r\n    const linkToModeler = () => {\r\n        const keys = checkedKeys.toString()\r\n        SaveColumnConfig(actId, formKey, keys)\r\n        .then((res)=>{\r\n            message.success(\"保存成功！\")\r\n        })\r\n    }\r\n    const onExpand = (expandedKeys) => {\r\n        console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\r\n        // or, you can remove all expanded children keys.\r\n\r\n        setExpandedKeys(expandedKeys);\r\n        setAutoExpandParent(false);\r\n    };\r\n\r\n    const onCheck = (checkedKeys) => {\r\n        console.log('onCheck', checkedKeys);\r\n        setCheckedKeys(checkedKeys);\r\n    };\r\n\r\n    const onSelect = (selectedKeys, info) => {\r\n        console.log('onSelect', info);\r\n        setSelectedKeys(selectedKeys);\r\n    };\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldleNodeForm()\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"setform-wrapper\">\r\n            <div className=\"setform-contentheader\">\r\n                <h3>{flowName}</h3>\r\n            </div>\r\n            <Row>\r\n                <Col span={8}>\r\n                    <div className=\"setform-headerbox\">\r\n                        {\r\n                            nodeFlow.map((item, index) => {\r\n                                return (\r\n                                    <div className=\"setform-itembox\" style={{backgroundColor: clickIndex === index ? '#dddddd': ''}} title={item.properties.name} key={index} onClick={getNodeForm(item.resourceId, index, item.properties.formreference.key)}>\r\n                                        节点名称：{item.properties.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <div className=\"setform-contentbox\">\r\n                        <Tree\r\n                            checkable\r\n                            onExpand={onExpand}\r\n                            expandedKeys={expandedKeys}\r\n                            autoExpandParent={autoExpandParent}\r\n                            onCheck={onCheck}\r\n                            checkedKeys={checkedKeys}\r\n                            onSelect={onSelect}\r\n                            selectedKeys={selectedKeys}\r\n                            treeData={treeData}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <div className=\"bottom-btn\">\r\n                <Row>\r\n                    <Col span={8}></Col>\r\n                    <Col span={12}>\r\n                        <Button type=\"primary\" style={{width:'100px'}} shape=\"round\" onClick={linkToModeler}>保存</Button>      \r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetFlowForm\r\n","E:\\react-flowable\\src\\components\\FormRenderTrans\\FormRenderTrans.jsx",["250","251","252","253","254","255","256","257","258","259","260"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message } from 'antd';\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport { getTableName } from '../../apis/process'\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\n\r\nconst FormRenderTrans=(props)=>{\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [FormKey, setFormKey] = useState('')\r\n    const [formId, setFormId] = useState('')\r\n    const [valid, setValid] = useState([])\r\n    const [column, setColumn] = useState(3)\r\n    const formRef = useRef();\r\n    \r\n    const judgeFormType=()=>{\r\n        console.log(props)\r\n        const { formType, schemaStr } = props\r\n        if (formType === \"台账\") {\r\n            getData()\r\n        } else {\r\n            console.log(schemaStr)\r\n            let schemaData = `${schemaStr}`\r\n            setSchema(JSON.parse(schemaData))\r\n        }\r\n    }\r\n\r\n    const getData = ()=>{\r\n        console.log(props)\r\n        const {tableName} = props\r\n        getTableName(tableName)\r\n        .then(async(res)=>{\r\n            const dataArr = res.data.getMe[0].Groups\r\n            let formTransfer = new FormTransfer(dataArr)\r\n            let schema =await formTransfer.handleGroup()\r\n            setSchema(schema)\r\n        })\r\n    }\r\n\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // judgeFormType()\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"startwrap\">\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n                showValidate={false}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file:UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormRenderTrans",{"ruleId":"261","severity":1,"message":"262","line":2,"column":10,"nodeType":"263","messageId":"264","endLine":2,"endColumn":29},{"ruleId":"261","severity":1,"message":"265","line":2,"column":45,"nodeType":"263","messageId":"264","endLine":2,"endColumn":56},{"ruleId":"261","severity":1,"message":"266","line":2,"column":58,"nodeType":"263","messageId":"264","endLine":2,"endColumn":71},{"ruleId":"261","severity":1,"message":"267","line":6,"column":9,"nodeType":"263","messageId":"264","endLine":6,"endColumn":17},{"ruleId":"268","severity":1,"message":"269","line":34,"column":66,"nodeType":"270","messageId":"271","endLine":34,"endColumn":67},{"ruleId":"268","severity":1,"message":"269","line":35,"column":63,"nodeType":"270","messageId":"271","endLine":35,"endColumn":64},{"ruleId":"272","severity":1,"message":"273","line":21,"column":7,"nodeType":"274","endLine":21,"endColumn":9,"suggestions":"275"},{"ruleId":"261","severity":1,"message":"276","line":3,"column":22,"nodeType":"263","messageId":"264","endLine":3,"endColumn":33},{"ruleId":"261","severity":1,"message":"277","line":4,"column":29,"nodeType":"263","messageId":"264","endLine":4,"endColumn":35},{"ruleId":"261","severity":1,"message":"278","line":46,"column":12,"nodeType":"263","messageId":"264","endLine":46,"endColumn":18},{"ruleId":"261","severity":1,"message":"279","line":46,"column":20,"nodeType":"263","messageId":"264","endLine":46,"endColumn":29},{"ruleId":"261","severity":1,"message":"280","line":191,"column":11,"nodeType":"263","messageId":"264","endLine":191,"endColumn":22},{"ruleId":"261","severity":1,"message":"281","line":197,"column":11,"nodeType":"263","messageId":"264","endLine":197,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":365,"column":36,"nodeType":"270","messageId":"284","endLine":365,"endColumn":38},{"ruleId":"282","severity":1,"message":"283","line":366,"column":36,"nodeType":"270","messageId":"284","endLine":366,"endColumn":38},{"ruleId":"285","severity":1,"message":"286","line":590,"column":41,"nodeType":"287","endLine":590,"endColumn":79},{"ruleId":"261","severity":1,"message":"288","line":1,"column":17,"nodeType":"263","messageId":"264","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"273","line":77,"column":7,"nodeType":"274","endLine":77,"endColumn":9,"suggestions":"289"},{"ruleId":"261","severity":1,"message":"265","line":3,"column":10,"nodeType":"263","messageId":"264","endLine":3,"endColumn":21},{"ruleId":"261","severity":1,"message":"277","line":4,"column":29,"nodeType":"263","messageId":"264","endLine":4,"endColumn":35},{"ruleId":"268","severity":1,"message":"269","line":6,"column":91,"nodeType":"270","messageId":"271","endLine":6,"endColumn":92},{"ruleId":"261","severity":1,"message":"290","line":3,"column":18,"nodeType":"263","messageId":"264","endLine":3,"endColumn":25},{"ruleId":"261","severity":1,"message":"291","line":3,"column":34,"nodeType":"263","messageId":"264","endLine":3,"endColumn":39},{"ruleId":"261","severity":1,"message":"292","line":4,"column":23,"nodeType":"263","messageId":"264","endLine":4,"endColumn":35},{"ruleId":"261","severity":1,"message":"293","line":4,"column":37,"nodeType":"263","messageId":"264","endLine":4,"endColumn":45},{"ruleId":"261","severity":1,"message":"294","line":10,"column":12,"nodeType":"263","messageId":"264","endLine":10,"endColumn":18},{"ruleId":"261","severity":1,"message":"295","line":11,"column":12,"nodeType":"263","messageId":"264","endLine":11,"endColumn":18},{"ruleId":"261","severity":1,"message":"296","line":12,"column":12,"nodeType":"263","messageId":"264","endLine":12,"endColumn":31},{"ruleId":"261","severity":1,"message":"297","line":13,"column":12,"nodeType":"263","messageId":"264","endLine":13,"endColumn":18},{"ruleId":"261","severity":1,"message":"298","line":14,"column":12,"nodeType":"263","messageId":"264","endLine":14,"endColumn":18},{"ruleId":"261","severity":1,"message":"299","line":15,"column":12,"nodeType":"263","messageId":"264","endLine":15,"endColumn":19},{"ruleId":"261","severity":1,"message":"300","line":15,"column":21,"nodeType":"263","messageId":"264","endLine":15,"endColumn":31},{"ruleId":"261","severity":1,"message":"301","line":16,"column":28,"nodeType":"263","messageId":"264","endLine":16,"endColumn":45},{"ruleId":"261","severity":1,"message":"302","line":17,"column":12,"nodeType":"263","messageId":"264","endLine":17,"endColumn":22},{"ruleId":"261","severity":1,"message":"303","line":17,"column":24,"nodeType":"263","messageId":"264","endLine":17,"endColumn":37},{"ruleId":"261","severity":1,"message":"304","line":18,"column":27,"nodeType":"263","messageId":"264","endLine":18,"endColumn":43},{"ruleId":"261","severity":1,"message":"280","line":97,"column":11,"nodeType":"263","messageId":"264","endLine":97,"endColumn":22},{"ruleId":"261","severity":1,"message":"281","line":103,"column":11,"nodeType":"263","messageId":"264","endLine":103,"endColumn":28},{"ruleId":"261","severity":1,"message":"305","line":122,"column":11,"nodeType":"263","messageId":"264","endLine":122,"endColumn":19},{"ruleId":"261","severity":1,"message":"306","line":125,"column":11,"nodeType":"263","messageId":"264","endLine":125,"endColumn":23},{"ruleId":"261","severity":1,"message":"290","line":3,"column":18,"nodeType":"263","messageId":"264","endLine":3,"endColumn":25},{"ruleId":"261","severity":1,"message":"307","line":3,"column":27,"nodeType":"263","messageId":"264","endLine":3,"endColumn":32},{"ruleId":"261","severity":1,"message":"291","line":3,"column":34,"nodeType":"263","messageId":"264","endLine":3,"endColumn":39},{"ruleId":"261","severity":1,"message":"292","line":4,"column":23,"nodeType":"263","messageId":"264","endLine":4,"endColumn":35},{"ruleId":"261","severity":1,"message":"293","line":4,"column":37,"nodeType":"263","messageId":"264","endLine":4,"endColumn":45},{"ruleId":"261","severity":1,"message":"294","line":16,"column":12,"nodeType":"263","messageId":"264","endLine":16,"endColumn":18},{"ruleId":"261","severity":1,"message":"295","line":17,"column":12,"nodeType":"263","messageId":"264","endLine":17,"endColumn":18},{"ruleId":"261","severity":1,"message":"308","line":17,"column":20,"nodeType":"263","messageId":"264","endLine":17,"endColumn":29},{"ruleId":"261","severity":1,"message":"296","line":18,"column":12,"nodeType":"263","messageId":"264","endLine":18,"endColumn":31},{"ruleId":"261","severity":1,"message":"309","line":18,"column":33,"nodeType":"263","messageId":"264","endLine":18,"endColumn":55},{"ruleId":"261","severity":1,"message":"297","line":19,"column":12,"nodeType":"263","messageId":"264","endLine":19,"endColumn":18},{"ruleId":"261","severity":1,"message":"310","line":19,"column":20,"nodeType":"263","messageId":"264","endLine":19,"endColumn":29},{"ruleId":"261","severity":1,"message":"298","line":20,"column":12,"nodeType":"263","messageId":"264","endLine":20,"endColumn":18},{"ruleId":"261","severity":1,"message":"299","line":21,"column":12,"nodeType":"263","messageId":"264","endLine":21,"endColumn":19},{"ruleId":"261","severity":1,"message":"300","line":21,"column":21,"nodeType":"263","messageId":"264","endLine":21,"endColumn":31},{"ruleId":"261","severity":1,"message":"311","line":22,"column":12,"nodeType":"263","messageId":"264","endLine":22,"endColumn":26},{"ruleId":"261","severity":1,"message":"301","line":22,"column":28,"nodeType":"263","messageId":"264","endLine":22,"endColumn":45},{"ruleId":"261","severity":1,"message":"302","line":23,"column":12,"nodeType":"263","messageId":"264","endLine":23,"endColumn":22},{"ruleId":"261","severity":1,"message":"303","line":23,"column":24,"nodeType":"263","messageId":"264","endLine":23,"endColumn":37},{"ruleId":"261","severity":1,"message":"312","line":24,"column":12,"nodeType":"263","messageId":"264","endLine":24,"endColumn":25},{"ruleId":"261","severity":1,"message":"304","line":24,"column":27,"nodeType":"263","messageId":"264","endLine":24,"endColumn":43},{"ruleId":"261","severity":1,"message":"280","line":73,"column":11,"nodeType":"263","messageId":"264","endLine":73,"endColumn":22},{"ruleId":"272","severity":1,"message":"273","line":84,"column":8,"nodeType":"274","endLine":84,"endColumn":10,"suggestions":"313"},{"ruleId":"261","severity":1,"message":"314","line":36,"column":11,"nodeType":"263","messageId":"264","endLine":36,"endColumn":19},{"ruleId":"315","severity":1,"message":"316","line":45,"column":30,"nodeType":"317","messageId":"318","endLine":45,"endColumn":32},{"ruleId":"315","severity":1,"message":"316","line":51,"column":38,"nodeType":"317","messageId":"318","endLine":51,"endColumn":40},{"ruleId":"261","severity":1,"message":"319","line":2,"column":38,"nodeType":"263","messageId":"264","endLine":2,"endColumn":44},{"ruleId":"261","severity":1,"message":"307","line":3,"column":10,"nodeType":"263","messageId":"264","endLine":3,"endColumn":15},{"ruleId":"261","severity":1,"message":"277","line":3,"column":17,"nodeType":"263","messageId":"264","endLine":3,"endColumn":23},{"ruleId":"261","severity":1,"message":"291","line":3,"column":25,"nodeType":"263","messageId":"264","endLine":3,"endColumn":30},{"ruleId":"261","severity":1,"message":"320","line":7,"column":9,"nodeType":"263","messageId":"264","endLine":7,"endColumn":15},{"ruleId":"261","severity":1,"message":"308","line":11,"column":20,"nodeType":"263","messageId":"264","endLine":11,"endColumn":29},{"ruleId":"282","severity":1,"message":"283","line":31,"column":36,"nodeType":"270","messageId":"284","endLine":31,"endColumn":38},{"ruleId":"282","severity":1,"message":"283","line":32,"column":36,"nodeType":"270","messageId":"284","endLine":32,"endColumn":38},{"ruleId":"261","severity":1,"message":"321","line":53,"column":11,"nodeType":"263","messageId":"264","endLine":53,"endColumn":30},{"ruleId":"261","severity":1,"message":"288","line":2,"column":17,"nodeType":"263","messageId":"264","endLine":2,"endColumn":25},{"ruleId":"261","severity":1,"message":"322","line":2,"column":27,"nodeType":"263","messageId":"264","endLine":2,"endColumn":36},{"ruleId":"261","severity":1,"message":"319","line":2,"column":38,"nodeType":"263","messageId":"264","endLine":2,"endColumn":44},{"ruleId":"261","severity":1,"message":"323","line":5,"column":10,"nodeType":"263","messageId":"264","endLine":5,"endColumn":28},{"ruleId":"261","severity":1,"message":"320","line":8,"column":9,"nodeType":"263","messageId":"264","endLine":8,"endColumn":15},{"ruleId":"261","severity":1,"message":"288","line":2,"column":17,"nodeType":"263","messageId":"264","endLine":2,"endColumn":25},{"ruleId":"261","severity":1,"message":"322","line":2,"column":27,"nodeType":"263","messageId":"264","endLine":2,"endColumn":36},{"ruleId":"261","severity":1,"message":"319","line":2,"column":38,"nodeType":"263","messageId":"264","endLine":2,"endColumn":44},{"ruleId":"261","severity":1,"message":"324","line":3,"column":41,"nodeType":"263","messageId":"264","endLine":3,"endColumn":49},{"ruleId":"261","severity":1,"message":"290","line":3,"column":51,"nodeType":"263","messageId":"264","endLine":3,"endColumn":58},{"ruleId":"261","severity":1,"message":"323","line":4,"column":10,"nodeType":"263","messageId":"264","endLine":4,"endColumn":28},{"ruleId":"261","severity":1,"message":"325","line":4,"column":51,"nodeType":"263","messageId":"264","endLine":4,"endColumn":70},{"ruleId":"261","severity":1,"message":"326","line":5,"column":8,"nodeType":"263","messageId":"264","endLine":5,"endColumn":19},{"ruleId":"261","severity":1,"message":"327","line":6,"column":10,"nodeType":"263","messageId":"264","endLine":6,"endColumn":27},{"ruleId":"261","severity":1,"message":"328","line":6,"column":29,"nodeType":"263","messageId":"264","endLine":6,"endColumn":47},{"ruleId":"261","severity":1,"message":"320","line":10,"column":9,"nodeType":"263","messageId":"264","endLine":10,"endColumn":15},{"ruleId":"261","severity":1,"message":"319","line":2,"column":38,"nodeType":"263","messageId":"264","endLine":2,"endColumn":44},{"ruleId":"272","severity":1,"message":"273","line":26,"column":8,"nodeType":"274","endLine":26,"endColumn":10,"suggestions":"329"},{"ruleId":"261","severity":1,"message":"291","line":3,"column":25,"nodeType":"263","messageId":"264","endLine":3,"endColumn":30},{"ruleId":"261","severity":1,"message":"330","line":3,"column":46,"nodeType":"263","messageId":"264","endLine":3,"endColumn":51},{"ruleId":"261","severity":1,"message":"331","line":4,"column":10,"nodeType":"263","messageId":"264","endLine":4,"endColumn":25},{"ruleId":"261","severity":1,"message":"332","line":7,"column":9,"nodeType":"263","messageId":"264","endLine":7,"endColumn":15},{"ruleId":"261","severity":1,"message":"314","line":36,"column":11,"nodeType":"263","messageId":"264","endLine":36,"endColumn":19},{"ruleId":"315","severity":1,"message":"316","line":44,"column":30,"nodeType":"317","messageId":"318","endLine":44,"endColumn":32},{"ruleId":"315","severity":1,"message":"316","line":50,"column":38,"nodeType":"317","messageId":"318","endLine":50,"endColumn":40},{"ruleId":"261","severity":1,"message":"319","line":2,"column":38,"nodeType":"263","messageId":"264","endLine":2,"endColumn":44},{"ruleId":"261","severity":1,"message":"333","line":3,"column":18,"nodeType":"263","messageId":"264","endLine":3,"endColumn":23},{"ruleId":"261","severity":1,"message":"334","line":3,"column":25,"nodeType":"263","messageId":"264","endLine":3,"endColumn":29},{"ruleId":"261","severity":1,"message":"324","line":3,"column":41,"nodeType":"263","messageId":"264","endLine":3,"endColumn":49},{"ruleId":"261","severity":1,"message":"335","line":4,"column":10,"nodeType":"263","messageId":"264","endLine":4,"endColumn":20},{"ruleId":"261","severity":1,"message":"336","line":11,"column":12,"nodeType":"263","messageId":"264","endLine":11,"endColumn":19},{"ruleId":"261","severity":1,"message":"337","line":11,"column":21,"nodeType":"263","messageId":"264","endLine":11,"endColumn":31},{"ruleId":"261","severity":1,"message":"338","line":12,"column":12,"nodeType":"263","messageId":"264","endLine":12,"endColumn":18},{"ruleId":"261","severity":1,"message":"314","line":25,"column":11,"nodeType":"263","messageId":"264","endLine":25,"endColumn":19},{"ruleId":"272","severity":1,"message":"339","line":122,"column":8,"nodeType":"274","endLine":122,"endColumn":10,"suggestions":"340"},{"ruleId":"261","severity":1,"message":"277","line":3,"column":10,"nodeType":"263","messageId":"264","endLine":3,"endColumn":16},{"ruleId":"261","severity":1,"message":"290","line":3,"column":18,"nodeType":"263","messageId":"264","endLine":3,"endColumn":25},{"ruleId":"261","severity":1,"message":"341","line":16,"column":12,"nodeType":"263","messageId":"264","endLine":16,"endColumn":19},{"ruleId":"261","severity":1,"message":"342","line":16,"column":21,"nodeType":"263","messageId":"264","endLine":16,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":17,"column":12,"nodeType":"263","messageId":"264","endLine":17,"endColumn":18},{"ruleId":"261","severity":1,"message":"343","line":17,"column":20,"nodeType":"263","messageId":"264","endLine":17,"endColumn":29},{"ruleId":"261","severity":1,"message":"344","line":18,"column":12,"nodeType":"263","messageId":"264","endLine":18,"endColumn":17},{"ruleId":"261","severity":1,"message":"278","line":19,"column":12,"nodeType":"263","messageId":"264","endLine":19,"endColumn":18},{"ruleId":"261","severity":1,"message":"279","line":19,"column":20,"nodeType":"263","messageId":"264","endLine":19,"endColumn":29},{"ruleId":"261","severity":1,"message":"345","line":22,"column":11,"nodeType":"263","messageId":"264","endLine":22,"endColumn":24},{"ruleId":"272","severity":1,"message":"273","line":53,"column":8,"nodeType":"274","endLine":53,"endColumn":10,"suggestions":"346"},"no-unused-vars","'GetWorkflowBaseInfo' is defined but never used.","Identifier","unusedVar","'CreateModel' is defined but never used.","'flowableLogin' is defined but never used.","'TextArea' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["347"],"'GetFormJson' is defined but never used.","'Button' is defined but never used.","'column' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClickReback' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useState' is defined but never used.",["348"],"'message' is defined but never used.","'Radio' is defined but never used.","'SaveFormInfo' is defined but never used.","'TaskSave' is defined but never used.","'cookie' is assigned a value but never used.","'taskId' is assigned a value but never used.","'processDefinitionId' is assigned a value but never used.","'userId' is assigned a value but never used.","'formId' is assigned a value but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'setModelerVisible' is assigned a value but never used.","'transValue' is assigned a value but never used.","'setTransValue' is assigned a value but never used.","'setProcessImgSrc' is assigned a value but never used.","'handleOK' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'Modal' is defined but never used.","'setTaskId' is assigned a value but never used.","'setProcessDefinitionId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'modelerVisible' is assigned a value but never used.","'processImgSrc' is assigned a value but never used.",["349"],"'onChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useRef' is defined but never used.","'Search' is assigned a value but never used.","'fileuploadToService' is assigned a value but never used.","'useEffect' is defined but never used.","'getUserListForRole' is defined but never used.","'Checkbox' is defined but never used.","'UpdateWorkFlowRight' is defined but never used.","'StaffSelect' is defined but never used.","'PartitionOutlined' is defined but never used.","'ArrowRightOutlined' is defined but never used.",["350"],"'Space' is defined but never used.","'UserAddOutlined' is defined but never used.","'Column' is assigned a value but never used.","'Input' is defined but never used.","'Form' is defined but never used.","'ToolFilled' is defined but never used.","'keyList' is assigned a value but never used.","'setkeyList' is assigned a value but never used.","'flowId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getData' and 'hanldleNodeForm'. Either include them or remove the dependency array.",["351"],"'FormKey' is assigned a value but never used.","'setFormKey' is assigned a value but never used.","'setFormId' is assigned a value but never used.","'valid' is assigned a value but never used.","'judgeFormType' is assigned a value but never used.",["352"],{"desc":"353","fix":"354"},{"desc":"353","fix":"355"},{"desc":"353","fix":"356"},{"desc":"353","fix":"357"},{"desc":"358","fix":"359"},{"desc":"353","fix":"360"},"Update the dependencies array to be: [getData]",{"range":"361","text":"362"},{"range":"363","text":"362"},{"range":"364","text":"362"},{"range":"365","text":"362"},"Update the dependencies array to be: [getData, hanldleNodeForm]",{"range":"366","text":"367"},{"range":"368","text":"362"},[640,642],"[getData]",[3139,3141],[3373,3375],[737,739],[4183,4185],"[getData, hanldleNodeForm]",[1893,1895]]