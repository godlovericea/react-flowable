[{"E:\\react-flowable\\src\\index.js":"1","E:\\react-flowable\\src\\App.js":"2","E:\\react-flowable\\src\\reportWebVitals.js":"3","E:\\react-flowable\\src\\pages\\process\\Process.jsx":"4","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx":"5","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx":"6","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx":"7","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx":"8","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx":"9","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx":"10","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx":"11","E:\\react-flowable\\src\\apis\\process.js":"12","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx":"13","E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx":"14","E:\\react-flowable\\src\\libs\\transform\\transform.js":"15","E:\\react-flowable\\src\\utils\\request.js":"16","E:\\react-flowable\\src\\utils\\config.js":"17","E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx":"18","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx":"19","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx":"20","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx":"21","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx":"22","E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx":"23","E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx":"24","E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx":"25","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx":"26","E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx":"27","E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx":"28","E:\\react-flowable\\src\\pages\\SetFlowForm\\SetFlowForm.jsx":"29","E:\\react-flowable\\src\\components\\FormRenderTrans\\FormRenderTrans.jsx":"30","E:\\react-flowable\\src\\libs\\configSchema\\configSchema.js":"31"},{"size":871,"mtime":1616986680823,"results":"32","hashOfConfig":"33"},{"size":2106,"mtime":1615520300566,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1609127554707,"results":"35","hashOfConfig":"33"},{"size":8443,"mtime":1617078650740,"results":"36","hashOfConfig":"33"},{"size":1546,"mtime":1617076813625,"results":"37","hashOfConfig":"33"},{"size":6351,"mtime":1617085906472,"results":"38","hashOfConfig":"33"},{"size":1269,"mtime":1617076642097,"results":"39","hashOfConfig":"33"},{"size":31499,"mtime":1617086825601,"results":"40","hashOfConfig":"33"},{"size":1209,"mtime":1617089130807,"results":"41","hashOfConfig":"33"},{"size":5783,"mtime":1617076687740,"results":"42","hashOfConfig":"33"},{"size":5741,"mtime":1617087827520,"results":"43","hashOfConfig":"33"},{"size":7745,"mtime":1615968912297,"results":"44","hashOfConfig":"33"},{"size":505,"mtime":1615344419865,"results":"45","hashOfConfig":"33"},{"size":1320,"mtime":1615344419864,"results":"46","hashOfConfig":"33"},{"size":13332,"mtime":1617075665735,"results":"47","hashOfConfig":"33"},{"size":2947,"mtime":1615344419878,"results":"48","hashOfConfig":"33"},{"size":205,"mtime":1617000879783,"results":"49","hashOfConfig":"33"},{"size":6407,"mtime":1617091543366,"results":"50","hashOfConfig":"33"},{"size":4087,"mtime":1617087048095,"results":"51","hashOfConfig":"33"},{"size":3645,"mtime":1617089401207,"results":"52","hashOfConfig":"33"},{"size":3046,"mtime":1617090378752,"results":"53","hashOfConfig":"33"},{"size":5245,"mtime":1617087365799,"results":"54","hashOfConfig":"33"},{"size":5026,"mtime":1617076664994,"results":"55","hashOfConfig":"33"},{"size":2514,"mtime":1615521272218,"results":"56","hashOfConfig":"33"},{"size":1607,"mtime":1617089368919,"results":"57","hashOfConfig":"33"},{"size":5249,"mtime":1617090365741,"results":"58","hashOfConfig":"33"},{"size":773,"mtime":1617089286695,"results":"59","hashOfConfig":"33"},{"size":3698,"mtime":1617089412360,"results":"60","hashOfConfig":"33"},{"size":8557,"mtime":1617076880864,"results":"61","hashOfConfig":"33"},{"size":2488,"mtime":1617089333106,"results":"62","hashOfConfig":"33"},{"size":4965,"mtime":1617075248446,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qf848r",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react-flowable\\src\\index.js",[],"E:\\react-flowable\\src\\App.js",[],"E:\\react-flowable\\src\\reportWebVitals.js",[],"E:\\react-flowable\\src\\pages\\process\\Process.jsx",["139","140","141","142","143","144"],"// 表单管理的列表\r\nimport React from \"react\";\r\nimport { GetWorkflowBaseInfo, UpdateStatus, CreateModel, flowableLogin, GetFormListInfo, DeleteFormLogic } from '../../apis/process'\r\n// import Modeler from \"../../components/Modeler\";\r\nimport { Table, Space, Button, Form, Input, Pagination, Modal, message } from 'antd';\r\nimport './process.less'\r\nconst { TextArea } = Input;\r\nconst { Column } = Table;\r\nclass Process extends React.Component{\r\n    state={\r\n        tableData: [],// 表格数据\r\n        name: '', // 检索栏流程名称\r\n        startDate: '',// 检索栏起始日期\r\n        endDate: '',// 检索栏截止日期\r\n        total: 0, // 数据总数\r\n        curPage: 1,// 当前页码\r\n        pageSize: 20,// 当前分页条数\r\n        confirmLoading: false,// 加载新增接口loading效果\r\n        visible: false, // 模态框显示隐藏\r\n        processName: '',// 新增流程名称\r\n        processKey: '',// 新增流程标识\r\n        processDesc: '',// 新增流程描述\r\n        cookieData: '', // flowable-engine鉴权的cookie\r\n        formId: '', // 表单ID\r\n    }\r\n    // 流程名称\r\n    handleProName = (e)=>{\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    // 获取流程创建的日期\r\n    handleDateChange =(date, dateString)=>{\r\n        this.setState({\r\n            startDate: !dateString[0] ? '' : dateString[0] + ' ' + '00:00:00',\r\n            endDate: !dateString[1]? '' : dateString[1] + ' ' +'23:59:59',\r\n        })\r\n    }\r\n    // 翻页\r\n    handlePageChange =(curPage, pageSize) => {\r\n        this.setState({\r\n            curPage: curPage,\r\n            pageSize: pageSize\r\n        },()=>{\r\n            this.getData()\r\n        })\r\n        \r\n    }\r\n    // 改变页码大小\r\n    handlePageSizeChange=(page, size)=>{\r\n    }\r\n    // 拉取数据\r\n    getData = ()=> {\r\n        GetFormListInfo(this.state.name,this.state.curPage, this.state.pageSize)\r\n        .then(res=>{\r\n            this.setState({\r\n                tableData: res.data.getMe,\r\n                total: res.data.totalRcdNum\r\n            })\r\n        })\r\n    }\r\n    // 删除流程\r\n    delProcess =(record) =>{\r\n        return ()=>{\r\n            UpdateStatus(record.ID, 0)\r\n            .then((res)=>{\r\n                this.getData()\r\n            })\r\n        }\r\n    }\r\n    // 删除表单\r\n    delForm = (id)=>{\r\n        return ()=>{\r\n            this.setState({\r\n                visible: true,\r\n                formId: id\r\n            })\r\n        }\r\n    }\r\n    // 删除流程（逻辑删除）\r\n    handleOk=()=>{\r\n        DeleteFormLogic('', this.state.formId)\r\n        .then((res)=>{\r\n            if(res.data.statusCode === \"0000\") {\r\n                message.success(\"删除成功\")\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                this.getData()\r\n            } else {\r\n                message.success(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    // 取消按钮\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    // 创建流程按钮\r\n    handleCreateProcessName=(e)=>{\r\n        this.setState({\r\n            processName: e.target.value\r\n        })\r\n    }\r\n    // 处理流程标识\r\n    handleCreateProcessKey=(e)=>{\r\n        this.setState({\r\n            processKey: e.target.value\r\n        })\r\n    }\r\n    // 处理流程描述\r\n    handleCreateProcessDesc=(e)=>{\r\n        this.setState({\r\n            processDesc: e.target.value\r\n        })\r\n    }\r\n    // 打开对话框\r\n    openModal=()=>{\r\n        this.props.history.push({\r\n            pathname: '/new'\r\n        })\r\n    }\r\n    // 编辑流程\r\n    goEdit=(id,name,key,desc)=>{\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/edit',\r\n                state:{\r\n                    id: id,\r\n                    name: name,\r\n                    key: key,\r\n                    desc: desc\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 查看流程\r\n    goShow=(id)=>{\r\n        // console.log(id)\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/show',\r\n                state:{\r\n                    id: id\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 跳转到台账\r\n    goShowAccount=(name)=>{\r\n        return ()=>{\r\n            this.props.history.push({                              \r\n                pathname: '/trans',\r\n                state:{\r\n                    name: name\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"modeler-wrapper\">\r\n                {/* <Modeler></Modeler> */}\r\n                <Form layout=\"inline\" >\r\n                    <Form.Item label=\"流程名称\">\r\n                        <Input placeholder=\"请输入表单名称\" allowClear onChange={this.handleProName}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.openModal}>新增</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Table dataSource={this.state.tableData} pagination={false} rowClassName=\"rowClassName\">\r\n                    <Column title=\"流程名称\" dataIndex=\"name\" key=\"WorkflowName\" />\r\n                    <Column title=\"流程标识\" dataIndex=\"key\" key=\"Key\" />\r\n                    <Column title=\"创建人\" dataIndex=\"createdBy\" key=\"createdBy\" />\r\n                    <Column title=\"创建时间\" dataIndex=\"created\" key=\"created\" />\r\n                    <Column title=\"最后修改时间\" dataIndex=\"lastUpdated\" key=\"lastUpdated\" />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.Type === '表单' ?\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.goEdit(record.id, record.name, record.key, record.description)}>编辑</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShow(record.id)}>查看</Button>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShowAccount(record.TableName)}>查看</Button>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n                <Modal\r\n                    title=\"提示\"\r\n                    visible={this.state.visible}\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    onOk={this.handleOk}\r\n                    confirmLoading={this.state.confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    确定删除该表单吗？\r\n                </Modal>\r\n                <Pagination\r\n                    current={this.state.curPage}\r\n                    total={this.state.total}\r\n                    showSizeChanger\r\n                    showQuickJumper\r\n                    defaultPageSize={20}\r\n                    onChange = {this.handlePageChange}\r\n                    showTotal={total => `共 ${total} 条数据`}>\r\n                </Pagination>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Process","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx",["145","146"],"// 展示表单类型\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport { GetFormJson } from '../../apis/process'\r\n\r\nconst ShowForm = (props) => {\r\n    // FormRender的formData\r\n    const [formData, setFormData] = useState({});\r\n    // FormRender的schema\r\n    const [schema, setSchema] = useState({})\r\n    // FormRender的表单提交校验\r\n    const [valid, setValid] = useState([])\r\n    // FormRender的组件ref\r\n    const formRef = useRef();\r\n\r\n    // 拉取数据\r\n    const getData =()=>{\r\n        const id = props.location.state.id\r\n        GetFormJson(id)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                setSchema(JSON.parse(res.data))\r\n            }\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    // 返回列表\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n\r\n    // 提交校验\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n            />\r\n            <Button type=\"primary\" style={{ marginLeft: 30 }} onClick={handleClickReback}>\r\n                返回列表\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowForm;","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx",[],"E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx",[],"E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx",["147","148","149","150","151","152","153","154","155","156","157"],"// 在办\nimport React, { useState, useEffect, useRef } from 'react';\nimport FormRender from 'form-render/lib/antd';\nimport FormTransfer from '../../libs/transform/transform'\nimport ConfigSchemaClass from '../../libs/configSchema/configSchema'\nimport configData from '../../utils/config'\nimport { Button, message, Modal, Radio, Input, Table, Space} from 'antd';\nimport { getTableName, GetFormList, GetTransferList, SaveFormInfoTransfer, TaskSave, GetTaskBaseInfo, getUserName, UpdateTaskInfo, TaskGoBack, WorkflowUrging, GetFlowProcessInfo, WorkflowFileOperation, uploadToService} from '../../apis/process'\nimport './NeedToDeal.less'\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\nimport TableAccount from '../../components/TableAccount/TableAccount'\nimport UploadFile from '../../components/UploadFile/UploadFile'\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\nconst { Search } = Input;\nconst { Column } = Table;\n\nconst NeedToDeal = (props) => {\n    // FormRender提交表单校验\n    const [valid, setValid] = useState([])\n    // 表单得标识key\n    const [FormKey, setFormKey] = useState([])\n    // FormRender的formData\n    const [formData, setFormData] = useState({});\n    // FormRender的schema\n    const [schema, setSchema] = useState({})\n    // cookie\n    const [cookie, setCookie] = useState(\"\")\n    // 当前节点的任务ID\n    const [taskId, setTaskId] = useState(\"\")\n    // 当前节点的流程定义ID\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\n    // 用户ID\n    const [userId, setUserId] = useState(\"\")\n    // 表单ID\n    const [formId, setFormId] = useState(\"\")\n    // 任务移交Modal\n    const [visible, setVisible] = useState(false)\n    // 会签选择候选人Modal\n    const [nextPersonVisible, setNextPersonVisible] = useState(false)\n    // 流程图Modal\n    const [modelerVisible, setModelerVisible] = useState(false)\n    // 回退Modal\n    const [rebackVisible, setRebackVisible] = useState(false)\n    // 催办Modal\n    const [urgentVisible, setUrgentVisible] = useState(false)\n    // 候选人\n    const [transValue, setTransValue] = useState(null)\n    // 候选移交人数组\n    const [userNameArr, setUserNameArr] = useState([])\n    // 用户名\n    const [userName, setUserName] = useState('')\n    // 用户所在部门\n    const [userDepart, setUserDepart] = useState('')\n    // 流程图图片地址\n    const [processImgSrc, setProcessImgSrc] = useState(null)\n\n    // 流程详细信息\n    // 分配人\n    const [Assignee, setAssignee] = useState(null)\n    // 截至时间\n    const [ETime, setETime] = useState(null)\n    // 开始时间\n    const [STime, setSTime] = useState(null)\n    // 任务名称\n    const [TaskName, setTaskName] = useState(null)\n    // 流转信息数据表格\n    const [tableData, setTableData] = useState([])\n    // 回退时候查询节点流转信息\n    const [goBacktableData, setGoBacktableData] = useState([])\n    // 催办时候，查询节点流转信息\n    const [urgentTableData, setUrgentTableData] = useState([])\n    // 附件数组\n    const [fileTableData, setFileTableData] = useState([])\n    // 流转信息Modal\n    const [flowVisible, setFlowVisible] = useState(false)\n    // 附件Modal\n    const [fileVisible, setFileVisible] = useState(false)\n    // 上传附件Modal\n    const [uploadVisible, setUploadVisible] = useState(false)\n    // 上传附件文件的名字\n    const [upFileName, setUpFileName] = useState([])\n    // 会签点击完成按钮，选择下一个完成人\n    const [nextPerson, setNextPerson] = useState('')\n    // 会签时候，点击完成，候选人列表\n    const [assigneeList, setAssigneeList] = useState([])\n    // 下一个移交人\n    const [workCode, setWorkCode] = useState(\"\")\n    // 配置schema，传递给下一个节点\n    const [configSchema, setConfigSchema] = useState('')\n    // 前一个节点带过来的values值\n    const [prevSchemaValues, setPrevSchemaValues] = useState({})\n    // 表单类型：台账或者表单\n    const [formType, setFormType] = useState(\"\")\n    // FormRender的ref\n    const formRef = useRef();\n    // 回退的ref\n    const backRef = useRef();\n    // 催办的ref\n    const urgentRef = useRef();\n\n    // FormRender提交表单校验\n    const onValidate=(valid)=>{\n        setValid(valid)\n    }\n    const getData =()=>{\n        // cookie\n        let cookieScope = \"\"\n        // 任务ID\n        let taskIdScope = \"\"\n        // 处理cookie\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        let userNameScope = \"\"\n        let userDepartScope = \"\"\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                cookieScope = itemArr[1]\n                setCookie(cookieScope)\n            }\n        })\n        // 处理任务ID，用户名称，用户所在部门\n        const search = window.location.search.slice(1)\n        const searchArr = search.split(\"&\")\n        searchArr.forEach((item)=>{\n            if (item.indexOf(\"taskId\") > -1) {\n                taskIdScope = decodeURI(item.split(\"=\")[1])\n                setTaskId(taskIdScope)\n                window.taskId = taskIdScope\n            } else if (item.indexOf(\"formId\") > -1) {\n                setFormId(decodeURI(item.split(\"=\")[1]))\n            } else if (item.indexOf(\"userDepart\") > -1) {\n                userDepartScope = decodeURI(item.split(\"=\")[1])\n                setUserDepart(decodeURI(item.split(\"=\")[1]))\n            } else if (item.indexOf(\"userName\") > -1) {\n                userNameScope = decodeURI(item.split(\"=\")[1])\n                setUserName(decodeURI(item.split(\"=\")[1]))\n            }\n        })\n        GetFormList(cookieScope, taskIdScope)\n        .then((res)=>{\n            console.log(res)\n            if (res.status === 200) {\n\n                let fieldData = res.data\n                setFormType(fieldData.Type)\n                if(fieldData.Type === \"台账\") {\n                    // 台账类型\n                    const tableName = fieldData.Config\n                    getTableName(tableName)\n                    .then(async(response)=>{\n                        const dataArr = response.data.getMe[0].Groups\n                        let formTransfer = new FormTransfer(dataArr)\n                        let schemadata =await formTransfer.handleGroup()\n                        setSchema(schemadata)\n                        setConfigSchema(JSON.stringify(schemadata))\n                    })\n                } else {\n                    // 表单类型\n                    setConfigSchema(fieldData.Config)\n                    const web4Config = {\n                        userName: userNameScope,\n                        userDepart: userDepartScope\n                    }\n                    // 上一个节点带过来的values\n                    let values = JSON.parse(fieldData.formId).values\n                    const testData = new ConfigSchemaClass(fieldData.ColumnConfig, fieldData.Config, web4Config, values)\n                    setSchema(testData.schema)\n                }\n            }\n        })\n        GetTaskBaseInfo(taskIdScope)\n        .then((response)=>{\n            let data = response.data\n            setTaskName(data.TaskName)\n            setAssignee(data.Assignee)\n            setSTime(data.STime)\n            setETime(data.ETime)\n        })\n    }\n    // 处理请求参数\n    const hanldeRouterParams =()=>{\n        // 处理Cookie\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                setCookie(itemArr[1])\n            }\n        })\n\n        // 处理任务ID，用户ID，用户名称，用户所在部门\n        const search = window.location.search.slice(1)\n        console.log(search)\n        const searchArr = search.split(\"&\")\n        searchArr.forEach((item)=>{\n            if (item.indexOf(\"processInstanceId\") > -1) {\n                console.log(item)\n                setProcessDefinitionId(item.split(\"=\")[1])\n            } else if (item.indexOf(\"userId\") > -1) {\n                setUserId(item.split(\"=\")[1])\n            } else if (item.indexOf(\"loginName\") > -1) {\n                setUserName(decodeURI(item.split(\"=\")[1]))\n            } else if (item.indexOf(\"FormKey\") > -1) {\n                setFormKey(decodeURI(item.split(\"=\")[1]))\n            }\n        })\n    }\n    // 重置表单\n    const handleClick = () => {\n        formRef.current.resetData({}).then(res => {\n        alert(JSON.stringify(res, null, 2));\n        });\n    };\n    // 返回\n    const handleClickReback = ()=>{\n        props.history.push({\n            pathname: '/home'\n        })\n    }\n    // 任务移交时候搜索框\n    const getTransferName =(value)=>{\n        getUserName(value)\n        .then((res)=>{\n            setUserNameArr(res.data.getMe)\n        })\n    }\n    // 保存\n    const saveTask=()=>{\n        console.log(formData)\n        if (valid.length > 0) {\n            message.error(\"提交失败,请按照提示填写表单\")\n            return\n        }\n        // let obj = {}\n        // if (prevSchemaValues) {\n        //     for(let pkey in prevSchemaValues) {\n        //         for(let fkey in formData) {\n        //             obj[pkey] = prevSchemaValues[pkey]\n        //             obj[fkey] = formData[fkey]\n        //         }\n        //     }\n        // }\n        const myData = {\n            formId:JSON.stringify({\n                formId,\n                values: formData\n            }),\n            Config: configSchema,\n            FormKey: FormKey\n        }\n\n        TaskSave(cookie, taskId, userId, myData)\n        .then((res)=>{\n            message.success('保存成功');\n        })\n    }\n    // 完成\n    // 这里的逻辑：点击完成时候，调取GetTransferList接口查询，下一个节点是否有会签，如果没有，该节点直接完成提交，否则，返回下一个节点的候选人\n    const completeTask=()=>{\n        if (valid.length > 0) {\n            console.log(valid)\n            message.error(\"提交失败,请按照提示填写表单\")\n            return\n        }\n        // let obj = {}\n        // for(let pkey in prevSchemaValues) {\n        //     for(let fkey in formData) {\n        //         obj[pkey] = prevSchemaValues[pkey]\n        //         obj[fkey] = formData[fkey]\n        //     }\n        // }\n        const myData = {\n            formId:JSON.stringify({\n                formId,\n                values: formData\n            }),\n            Config: configSchema,\n            FormKey: FormKey\n        }\n        GetTransferList(taskId, userId, cookie, myData)\n        .then((res)=>{\n            if (res.data.say.statusCode === \"0000\") {\n                if (res.data.getMe.length > 0) {\n                    // 打开Modal\n                    setNextPersonVisible(true)\n                    // 拿去候选人数组\n                    setAssigneeList(res.data.getMe)\n                } else {\n                    message.success(\"当前节点已完成\")\n                    setNextPersonVisible(false)\n                }\n            } else {\n                message.error(res.data.say.errMsg)\n            }\n        })\n    }\n    // 选择候选人\n    const hanldeAssignChange=(e)=>{\n        setWorkCode(e.target.value)\n    }\n    // 完成关闭\n    const closeNextPersonModeler=()=>{\n        setNextPersonVisible(false)\n    }\n\n    // 选择候选人之后，完成确定\n    const sureNextPersonModeler=()=>{\n        \n        if (!workCode){\n            message.error(\"请选择移交人！\")\n            return\n        }\n        // let obj = {}\n        // for(let pkey in prevSchemaValues) {\n        //     for(let fkey in formData) {\n        //         obj[pkey] = prevSchemaValues[pkey]\n        //         obj[fkey] = formData[fkey]\n        //     }\n        // }\n        const myData = {\n            formId:JSON.stringify({\n                formId,\n                values: formData\n            }),\n            Config: configSchema,\n            FormKey: FormKey\n        }\n        SaveFormInfoTransfer(taskId, userId, cookie, workCode, myData)\n        .then(res=>{\n            if (res.data.statusCode === \"0000\") {\n                setNextPersonVisible(true)\n                message.success(\"任务移交成功！\")\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n\n    // 移交按钮\n    const transferTo=()=>{\n        getTransferName(\"\")\n        setVisible(true)\n    }\n    // 回退按钮\n    const goBack =()=>{\n        GetFlowProcessInfo(processDefinitionId)\n        .then((res)=>{\n            setGoBacktableData(res.data.getMe)\n            setRebackVisible(true)\n        })\n        \n    }\n    // 取消回退\n    const closeRebackModeler=()=>{\n        setRebackVisible(false)\n    }\n    // 确定回退\n    const sureRebackModeler=()=>{\n        const textVal = backRef.current.state.value\n        TaskGoBack(processDefinitionId,taskId,textVal)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"回退成功！\")\n                setRebackVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    //催办\n    const urgentTask=()=>{\n        GetFlowProcessInfo(processDefinitionId)\n        .then((res)=>{\n            setUrgentTableData(res.data.getMe)\n            setUrgentVisible(true)\n        })\n    }\n    // 取消催办\n    const closeUrgentModeler=()=>{\n        setUrgentVisible(false)\n    }\n    // 确定催办\n    const sureUrgentModeler=()=>{\n        const textVal = urgentRef.current.state.value\n        WorkflowUrging(processDefinitionId, userName, textVal)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"催办成功！\")\n                setUrgentVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    // 处理单个文件数据\n    const handleFileInfo=(pathname)=>{\n        var filename = ''\n        var pathnameArr = []\n        if (!pathname){\n            return\n        }\n        pathnameArr = pathname.split('/')\n        filename = pathnameArr[pathnameArr.length - 1]\n        return filename\n    }\n    // 附件上传\n    const uploadFile = ()=> {\n        WorkflowFileOperation(taskId)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                let arr = []\n                if (res.data.info !== \"\") {\n                    if (res.data.info.indexOf(',') > -1) {\n                        var infoArr = res.data.info.split(\",\")\n                        infoArr.forEach(item=>{\n                            arr.push({\n                                path: document.referrer + 'CityTemp/熊猫智慧水务平台' + item,\n                                name: handleFileInfo(item),\n                                state: \"上传成功\"\n                            })\n                        })\n                    } else {\n                        arr.push({\n                            path:  document.referrer + 'CityTemp/熊猫智慧水务平台' + res.data.info,\n                            name: handleFileInfo(res.data.info),\n                            state: \"上传成功\"\n                        })\n                    }\n                    console.log(arr)\n                    setFileTableData(arr)\n                }\n                setFileVisible(true)\n            }\n        })\n    }\n    // 打开上传附件窗口\n    const openUploadVisible=()=>{\n        setFileVisible(false)\n        setUploadVisible(true)\n    }\n    // 关闭附件上传窗口\n    const closeUploadVisible=()=>{\n        setUploadVisible(false)\n    }\n    // 确定上传附件\n    const sureUploadVisible=()=>{\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ taskId +'/' + upFileName.name;\n        var formData = new FormData();\n        formData.append(\"filedata\", upFileName);\n        var request = new XMLHttpRequest();\n        request.open(\"POST\", encodeURI(_url));\n        request.onreadystatechange = function() {\n            if (request.readyState == 4) {\n                if (request.status == 200) {\n                    try {\n                        var data = JSON.parse(request.responseText);\n                        if (data && data.success) {\n                            message.success(\"数据上传成功\");\n                            fileuploadToService('workflow', taskId ,upFileName.name)\n                        } else {\n                            message.error(\"上传失败\")\n                        }\n                    } catch (e) {\n                        message.error(\"上传失败\")\n                    }\n                } else {\n                    message.error(\"上传失败\")\n                }\n            }\n        }\n        request.send(formData);\n    }\n    // 上传文件至服务器\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\n        uploadToService(taskId, FilePath)\n        .then((res)=>{\n            if (res.data.statusCode === \"0000\") {\n                message.success(\"上传成功！\")\n                setUploadVisible(false)\n            } else {\n                message.error(res.data.errMsg)\n            }\n        })\n    }\n    // 获取上传的文件\n    const hanldeFileUpload=(e)=>{\n        console.log(e.target.files[0])\n        setUpFileName(e.target.files[0])\n    }\n    // 关闭上传文件的Modal\n    const closeFileVisible=()=>{\n        setFileVisible(false)\n    }\n    // 打开查询流转信息\n    const showTransFlow=()=>{\n        GetFlowProcessInfo(processDefinitionId)\n        .then((res)=>{\n            setTableData(res.data.getMe)\n            setFlowVisible(true)\n        })\n    }\n    // 关闭查询流转信息Modal\n    const closeFlow=()=>{\n        setFlowVisible(false)\n    }\n    // 查询流转信息确定\n    const sureFlow =()=>{\n        setFlowVisible(false)\n    }\n    // 查看历史节点表单\n    const goShowHistoryForm=(taskId)=>{\n        return ()=>{\n            props.history.push({\n                pathname: '/hisflow',\n                state:{\n                    taskId: taskId\n                }\n            })\n        }\n    }\n    // 获取流程图\n    const showModeler=()=>{\n        const imgSrc =  document.referrer + configData.baseURL + '/GetWorkflowDiagram?processInstanceId=' + processDefinitionId + '&t=' + (new Date()).getTime()\n        setProcessImgSrc(imgSrc)\n        setModelerVisible(true)\n    }\n    // 关闭流程图Modal\n    const closeModeler=()=>{\n        setModelerVisible(false)\n    }\n    // 移交Modal\n    const handleOK=()=>{\n        if (!transValue) {\n            message.error(\"请检查移交人！\")\n            return\n        }\n        let Condition = JSON.stringify({\n            assignee: transValue\n        })\n        UpdateTaskInfo(Condition, taskId)\n        .then((res)=>{\n            const parseData = JSON.parse(res.data)\n            if (parseData.assignee === transValue) {\n                message.success(\"移交成功\")\n                setVisible(false)\n            } else {\n                message.error(\"移交失败，请检查移交人！\")\n            }\n        })\n    }\n    // 关闭移交人Modal\n    const handleCancel=()=>{\n        setVisible(false)\n    }\n    // 获取任务移交时候数据\n    const handleSetTrans=(e)=>{\n        setTransValue(e.target.value)\n    }\n    \n    useEffect(()=>{\n        getData()\n        hanldeRouterParams()\n    }, [])\n\n    return (\n        <div className=\"needWrap\">\n            <div className=\"deal-headerbox\">\n                <h2 className=\"dealheaders\">{TaskName}</h2>\n                <div className=\"dealdetails\">\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\n                    <p className=\"detail-items\">起始时间：{STime}</p>\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\n                </div>\n            </div>\n            <div className=\"divider-box\"></div>\n            <div className=\"btnGroups\">\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={saveTask}>保存</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={completeTask}>完成</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={transferTo}>移交</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={goBack}>回退</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={urgentTask}>催办</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\n            </div>\n            <div className=\"divider-box\"></div>\n            <Modal title=\"请选择候选人\" visible={nextPersonVisible} onCancel={closeNextPersonModeler} onOk={sureNextPersonModeler} width={650}>\n                <Radio.Group name=\"assigngroup\" onChange={hanldeAssignChange}>\n                    {\n                        assigneeList.map((item,index)=>{\n                            return(\n                                <Radio key={index} value={item.UserID}>{item.UserName}</Radio>\n                            )\n                        })\n                    }\n                </Radio.Group>\n            </Modal>\n            <Modal title=\"任务移交\" visible={visible} onOk={handleOK} onCancel={handleCancel}\n                bodyStyle={{height:'500px',overflowY:'auto'}}>\n                <div>\n                    <Search\n                        placeholder=\"请输入姓名\"\n                        allowClear\n                        enterButton=\"搜索\"\n                        size=\"large\"\n                        onSearch={getTransferName}\n                    />\n                </div>\n                <Radio.Group name=\"radiogroup\" value={transValue} onChange={handleSetTrans}>\n                    <div style={{display: 'flex',flexDirection: 'column'}}>\n                        {\n                            userNameArr.map((item,index)=>{\n                                return(\n                                    <Radio value={item.JobNum} key={index}>\n                                        <div style={{display:\"flex\", height:'36px',lineHeight:\"36px\"}}>\n                                            <p style={{width:'120px'}}>{item.DepName}</p>\n                                            <p>{item.Name}</p>\n                                        </div>\n                                    </Radio>\n                                )\n                            })\n                        }\n                    </div>\n                </Radio.Group>\n            </Modal>\n            <Modal title=\"流程图\" visible={modelerVisible} onCancel={closeModeler} onOk={closeModeler} width={1000}\n                bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <img src={processImgSrc} alt=\"process\"/>\n            </Modal>\n\n            <Modal title=\"回退\" visible={rebackVisible} onCancel={closeRebackModeler} onOk={sureRebackModeler} width={650}\n                bodyStyle={{ display: 'flex',flexDirection: 'column',justifyContent: 'center'}}>\n                    <Table dataSource={goBacktableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                        <Column title=\"操作步骤\" dataIndex=\"TaskName\" key=\"TaskName\" />\n                        <Column title=\"开始时间\" dataIndex=\"STime\" key=\"STime\" />\n                        <Column title=\"结束时间\" dataIndex=\"ETime\" key=\"ETime\" />\n                        <Column title=\"操作人账号\" dataIndex=\"OperationMan\" key=\"OperationMan\" />\n                        <Column\n                            title=\"流程状态\"\n                            key=\"state\"\n                            render={(text, record) => (\n                                <Space size=\"middle\">\n                                    {\n                                        record.DeleteReason !== \"\" ?\n                                        <span>回退</span>\n                                        :\n                                        <span style={{color: record.State === '进行中'? '#096dd9' : ''}}>{record.State === \"提交\" ? \"已完成\": record.State}</span>\n                                    }\n                                </Space>\n                            )}\n                        />\n                    </Table>\n                    <p className=\"inputBackReason\">请输入回退意见</p>\n                    <Input type=\"text\" placeholder=\"请输入回退意见\" ref={backRef}></Input>\n            </Modal>\n\n            <Modal title=\"催办\" visible={urgentVisible} onCancel={closeUrgentModeler} onOk={sureUrgentModeler} width={650}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',flexDirection: 'column'}}>\n                <Table dataSource={urgentTableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                        <Column title=\"操作步骤\" dataIndex=\"TaskName\" key=\"TaskName\" />\n                        <Column title=\"开始时间\" dataIndex=\"STime\" key=\"STime\" />\n                        <Column title=\"结束时间\" dataIndex=\"ETime\" key=\"ETime\" />\n                        <Column title=\"操作人账号\" dataIndex=\"OperationMan\" key=\"OperationMan\" />\n                        <Column\n                            title=\"流程状态\"\n                            key=\"state\"\n                            render={(text, record) => (\n                                <Space size=\"middle\">\n                                    {\n                                        record.DeleteReason !== \"\" ?\n                                        <span>回退</span>\n                                        :\n                                        <span style={{color: record.State === '进行中'? '#096dd9' : ''}}>{record.State === \"提交\" ? \"已完成\": record.State}</span>\n                                    }\n                                </Space>\n                            )}\n                        />\n                    </Table>\n                    <p className=\"inputBackReason\">请输入催办意见</p>\n                    <Input type=\"text\" placeholder=\"请输入催办意见\" ref={urgentRef}></Input>\n            </Modal>\n\n            <Modal title=\"流转信息\" visible={flowVisible} onCancel={closeFlow} onOk={sureFlow} width={900}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Table dataSource={tableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                    <Column title=\"操作步骤\" dataIndex=\"TaskName\" key=\"TaskName\" />\n                    <Column title=\"开始时间\" dataIndex=\"STime\" key=\"STime\" />\n                    <Column title=\"结束时间\" dataIndex=\"ETime\" key=\"ETime\" />\n                    <Column title=\"操作人账号\" dataIndex=\"OperationMan\" key=\"OperationMan\" />\n                    <Column\n                        title=\"流程状态\"\n                        key=\"state\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    record.DeleteReason !== \"\" ?\n                                    <span>回退</span>\n                                    :\n                                    <span style={{color: record.State === '进行中'? '#096dd9' : ''}}>{record.State === \"提交\" ? \"已完成\": record.State}</span>\n                                }\n                            </Space>\n                        )}\n                    />\n                    <Column\n                        title=\"操作\"\n                        key=\"action\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    record.DeleteReason !== \"\" ?\n                                    <div>\n                                        {record.GoBackReason}\n                                    </div>\n                                    :\n                                    <div>\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={goShowHistoryForm(record.TaskID)}>查看</Button>\n                                    </div>\n                                }\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </Modal>\n\n            <Modal title=\"附件\" visible={fileVisible} onCancel={closeFileVisible} okText=\"上传附件\" onOk={openUploadVisible} width={680}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Table dataSource={fileTableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\n                    <Column title=\"文件名\" dataIndex=\"name\" key=\"name\" />\n                    <Column title=\"状态\" dataIndex=\"state\" key=\"state\" />\n                    <Column\n                        title=\"操作\"\n                        key=\"action\"\n                        render={(text, record) => (\n                            <Space size=\"middle\">\n                                {\n                                    <div>\n                                        <a href={record.path} download={upFileName.name} style={{marginRight:'10px'}}>下载</a>\n                                        <a href={record.path} target=\"_blank\">预览</a>\n                                    </div>\n                                }\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </Modal>\n\n            <Modal title=\"上传附件\" visible={uploadVisible} onCancel={closeUploadVisible} onOk={sureUploadVisible}\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\n                <Input type=\"file\" onChange={hanldeFileUpload}></Input>\n            </Modal>\n            <FormRender\n                ref={formRef}\n                {...schema}\n                formData={formData}\n                onChange={setFormData}\n                onValidate={onValidate}\n                showValidate={false}\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\n            />\n        </div>\n    );\n};\n\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx",["158"],"// 自定义组件——未用到\r\nimport React, { useState } from \"react\";\r\nimport FormRender from \"form-render/lib/antd\";\r\nimport SCHEMA from \"./schema.json\";\r\nimport Cascade from \"./Cascader/Cascader\";\r\nimport Calendar from './Sequelize/Sequelize'\r\nclass Demo extends React.Component {\r\n    state = {\r\n        formData: {},\r\n        valid: []\r\n    }\r\n\r\n    submit = () => {\r\n        if (this.state.valid.length > 0) {\r\n            alert(\"没有通过校验\");\r\n        } else {\r\n            alert(JSON.stringify(this.state.formData, null, 4));\r\n        }\r\n    };\r\n\r\n    onValidate = valid => {\r\n        console.log(valid);\r\n    }\r\n    listenChange=(params)=>{\r\n        console.log(params)\r\n    }\r\n    render(){\r\n        return (\r\n            <div style={{ padding: 60 }}>\r\n                <FormRender\r\n                    {...SCHEMA}\r\n                    formData={this.state.formData}\r\n                    onChange={this.listenChange}\r\n                    onValidate={this.onValidate}\r\n                    widgets={{ cascade: Cascade,calendar: Calendar }}\r\n                />\r\n                <button onClick={this.submit}>提交</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Demo\r\n","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx",["159"],"// 流程发起页面\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message } from 'antd';\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport ConfigSchemaClass from '../../libs/configSchema/configSchema'\r\nimport { GetStartForm, WorkflowStart, getTableName } from '../../apis/process'\r\nimport \"./StartForm.less\"\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\n\r\nconst StartForm = (props) => {\r\n    // FormRender的formData\r\n    const [formData, setFormData] = useState({});\r\n    // FormRender的 schema\r\n    const [schema, setSchema] = useState({})\r\n    // 表单的key\r\n    const [FormKey, setFormKey] = useState('')\r\n    // 表单的id\r\n    const [formId, setFormId] = useState('')\r\n    // formRender 校验 数组\r\n    const [valid, setValid] = useState([])\r\n    // schema的配置文件，需要每次传递保存\r\n    const [configSchema, setConfigSchema] = useState('')\r\n    // form render 的ref\r\n    const formRef = useRef();\r\n\r\n    // 校验提交表单\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n\r\n    // 拉取数据\r\n    const getData =async()=>{\r\n        // 流程ID\r\n        let FlowDefID = props.location.state.FlowDefID\r\n        // 用户名\r\n        let userName = props.location.state.userName\r\n        // 用户部门\r\n        let userDepart = props.location.state.userDepart\r\n        // 拉取发起流程的第一个节点的表单\r\n        let res =await GetStartForm(FlowDefID)\r\n        \r\n        if (res.data.Errmsg) {\r\n            alert(res.data.Errmsg)\r\n            return\r\n        }\r\n        setFormId(res.data.FormID)\r\n        setFormKey(res.data.FormKey)\r\n\r\n        if (res.data.Type === \"台账\") {\r\n            const tableName = res.data.Form\r\n            // 通过台账名称取查询台账字段\r\n            let response = await getTableName(tableName)\r\n            // 接受台账字段数组\r\n            const dataArr = response.data.getMe[0].Groups\r\n            // 处理台账各种字段\r\n            let formTransfer = new FormTransfer(dataArr)\r\n            // 由于异步，需要在外边手动调用处理方法，拿到处理结果\r\n            let schemadata =await formTransfer.handleGroup()\r\n            \r\n            setSchema(schemadata)\r\n            setConfigSchema(JSON.stringify(schemadata))\r\n            \r\n        } else if (res.data.Type === \"表单\") {\r\n            let fieldData = res.data\r\n            setConfigSchema(fieldData.Form)\r\n\r\n            // web4配置文件，用户名，用户部门\r\n            const web4Config = {\r\n                userName: userName,\r\n                userDepart: userDepart\r\n            }\r\n            // 处理表单数据\r\n            const testData = new ConfigSchemaClass(fieldData.ColumnConfig, fieldData.Form, web4Config)\r\n            setSchema(testData.schema)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    // 提交\r\n    const handleSubmit = () => {\r\n        if (valid.length > 0) {\r\n            message.error(\"提交失败,请按照提示填写表单！\")\r\n            return\r\n        }\r\n        if(!formId){\r\n            message.error(\"提交失败！原因：该表单未部署成功，请联系系统管理员！\")\r\n            return\r\n        }\r\n        // 流程定义ID\r\n        let processDefinitionId = props.location.state.FlowDefID\r\n        // 流程名称\r\n        let flowName = props.location.state.flowName\r\n        // 用户ID\r\n        let userId = props.location.state.userId\r\n        // flowable-engine内部鉴权使用的cookie\r\n        let cookie = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookie = itemArr[1]\r\n            }\r\n        })\r\n        var FormInfo=JSON.stringify({\r\n            formId,\r\n            values: formData\r\n        })\r\n        var date = new Date()\r\n        const myData = {\r\n            FormInfo,\r\n            Config: configSchema,\r\n            processDefinitionId,\r\n            name: `${flowName} - ${date.getDate()} ${date.getMonth() + 1} ${date.getFullYear()}`,\r\n            FormKey: FormKey\r\n        }\r\n        WorkflowStart(cookie, userId, myData)\r\n        .then((res)=>{\r\n            message.success(\"提交成功\")\r\n        })\r\n    };\r\n    // 重置按钮\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n            alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"startwrap\">\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n                showValidate={false}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file:UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n            <Button style={{ marginLeft: 30 }} onClick={handleClick}>\r\n                重置\r\n            </Button>\r\n            <Button type=\"primary\" onClick={handleSubmit}>\r\n                发起\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx",[],"E:\\react-flowable\\src\\apis\\process.js",["160"],"import request from '../utils/request'\r\n\r\n// 流程列表\r\nexport function GetWorkflowBaseInfo (WorkflowName, userName, STime, ETime, pageIndex, pageSize) {\r\n    return request({\r\n        url: '/GetWorkflowBaseInfo?WorkflowName=' + WorkflowName +`&UserName=${userName}` + `&STime=` + STime + `&ETime=` + ETime + `&pageIndex=` + pageIndex + `&pageSize=` + pageSize + `&sortFields=created&direction=desc`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 删除流程\r\nexport function UpdateStatus (id, type) {\r\n    return request({\r\n        url: `/UpdateStatus?id=${id}&type${type}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 登录\r\nexport function flowableLogin (data) {\r\n    return request({\r\n        url: `/Flowable_Login`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 新增流程\r\nexport function CreateModel (cookie, data) {\r\n    return request({\r\n        url: `/CreateModel?Cookie=${cookie}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 查询表单列表\r\nexport function GetFormListInfo (FormName, pageIndex, pageSize) {\r\n    return request({\r\n        url: `/GetFormListInfo?FormName=${FormName}&pageIndex=${pageIndex}&pageSize=${pageSize}&sortFields=created&direction=desc`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 查询表单列表\r\nexport function GetFormJson (id) {\r\n    return request({\r\n        url: `/GetFormJson?FormID=${id}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 删除表单\r\nexport function DeleteFormLogic (name, id) {\r\n    return request({\r\n        url: `/DeleteFormLogic?UserName=${name}&FormID=${id}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 编辑表单\r\nexport function UpdateFormDef (id, data) {\r\n    return request({\r\n        url: `/UpdateFormDef?FormID=${id}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 任务发起\r\nexport function WorkflowStart (cookie, userId, data) {\r\n    return request({\r\n        url: `/WorkflowStart?Cookie=${cookie}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 查询表单\r\nexport function GetStartForm (FlowDefID) {\r\n    return request({\r\n        url: `/GetStartForm?FlowDefID=${FlowDefID}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 查询在办表单\r\nexport function GetFormList (Cookie, taskId) {\r\n    return request({\r\n        url: `/GetFormList?Cookie=${Cookie}&TaskID=${taskId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-完成\r\nexport function SaveFormInfo (Cookie, taskId, userId, data) {\r\n    return request({\r\n        url: `/SaveFormInfo?Cookie=${Cookie}&TaskID=${taskId}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 在办-保存\r\nexport function TaskSave (Cookie, taskId, userId, data) {\r\n    return request({\r\n        url: `/TaskSave?Cookie=${Cookie}&TaskID=${taskId}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 在办-查询任务详情\r\nexport function GetTaskBaseInfo (taskId) {\r\n    return request({\r\n        url: `/GetTaskBaseInfo?TaskID=${taskId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务移交\r\nexport function UpdateTaskInfo (CONDITION,TASKID) {\r\n    return request({\r\n        url: `/UpdateTaskInfo?Condition=${CONDITION}&TaskID=${TASKID}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务回退\r\nexport function TaskGoBack (processInstanceId,TASKID, textVal) {\r\n    return request({\r\n        url: `/TaskGoBack?PROC_INST_ID_=${processInstanceId}&TaskID=${TASKID}&Comment=${textVal}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务催办\r\nexport function WorkflowUrging (processInstanceId, UserName, textVal) {\r\n    return request({\r\n        url: `/TaskGoBack?ProcInstID=${processInstanceId}&UserName=${UserName}&Content=${textVal}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务流转信息\r\nexport function GetFlowProcessInfo (processInstanceId) {\r\n    return request({\r\n        url: `/GetFlowProcessInfo?PROC_INST_ID_=${processInstanceId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n// 在办-附件\r\nexport function WorkflowFileOperation (TaskID) {\r\n    return request({\r\n        url: `/WorkflowFileOperation?TaskID=${TaskID}&Type=search`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-附件上传到服务器\r\nexport function uploadToService (TaskID, FilePath) {\r\n    return request({\r\n        url: `/WorkflowFileOperation?TaskID=${TaskID}&Type=add&FilePath=${FilePath}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 流程发起权限配置\r\nexport function UpdateWorkFlowRight (USERNAME, FORMKEYLIST) {\r\n    return request({\r\n        url: `/UpdateWorkFlowRight?UserName=${USERNAME}&FormKeyList=${FORMKEYLIST}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 查询节点信息\r\nexport function GetActList (FLOWDEFID) {\r\n    return request({\r\n        url: `/GetActList?FlowDefID=${FLOWDEFID}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 获取字段配置信息\r\nexport function GetColumnConfig (ACTID, FORMKEY) {\r\n    return request({\r\n        url: `/GetColumnConfig?ActID=${ACTID}&FormKey=${FORMKEY}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 保存字段配置信息\r\nexport function SaveColumnConfig (ACTID, FORMKEY, COLUMNCONFIG) {\r\n    return request({\r\n        url: `/SaveColumnConfig?ActID=${ACTID}&FormKey=${FORMKEY}&ColumnConfig=${COLUMNCONFIG}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 获取移交人信息\r\nexport function GetTransferList (TASKID, USERID, COOKIE, data) {\r\n    return request({\r\n        url: `/GetTransferList?TaskID=${TASKID}&UserID=${USERID}&Cookie=${COOKIE}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 移交完成接口\r\nexport function SaveFormInfoTransfer (TASKID, USERID, COOKIE, WORKCODE, data) {\r\n    return request({\r\n        url: `/SaveFormInfoTransfer?TaskID=${TASKID}&UserID=${USERID}&Cookie=${COOKIE}&WorkCode=${WORKCODE}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 新增流程  \r\nexport function getAssetsList(){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/CountyProduct.svc/AccountManage/GetTableGroupMetaV3?tableName=资产管理_资产明细表&columnName=设备状态`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账查询\r\nexport function getTableName(name){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/CountyProduct.svc/AccountManage/GetTableGroupMetaV3?tableName=${name}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 选择器选项的值查询\r\nexport function getSelectName(nodeName){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_WorkFlow/REST/WorkFlowREST.svc/WorkFlow/175/?nodeName=${nodeName}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 姓名查询\r\nexport function getUserName(name){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/OA.svc/GetAllPerson_PandaWisdom?UserName=${name}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 人员选择器查询\r\nexport function getUserListForRole(){\r\n    return request({\r\n        url: `http://localhost:8089/Cityinterface/rest/services/CountyProduct.svc/AccountManage/getUserListForRole?_version=9999`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账的表查询\r\nexport function GetAccountConfigInfo(accountName){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_CaseManage/REST/CaseManageREST.svc/GetAccountConfigInfo?accountName=${accountName}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账的表查询\r\nexport function GetAccountPageList(pageIndex, pageSize, accountName, info){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_CaseManage/REST/CaseManageREST.svc/GetAccountPageList?pageIndex=${pageIndex}&pageSize=${pageSize}&sortFields=录入时间&direction=desc&accountName=${accountName}&info=${info}`,\r\n        method: 'get'\r\n    })\r\n}\r\n","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx",[],"E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx",[],"E:\\react-flowable\\src\\libs\\transform\\transform.js",[],"E:\\react-flowable\\src\\utils\\request.js",[],"E:\\react-flowable\\src\\utils\\config.js",[],"E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx",["161","162","163","164","165","166","167","168","169","170","171"],"E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx",["172","173","174","175"],"// 查看信息流转历史节点\nimport React, { useState, useEffect, useRef } from 'react';\nimport FormRender from 'form-render/lib/antd';\nimport { Button } from 'antd';\nimport { GetFormList, GetTaskBaseInfo } from '../../apis/process'\nimport './HistoryFlow.less'\nimport StaffSelect from '../../components/StaffSelect/StaffSelect'\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\nimport TableAccount from '../../components/TableAccount/TableAccount'\nimport UploadFile from '../../components/UploadFile/UploadFile'\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\n\nconst NeedToDeal = (props) => {\n    const [formData, setFormData] = useState({});\n    const [schema, setSchema] = useState({})\n    const [cookie, setCookie] = useState(\"\")\n    const [formId, setFormId] = useState(\"\")\n\n    // 流程详细信息\n    const [Assignee, setAssignee] = useState(null)\n    const [ETime, setETime] = useState(null)\n    const [STime, setSTime] = useState(null)\n    const [TaskName, setTaskName] = useState(null)\n    const formRef = useRef();\n\n    const getData =()=>{\n        let cookieScope = \"\"\n        let taskIdScope = \"\"\n        let winCookie = window.document.cookie\n        let winCookieArr = winCookie.split(\";\")\n        winCookieArr.forEach((item)=>{\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\n                let itemArr = item.split(\"=\")\n                cookieScope = itemArr[1]\n                setCookie(cookieScope)\n            }\n        })\n        // 处理任务ID\n        taskIdScope = props.location.state.taskId\n        GetFormList(cookieScope, taskIdScope)\n        .then((res)=>{\n            if (res.status === 200) {\n                let fieldData = res.data\n                let schemaConfig =  JSON.parse(fieldData.Config)\n                let fieldConfig = schemaConfig.schema.properties\n                let formValObj = JSON.parse(fieldData.formId).values\n                // 遍历表单配置与提交的values，并赋值\n                for(let skey in fieldConfig){\n                    for(let val in formValObj) {\n                        if (skey === val) {\n                            fieldConfig[skey].default = formValObj[val]\n                        }\n                    }\n                }\n                schemaConfig.schema.properties = fieldConfig\n                setFormId(JSON.parse(fieldData.formId).formId)\n                setSchema(schemaConfig)\n            }\n        })\n        // 获取当前节点信息\n        GetTaskBaseInfo(taskIdScope)\n        .then((response)=>{\n            let data = response.data\n            setTaskName(data.TaskName)\n            setAssignee(data.Assignee)\n            setSTime(data.STime)\n            setETime(data.ETime)\n        })\n    }\n    const handleClick = () => {\n        formRef.current.resetData({}).then(res => {\n        alert(JSON.stringify(res, null, 2));\n        });\n    };\n\n    const handleClickReback = ()=>{\n        props.history.go(-1)\n    }\n    useEffect(()=>{\n        getData()\n    }, [])\n\n    return (\n        <div className=\"needWrap\">\n            <div className=\"deal-headerbox\">\n                <h2 className=\"dealheaders\">{TaskName}</h2>\n                <div className=\"dealdetails\">\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\n                    <p className=\"detail-items\">起始时间：{STime}</p>\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\n                </div>\n            </div>\n            <FormRender\n                ref={formRef}\n                {...schema}\n                formData={formData}\n                onChange={setFormData}\n                widgets={{ staff: StaffSelect, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\n            />\n            <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={handleClickReback}>返回</Button>\n        </div>\n    );\n};\n\nexport default NeedToDeal;","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx",["176","177","178"],"// 台账的人员选择器组件（非FormRender自定义组件）\nimport React, { useState, useEffect } from 'react'\nimport { Modal, Button, Radio, Input } from 'antd';\nimport { UserAddOutlined } from '@ant-design/icons';\nimport { getUserListForRole } from '../../apis/process';\nimport './StaffSelect.less';\nconst { Search } = Input;\n\nconst StaffSelect =(props)=> {\n    const [visible, setVisible] = useState(false)\n    const [personArr, setPersonArr] = useState([])\n    const [person, setPerson] = useState('')\n    const getData =()=>{\n        getUserListForRole()\n        .then((res)=>{\n            let arr = []\n            res.data.getMe.forEach((item)=>{\n                if (item.LevelCode.indexOf('1-24') > -1) {\n                    arr.push(item)\n                }\n            })\n            setPersonArr(arr)\n        })\n    }\n    const onFocus = ()=>{\n        setVisible(true)\n    }\n    const onOk=()=>{\n        setVisible(false)\n        props.handleStaff(person);\n    }\n    const onCancel=()=>{\n        setVisible(false)\n        getData()\n    }\n    const onChange=(e)=>{\n        setPerson(e.target.value)\n    }\n    const handleChange=(e)=>{\n        console.log(e)\n        setPerson(e.target.value)\n    }\n    const onSearch=(e)=>{\n        let arr = []\n        personArr.map((item) => {\n            let list = {\n                OUID: item.OUID,\n                OUName: item.OUName,\n                userList: []\n            }\n            item.userList.map((user) => {\n                if (user.userName.indexOf(e) > -1) {\n                    list.userList.push(user);\n                }\n            })\n            if (list.userList.length) {\n                arr.push(list);\n            }\n        })\n        setPersonArr(arr)\n    }\n    useEffect(()=>{\n        getData()\n    }, [])\n    return (\n        <div className=\"personselect-wrapper\">\n            <div>\n                <span className=\"selectvalue\">{person}</span>\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\n            </div>\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\n                <Search\n                    placeholder=\"请输入姓名\"\n                    allowClear\n                    onSearch={onSearch}\n                    enterButton \n                />\n                {\n                    personArr.map((item,index)=>{\n                        return(\n                            <form key={index} className=\"fieldset-class\">\n                                <fieldset className=\"person-select\">\n                                    <legend className=\"personheader\" style={{fontSize: '16px'}}>{item.OUName}</legend>\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\n                                        {\n                                            item.userList.map((child,childIndex)=>{\n                                                return(\n                                                    <Radio value={child.userName} key={childIndex}>{child.userName}</Radio>\n                                                )\n                                            })\n                                        }\n                                    </Radio.Group>\n                                </fieldset>\n                            </form>\n                        )\n                    })\n                }\n            </Modal>\n        </div>\n    )\n    \n}\n\nexport default StaffSelect\n","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx",["179","180","181","182","183","184","185","186","187"],"// 自定义Form Render组件——上传附件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Modal, Button, Radio, Input,message } from 'antd';\r\nimport { uploadToService } from '../../apis/process';\r\nimport { CloudUploadOutlined } from '@ant-design/icons';\r\nimport './UploadFile.less';\r\nconst { Search } = Input;\r\n\r\nconst UploadFile =(props)=> {\r\n    const [upFileName, setUpFileName] = useState(null)\r\n    const [taskId, setTaskId] = useState(window.taskId)\r\n\r\n    const handleChange=(e)=>{\r\n        \r\n        setUpFileName(e.target.files[0])\r\n        console.log(upFileName)\r\n    }\r\n\r\n    // 确定上传附件\r\n    const sureUploadVisible=()=>{\r\n        if (!upFileName){\r\n            message.error(\"请选择上传文件\")\r\n            return false\r\n        }\r\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ props.name +'/' + upFileName.name;\r\n        var formData = new FormData();\r\n        formData.append(\"filedata\", upFileName);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"POST\", encodeURI(_url));\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    try {\r\n                        var data = JSON.parse(request.responseText);\r\n                        if (data && data.success) {\r\n                            message.success(\"数据上传成功\");\r\n                            // fileuploadToService('workflow', taskId ,upFileName.name)\r\n                            props.onChange(props.name, upFileName)\r\n                        } else {\r\n                            message.error(\"上传失败\")\r\n                        }\r\n                    } catch (e) {\r\n                        message.error(\"上传失败\")\r\n                    }\r\n                } else {\r\n                    message.error(\"上传失败\")\r\n                }\r\n            }\r\n        }\r\n        request.send(formData);\r\n    }\r\n    // 上传文件至服务器\r\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\r\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\r\n        uploadToService(taskId, FilePath)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"上传成功！\")\r\n                // setUploadVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n    }, [])\r\n    return (\r\n        <div className=\"fileupload-wrapper\">\r\n            <Input.Group compact>\r\n                <Input size=\"small\" type=\"file\" style={{ width: '80%' }} placeholder=\"请点击选择文件\" onChange={handleChange}></Input>\r\n                <CloudUploadOutlined size=\"small\" style={{ width: '20%' }} type=\"primary\" className=\"uploadBtn\" onClick={sureUploadVisible}>上传</CloudUploadOutlined>\r\n            </Input.Group>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default UploadFile\r\n","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx",[],"E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx",[],"E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx",[],"E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx",["188","189"],"// 自定义FormRender组件——下拉搜索组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Select } from 'antd';\r\nimport { getSelectName } from '../../apis/process';\r\nimport './SearchSelect.less';\r\nconst { Option } = Select;\r\n\r\nconst SearchSelect =(myOptions)=> {\r\n    const [optionList, setOptionList] = useState([])\r\n    const hanldeChange=(value)=>{\r\n        myOptions.onChange(myOptions.name, value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        console.log(e)\r\n    }\r\n    const getData = ()=>{\r\n        let arr1 =  myOptions.name.split('_')\r\n        let str = arr1[arr1.length-1]\r\n        getSelectName(str)\r\n        .then((res)=>{\r\n            setOptionList(res.data)\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"select-search-wrapper\" style={{width:'100%'}}>\r\n            <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                onChange={hanldeChange}\r\n                onSearch={onSearch}\r\n                style={{width:'100%'}}\r\n                defaultValue={myOptions.value}\r\n                filterOption={(input, option) =>option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n            >\r\n                {\r\n                    optionList.map((item,index)=>{\r\n                        return(\r\n                            <Option value={item.NODEVALUE} key={index}>{item.NODENAME}</Option>\r\n                        )\r\n                    })\r\n                }\r\n            </Select>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchSelect\r\n","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx",[],"E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx",[],"E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx",["190","191","192"],"// 自定义FormRender组件——人员选择器\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Modal, Button, Radio, Input } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { getUserListForRole } from '../../apis/process';\r\nimport './StaffSelectWidget.less';\r\nconst { Search } = Input;\r\n\r\nconst StaffSelectWidget =(props)=> {\r\n    const [visible, setVisible] = useState(false)\r\n    const [personArr, setPersonArr] = useState([])\r\n    const [person, setPerson] = useState(props.value)\r\n    const getData =()=>{\r\n        getUserListForRole()\r\n        .then((res)=>{\r\n            let arr = []\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.LevelCode.indexOf('1-24') > -1) {\r\n                    arr.push(item)\r\n                }\r\n            })\r\n            setPersonArr(arr)\r\n        })\r\n    }\r\n    const onFocus = ()=>{\r\n        setVisible(true)\r\n    }\r\n    const onOk=()=>{\r\n        setVisible(false)\r\n        props.onChange(props.name, person)\r\n    }\r\n    const onCancel=()=>{\r\n        setVisible(false)\r\n        getData()\r\n    }\r\n    const onChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const handleChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        let arr = []\r\n        personArr.map((item) => {\r\n            let list = {\r\n                OUID: item.OUID,\r\n                OUName: item.OUName,\r\n                userList: []\r\n            }\r\n            item.userList.map((user) => {\r\n                if (user.userName.indexOf(e) > -1) {\r\n                    list.userList.push(user);\r\n                }\r\n            })\r\n            if (list.userList.length) {\r\n                arr.push(list);\r\n            }\r\n        })\r\n        setPersonArr(arr)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"personselect-wrapper\">\r\n            <div>\r\n                <span className=\"selectvalue\">{person}</span>\r\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\r\n            </div>\r\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\r\n                <Search\r\n                    placeholder=\"请输入姓名\"\r\n                    allowClear\r\n                    onSearch={onSearch}\r\n                    enterButton \r\n                />\r\n                {\r\n                    personArr.map((item,index)=>{\r\n                        return(\r\n                            <form key={index} className=\"fieldset-class\">\r\n                                <fieldset className=\"person-select\">\r\n                                    <legend className=\"personheader\">{item.OUName}</legend>\r\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\r\n                                        {\r\n                                            item.userList.map((child,childIndex)=>{\r\n                                                return(\r\n                                                    <Radio value={child.userName}>{child.userName}</Radio>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Radio.Group>\r\n                                </fieldset>\r\n                            </form>\r\n                        )\r\n                    })\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default StaffSelectWidget\r\n","E:\\react-flowable\\src\\pages\\SetFlowForm\\SetFlowForm.jsx",["193","194","195"],"// 给流程配置需要显示的字段（此页面废弃）\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Button, Input, Form, Row, Col, Tree, message, Modal, Select } from 'antd';\r\nimport { GetActList, SaveColumnConfig, GetColumnConfig } from '../../apis/process';\r\nimport './SetFlowForm.less';\r\n\r\nconst { Option } = Select;\r\n\r\nconst SetFlowForm =(props)=> {\r\n    const [nodeFlow, SetNodeFlow] = useState([]) // 节点数组\r\n    const [treeData, SetTreeData] = useState([]) // 节点数组\r\n    const [flowId, setFlowId] = useState('')\r\n    const [schema, setSchema] = useState({})\r\n    const [flowName, setFlowName] = useState('')\r\n    const [clickIndex, setClickIndex] = useState(1000)\r\n\r\n    const [actId, setActId] = useState('')\r\n    const [formKey, setFormKey] = useState('')\r\n\r\n    const [expandedKeys, setExpandedKeys] = useState([]);\r\n    const [checkedKeys, setCheckedKeys] = useState([]);\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n    const [autoExpandParent, setAutoExpandParent] = useState(true);\r\n\r\n    const [inputVisible, setInputVisible] = useState(false)\r\n    const [selectVal, setSelectVal] = useState(\"\")\r\n\r\n    const [beenConfiged, setBeenConfiged] = useState([])\r\n    const [curNodeKey, setCurNodeKey] = useState(\"\")\r\n    const [customInput, setCustomInput] = useState(\"\")\r\n\r\n    const onChange = (event) => {\r\n        const value = event.target.value;\r\n        let updateData = []\r\n        nodeFlow.forEach((item) => {\r\n            if (item.value === value) {\r\n                item.checked = !item.checked\r\n            }\r\n            updateData.push(item)\r\n        })\r\n        SetNodeFlow(updateData)\r\n    }\r\n\r\n    const getData = () => {\r\n        setFlowId(props.location.state.id)\r\n        setFlowName(props.location.state.label)\r\n        GetActList(props.location.state.id)\r\n            .then((res) => {\r\n                SetNodeFlow(res.data.childShapes)\r\n                let firstNodeId = res.data.childShapes[0].resourceId\r\n                let firstFormKey = res.data.childShapes[0].properties.formreference.key\r\n                GetColumnConfig(firstNodeId, firstFormKey)\r\n                .then((res)=>{\r\n                    let resData = res.data.FormJson\r\n                    let config = JSON.parse(resData).schema\r\n                    console.log(config)\r\n                    setSchema(config)\r\n                    hanldleNodeForm(config)\r\n                })\r\n            })\r\n    }\r\n    const getNodeForm=(nodeId, index, formKey)=>{\r\n        return ()=>{\r\n            setClickIndex(index)\r\n            setActId(nodeId)\r\n            setFormKey(formKey)\r\n            GetColumnConfig(nodeId, formKey)\r\n            .then((res)=>{\r\n                let resData = `${res.data.FormJson}`\r\n                if (resData) {\r\n                    let config = JSON.parse(resData).schema\r\n                    setSchema(config)\r\n                    hanldleNodeForm(config)\r\n                }\r\n                setCheckedKeys([]);\r\n            })\r\n\r\n        }\r\n    }\r\n    // 处理返回的表单\r\n    const hanldleNodeForm =() => {\r\n        const { properties } = schema\r\n        let propertiesArr = []\r\n        for(let key in properties) {\r\n            const parentNode = {\r\n                title: properties[key].title,\r\n                key: key,\r\n                children: handleEverGroup(properties[key])\r\n            }\r\n            propertiesArr.push(parentNode)\r\n        }\r\n        SetTreeData(propertiesArr)\r\n    }\r\n    // 处理每一个分组的表单\r\n    const handleEverGroup=(itemObj)=>{\r\n        const {properties} = itemObj\r\n        let arr = []\r\n        for(let key in properties) {\r\n            arr.push({\r\n                title: properties[key].title,\r\n                key: key\r\n            })\r\n        }\r\n        return arr\r\n    }\r\n\r\n    const linkToModeler = () => {\r\n        console.log(beenConfiged)\r\n        const keys = checkedKeys.toString()\r\n        SaveColumnConfig(actId, formKey, keys)\r\n        .then((res)=>{\r\n            message.success(\"保存成功！\")\r\n        })\r\n    }\r\n    const onExpand = (expandedKeys) => {\r\n        console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\r\n        // or, you can remove all expanded children keys.\r\n\r\n        setExpandedKeys(expandedKeys);\r\n        setAutoExpandParent(false);\r\n    };\r\n\r\n    const onCheck = (checkedKeys) => {\r\n        console.log('onCheck', checkedKeys);\r\n        setCheckedKeys(checkedKeys);\r\n    };\r\n\r\n    const onSelect = (selectedKeys, info) => {\r\n        console.log('selectedKeys', selectedKeys)\r\n        if (selectedKeys) {\r\n            setInputVisible(true)\r\n            setCurNodeKey(info.node.key)\r\n        }\r\n        console.log('onSelect', info);\r\n        setSelectedKeys(selectedKeys);\r\n    };\r\n\r\n    const hanldeOkInput=()=>{\r\n        beenConfiged.push({\r\n            key: curNodeKey,\r\n            defaultValue: selectVal === \"自定义值选择器\" ? customInput : selectVal\r\n        })\r\n        setBeenConfiged(beenConfiged)\r\n        setInputVisible(false)\r\n    }\r\n\r\n    const closeOnCancel=()=>{\r\n        setInputVisible(false)\r\n    }\r\n\r\n    const hanldeInputChange=(e)=>{\r\n        setCustomInput(e.target.value)\r\n    }\r\n\r\n    const handleChange=(val)=>{\r\n        setSelectVal(val)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldleNodeForm()\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"setform-wrapper\">\r\n            <div className=\"setform-contentheader\">\r\n                <h3>{flowName}</h3>\r\n            </div>\r\n            <Row>\r\n                <Col span={8}>\r\n                    <div className=\"setform-headerbox\">\r\n                        {\r\n                            nodeFlow.map((item, index) => {\r\n                                return (\r\n                                    <div className=\"setform-itembox\" style={{backgroundColor: clickIndex === index ? '#dddddd': ''}} title={item.properties.name} key={index} onClick={getNodeForm(item.resourceId, index, item.properties.formreference.key)}>\r\n                                        节点名称：{item.properties.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <div className=\"setform-contentbox\">\r\n                        <Tree\r\n                            checkable\r\n                            onExpand={onExpand}\r\n                            expandedKeys={expandedKeys}\r\n                            autoExpandParent={autoExpandParent}\r\n                            onCheck={onCheck}\r\n                            checkedKeys={checkedKeys}\r\n                            onSelect={onSelect}\r\n                            selectedKeys={selectedKeys}\r\n                            treeData={treeData}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <div className=\"bottom-btn\">\r\n                <Row>\r\n                    <Col span={8}></Col>\r\n                    <Col span={12}>\r\n                        <Button type=\"primary\" style={{width:'100px'}} shape=\"round\" onClick={linkToModeler}>保存</Button> \r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            \r\n            <Modal title=\"请配置默认值\" visible={inputVisible} onOk={hanldeOkInput} onCancel={closeOnCancel}>\r\n                <Form layout=\"vertical\" >\r\n                    <Form.Item label=\"选择属性\">\r\n                        <Select style={{ width: '100%' }} onChange={handleChange} allowClear value={selectVal}>\r\n                            <Option value=\"本人姓名\">本人姓名</Option>\r\n                            <Option value=\"本人部门\">本人部门</Option>\r\n                            <Option value=\"自定义值选择器\">自定义值选择器</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {\r\n                        selectVal === '自定义值选择器' ?\r\n                        <Form.Item label=\"自定义值选择器\">\r\n                            <Input type=\"text\" placeholder=\"请以逗号分隔\" onChange={hanldeInputChange}></Input>\r\n                        </Form.Item>\r\n                        :\r\n                        null\r\n                    }\r\n                    \r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetFlowForm\r\n","E:\\react-flowable\\src\\components\\FormRenderTrans\\FormRenderTrans.jsx",["196","197","198","199","200","201","202","203","204","205","206"],"// 查看表单组件\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message } from 'antd';\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport { getTableName } from '../../apis/process'\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\n\r\nconst FormRenderTrans=(props)=>{\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [FormKey, setFormKey] = useState('')\r\n    const [formId, setFormId] = useState('')\r\n    const [valid, setValid] = useState([])\r\n    const [column, setColumn] = useState(3)\r\n    const formRef = useRef();\r\n    \r\n    const judgeFormType=()=>{\r\n        console.log(props)\r\n        const { formType, schemaStr } = props\r\n        if (formType === \"台账\") {\r\n            getData()\r\n        } else {\r\n            console.log(schemaStr)\r\n            let schemaData = `${schemaStr}`\r\n            setSchema(JSON.parse(schemaData))\r\n        }\r\n    }\r\n\r\n    const getData = ()=>{\r\n        console.log(props)\r\n        // 台账的名称\r\n        const {tableName} = props\r\n        getTableName(tableName)\r\n        .then(async(res)=>{\r\n            const dataArr = res.data.getMe[0].Groups\r\n            let formTransfer = new FormTransfer(dataArr)\r\n            let schema =await formTransfer.handleGroup()\r\n            setSchema(schema)\r\n        })\r\n    }\r\n\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // judgeFormType()\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"startwrap\">\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n                showValidate={false}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file:UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormRenderTrans","E:\\react-flowable\\src\\libs\\configSchema\\configSchema.js",[],{"ruleId":"207","severity":1,"message":"208","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":29},{"ruleId":"207","severity":1,"message":"211","line":3,"column":45,"nodeType":"209","messageId":"210","endLine":3,"endColumn":56},{"ruleId":"207","severity":1,"message":"212","line":3,"column":58,"nodeType":"209","messageId":"210","endLine":3,"endColumn":71},{"ruleId":"207","severity":1,"message":"213","line":7,"column":9,"nodeType":"209","messageId":"210","endLine":7,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":35,"column":66,"nodeType":"216","messageId":"217","endLine":35,"endColumn":67},{"ruleId":"214","severity":1,"message":"215","line":36,"column":63,"nodeType":"216","messageId":"217","endLine":36,"endColumn":64},{"ruleId":"207","severity":1,"message":"218","line":13,"column":12,"nodeType":"209","messageId":"210","endLine":13,"endColumn":17},{"ruleId":"219","severity":1,"message":"220","line":30,"column":7,"nodeType":"221","endLine":30,"endColumn":9,"suggestions":"222"},{"ruleId":"207","severity":1,"message":"223","line":55,"column":12,"nodeType":"209","messageId":"210","endLine":55,"endColumn":22},{"ruleId":"207","severity":1,"message":"224","line":85,"column":12,"nodeType":"209","messageId":"210","endLine":85,"endColumn":22},{"ruleId":"207","severity":1,"message":"225","line":85,"column":24,"nodeType":"209","messageId":"210","endLine":85,"endColumn":37},{"ruleId":"207","severity":1,"message":"226","line":93,"column":12,"nodeType":"209","messageId":"210","endLine":93,"endColumn":28},{"ruleId":"207","severity":1,"message":"227","line":93,"column":30,"nodeType":"209","messageId":"210","endLine":93,"endColumn":49},{"ruleId":"207","severity":1,"message":"228","line":95,"column":12,"nodeType":"209","messageId":"210","endLine":95,"endColumn":20},{"ruleId":"207","severity":1,"message":"229","line":213,"column":11,"nodeType":"209","messageId":"210","endLine":213,"endColumn":22},{"ruleId":"207","severity":1,"message":"230","line":219,"column":11,"nodeType":"209","messageId":"210","endLine":219,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":457,"column":36,"nodeType":"216","messageId":"233","endLine":457,"endColumn":38},{"ruleId":"231","severity":1,"message":"232","line":458,"column":36,"nodeType":"216","messageId":"233","endLine":458,"endColumn":38},{"ruleId":"234","severity":1,"message":"235","line":743,"column":41,"nodeType":"236","endLine":743,"endColumn":79},{"ruleId":"207","severity":1,"message":"237","line":2,"column":17,"nodeType":"209","messageId":"210","endLine":2,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":85,"column":7,"nodeType":"221","endLine":85,"endColumn":9,"suggestions":"238"},{"ruleId":"214","severity":1,"message":"215","line":6,"column":91,"nodeType":"216","messageId":"217","endLine":6,"endColumn":92},{"ruleId":"207","severity":1,"message":"239","line":14,"column":12,"nodeType":"209","messageId":"210","endLine":14,"endColumn":18},{"ruleId":"207","severity":1,"message":"240","line":16,"column":12,"nodeType":"209","messageId":"210","endLine":16,"endColumn":18},{"ruleId":"207","severity":1,"message":"241","line":18,"column":12,"nodeType":"209","messageId":"210","endLine":18,"endColumn":31},{"ruleId":"207","severity":1,"message":"242","line":20,"column":12,"nodeType":"209","messageId":"210","endLine":20,"endColumn":18},{"ruleId":"207","severity":1,"message":"243","line":22,"column":12,"nodeType":"209","messageId":"210","endLine":22,"endColumn":18},{"ruleId":"207","severity":1,"message":"244","line":24,"column":28,"nodeType":"209","messageId":"210","endLine":24,"endColumn":45},{"ruleId":"207","severity":1,"message":"245","line":26,"column":27,"nodeType":"209","messageId":"210","endLine":26,"endColumn":43},{"ruleId":"207","severity":1,"message":"229","line":112,"column":11,"nodeType":"209","messageId":"210","endLine":112,"endColumn":22},{"ruleId":"207","severity":1,"message":"230","line":118,"column":11,"nodeType":"209","messageId":"210","endLine":118,"endColumn":28},{"ruleId":"207","severity":1,"message":"246","line":137,"column":11,"nodeType":"209","messageId":"210","endLine":137,"endColumn":19},{"ruleId":"207","severity":1,"message":"247","line":140,"column":11,"nodeType":"209","messageId":"210","endLine":140,"endColumn":23},{"ruleId":"207","severity":1,"message":"239","line":17,"column":12,"nodeType":"209","messageId":"210","endLine":17,"endColumn":18},{"ruleId":"207","severity":1,"message":"243","line":18,"column":12,"nodeType":"209","messageId":"210","endLine":18,"endColumn":18},{"ruleId":"207","severity":1,"message":"229","line":71,"column":11,"nodeType":"209","messageId":"210","endLine":71,"endColumn":22},{"ruleId":"219","severity":1,"message":"220","line":82,"column":8,"nodeType":"221","endLine":82,"endColumn":10,"suggestions":"248"},{"ruleId":"207","severity":1,"message":"249","line":36,"column":11,"nodeType":"209","messageId":"210","endLine":36,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":45,"column":30,"nodeType":"252","messageId":"253","endLine":45,"endColumn":32},{"ruleId":"250","severity":1,"message":"251","line":51,"column":38,"nodeType":"252","messageId":"253","endLine":51,"endColumn":40},{"ruleId":"207","severity":1,"message":"254","line":2,"column":38,"nodeType":"209","messageId":"210","endLine":2,"endColumn":44},{"ruleId":"207","severity":1,"message":"255","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"256","line":3,"column":17,"nodeType":"209","messageId":"210","endLine":3,"endColumn":23},{"ruleId":"207","severity":1,"message":"257","line":3,"column":25,"nodeType":"209","messageId":"210","endLine":3,"endColumn":30},{"ruleId":"207","severity":1,"message":"258","line":7,"column":9,"nodeType":"209","messageId":"210","endLine":7,"endColumn":15},{"ruleId":"207","severity":1,"message":"259","line":11,"column":20,"nodeType":"209","messageId":"210","endLine":11,"endColumn":29},{"ruleId":"231","severity":1,"message":"232","line":31,"column":36,"nodeType":"216","messageId":"233","endLine":31,"endColumn":38},{"ruleId":"231","severity":1,"message":"232","line":32,"column":36,"nodeType":"216","messageId":"233","endLine":32,"endColumn":38},{"ruleId":"207","severity":1,"message":"260","line":53,"column":11,"nodeType":"209","messageId":"210","endLine":53,"endColumn":30},{"ruleId":"207","severity":1,"message":"254","line":2,"column":38,"nodeType":"209","messageId":"210","endLine":2,"endColumn":44},{"ruleId":"219","severity":1,"message":"220","line":26,"column":8,"nodeType":"221","endLine":26,"endColumn":10,"suggestions":"261"},{"ruleId":"207","severity":1,"message":"249","line":36,"column":11,"nodeType":"209","messageId":"210","endLine":36,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":44,"column":30,"nodeType":"252","messageId":"253","endLine":44,"endColumn":32},{"ruleId":"250","severity":1,"message":"251","line":50,"column":38,"nodeType":"252","messageId":"253","endLine":50,"endColumn":40},{"ruleId":"207","severity":1,"message":"262","line":12,"column":12,"nodeType":"209","messageId":"210","endLine":12,"endColumn":18},{"ruleId":"207","severity":1,"message":"249","line":32,"column":11,"nodeType":"209","messageId":"210","endLine":32,"endColumn":19},{"ruleId":"219","severity":1,"message":"263","line":162,"column":8,"nodeType":"221","endLine":162,"endColumn":10,"suggestions":"264"},{"ruleId":"207","severity":1,"message":"256","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":16},{"ruleId":"207","severity":1,"message":"265","line":4,"column":18,"nodeType":"209","messageId":"210","endLine":4,"endColumn":25},{"ruleId":"207","severity":1,"message":"266","line":17,"column":12,"nodeType":"209","messageId":"210","endLine":17,"endColumn":19},{"ruleId":"207","severity":1,"message":"267","line":17,"column":21,"nodeType":"209","messageId":"210","endLine":17,"endColumn":31},{"ruleId":"207","severity":1,"message":"243","line":18,"column":12,"nodeType":"209","messageId":"210","endLine":18,"endColumn":18},{"ruleId":"207","severity":1,"message":"268","line":18,"column":20,"nodeType":"209","messageId":"210","endLine":18,"endColumn":29},{"ruleId":"207","severity":1,"message":"218","line":19,"column":12,"nodeType":"209","messageId":"210","endLine":19,"endColumn":17},{"ruleId":"207","severity":1,"message":"269","line":20,"column":12,"nodeType":"209","messageId":"210","endLine":20,"endColumn":18},{"ruleId":"207","severity":1,"message":"270","line":20,"column":20,"nodeType":"209","messageId":"210","endLine":20,"endColumn":29},{"ruleId":"207","severity":1,"message":"271","line":23,"column":11,"nodeType":"209","messageId":"210","endLine":23,"endColumn":24},{"ruleId":"219","severity":1,"message":"220","line":55,"column":8,"nodeType":"221","endLine":55,"endColumn":10,"suggestions":"272"},"no-unused-vars","'GetWorkflowBaseInfo' is defined but never used.","Identifier","unusedVar","'CreateModel' is defined but never used.","'flowableLogin' is defined but never used.","'TextArea' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'valid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["273"],"'userDepart' is assigned a value but never used.","'nextPerson' is assigned a value but never used.","'setNextPerson' is assigned a value but never used.","'prevSchemaValues' is assigned a value but never used.","'setPrevSchemaValues' is assigned a value but never used.","'formType' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClickReback' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useState' is defined but never used.",["274"],"'cookie' is assigned a value but never used.","'taskId' is assigned a value but never used.","'processDefinitionId' is assigned a value but never used.","'userId' is assigned a value but never used.","'formId' is assigned a value but never used.","'setModelerVisible' is assigned a value but never used.","'setProcessImgSrc' is assigned a value but never used.","'handleOK' is assigned a value but never used.","'handleCancel' is assigned a value but never used.",["275"],"'onChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useRef' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'Radio' is defined but never used.","'Search' is assigned a value but never used.","'setTaskId' is assigned a value but never used.","'fileuploadToService' is assigned a value but never used.",["276"],"'flowId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getData' and 'hanldleNodeForm'. Either include them or remove the dependency array.",["277"],"'message' is defined but never used.","'FormKey' is assigned a value but never used.","'setFormKey' is assigned a value but never used.","'setFormId' is assigned a value but never used.","'column' is assigned a value but never used.","'setColumn' is assigned a value but never used.","'judgeFormType' is assigned a value but never used.",["278"],{"desc":"279","fix":"280"},{"desc":"279","fix":"281"},{"desc":"279","fix":"282"},{"desc":"279","fix":"283"},{"desc":"284","fix":"285"},{"desc":"279","fix":"286"},"Update the dependencies array to be: [getData]",{"range":"287","text":"288"},{"range":"289","text":"288"},{"range":"290","text":"288"},{"range":"291","text":"288"},"Update the dependencies array to be: [getData, hanldleNodeForm]",{"range":"292","text":"293"},{"range":"294","text":"288"},[820,822],"[getData]",[3045,3047],[3011,3013],[744,746],[5286,5288],"[getData, hanldleNodeForm]",[1922,1924]]