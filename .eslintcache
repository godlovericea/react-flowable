[{"E:\\react-flowable\\src\\index.js":"1","E:\\react-flowable\\src\\App.js":"2","E:\\react-flowable\\src\\reportWebVitals.js":"3","E:\\react-flowable\\src\\pages\\process\\Process.jsx":"4","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx":"5","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx":"6","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx":"7","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx":"8","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx":"9","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx":"10","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx":"11","E:\\react-flowable\\src\\apis\\process.js":"12","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx":"13","E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx":"14","E:\\react-flowable\\src\\libs\\transform\\transform.js":"15","E:\\react-flowable\\src\\utils\\request.js":"16","E:\\react-flowable\\src\\utils\\config.js":"17","E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx":"18","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx":"19","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx":"20","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx":"21","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx":"22","E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx":"23","E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx":"24","E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx":"25","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx":"26","E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx":"27","E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx":"28"},{"size":837,"mtime":1614221302246,"results":"29","hashOfConfig":"30"},{"size":1979,"mtime":1615185779042,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1609127554707,"results":"32","hashOfConfig":"30"},{"size":8256,"mtime":1614754562068,"results":"33","hashOfConfig":"30"},{"size":1328,"mtime":1614582933643,"results":"34","hashOfConfig":"30"},{"size":5748,"mtime":1615254351824,"results":"35","hashOfConfig":"30"},{"size":12067,"mtime":1615281299858,"results":"36","hashOfConfig":"30"},{"size":35532,"mtime":1615342230713,"results":"37","hashOfConfig":"30"},{"size":1174,"mtime":1614221302812,"results":"38","hashOfConfig":"30"},{"size":16937,"mtime":1615343048298,"results":"39","hashOfConfig":"30"},{"size":5234,"mtime":1615259781704,"results":"40","hashOfConfig":"30"},{"size":6573,"mtime":1614998422817,"results":"41","hashOfConfig":"30"},{"size":505,"mtime":1614221303266,"results":"42","hashOfConfig":"30"},{"size":1320,"mtime":1614221302266,"results":"43","hashOfConfig":"30"},{"size":13052,"mtime":1615279738566,"results":"44","hashOfConfig":"30"},{"size":2947,"mtime":1611710653906,"results":"45","hashOfConfig":"30"},{"size":205,"mtime":1615280316519,"results":"46","hashOfConfig":"30"},{"size":6200,"mtime":1614668832504,"results":"47","hashOfConfig":"30"},{"size":5183,"mtime":1615265898233,"results":"48","hashOfConfig":"30"},{"size":3700,"mtime":1615270048924,"results":"49","hashOfConfig":"30"},{"size":2893,"mtime":1615023203641,"results":"50","hashOfConfig":"30"},{"size":4507,"mtime":1615280795468,"results":"51","hashOfConfig":"30"},{"size":4591,"mtime":1615176035027,"results":"52","hashOfConfig":"30"},{"size":2543,"mtime":1615019987560,"results":"53","hashOfConfig":"30"},{"size":1498,"mtime":1615019653965,"results":"54","hashOfConfig":"30"},{"size":5287,"mtime":1615019834876,"results":"55","hashOfConfig":"30"},{"size":601,"mtime":1615271942142,"results":"56","hashOfConfig":"30"},{"size":3685,"mtime":1615265709047,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qf848r",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},"E:\\react-flowable\\src\\index.js",[],"E:\\react-flowable\\src\\App.js",[],"E:\\react-flowable\\src\\reportWebVitals.js",[],"E:\\react-flowable\\src\\pages\\process\\Process.jsx",["132","133","134","135","136","137"],"import React from \"react\";\r\nimport { GetWorkflowBaseInfo, UpdateStatus, CreateModel, flowableLogin, GetFormListInfo, DeleteFormLogic } from '../../apis/process'\r\n// import Modeler from \"../../components/Modeler\";\r\nimport { Table, Space, Button, Form, Input, Pagination, Modal, message } from 'antd';\r\nimport './process.less'\r\nconst { TextArea } = Input;\r\nconst { Column } = Table;\r\nclass Process extends React.Component{\r\n    state={\r\n        tableData: [],// 表格数据\r\n        name: '', // 检索栏流程名称\r\n        startDate: '',// 检索栏起始日期\r\n        endDate: '',// 检索栏截止日期\r\n        total: 0, // 数据总数\r\n        curPage: 1,// 当前页码\r\n        pageSize: 20,// 当前分页条数\r\n        confirmLoading: false,// 加载新增接口loading效果\r\n        visible: false, // 模态框显示隐藏\r\n        processName: '',// 新增流程名称\r\n        processKey: '',// 新增流程标识\r\n        processDesc: '',// 新增流程描述\r\n        cookieData: '',\r\n        formId: '', // 表单ID\r\n    }\r\n    handleProName = (e)=>{\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    handleDateChange =(date, dateString)=>{\r\n        console.log(date)\r\n        console.log(dateString)\r\n        this.setState({\r\n            startDate: !dateString[0] ? '' : dateString[0] + ' ' + '00:00:00',\r\n            endDate: !dateString[1]? '' : dateString[1] + ' ' +'23:59:59',\r\n        })\r\n    }\r\n    handlePageChange =(curPage, pageSize) => {\r\n        this.setState({\r\n            curPage: curPage,\r\n            pageSize: pageSize\r\n        },()=>{\r\n            console.log(this.state.curPage,this.state.pageSize)\r\n            this.getData()\r\n        })\r\n        \r\n    }\r\n    handlePageSizeChange=(page, size)=>{\r\n        console.log(page)\r\n        console.log(size)\r\n    }\r\n    // 拉取数据\r\n    getData = ()=> {\r\n        GetFormListInfo(this.state.name,this.state.curPage, this.state.pageSize)\r\n        .then(res=>{\r\n            this.setState({\r\n                tableData: res.data.getMe,\r\n                total: res.data.totalRcdNum\r\n            })\r\n        })\r\n    }\r\n    // 删除流程\r\n    delProcess =(record) =>{\r\n        return ()=>{\r\n            UpdateStatus(record.ID, 0)\r\n            .then((res)=>{\r\n                this.getData()\r\n            })\r\n        }\r\n    }\r\n    // 删除表单\r\n    delForm = (id)=>{\r\n        return ()=>{\r\n            this.setState({\r\n                visible: true,\r\n                formId: id\r\n            })\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        DeleteFormLogic('', this.state.formId)\r\n        .then((res)=>{\r\n            if(res.data.statusCode === \"0000\") {\r\n                message.success(\"删除成功\")\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                this.getData()\r\n            } else {\r\n                message.success(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    handleCreateProcessName=(e)=>{\r\n        this.setState({\r\n            processName: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessKey=(e)=>{\r\n        this.setState({\r\n            processKey: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessDesc=(e)=>{\r\n        this.setState({\r\n            processDesc: e.target.value\r\n        })\r\n    }\r\n    openModal=()=>{\r\n        this.props.history.push({\r\n            pathname: '/new'\r\n        })\r\n    }\r\n    goEdit=(id,name,key,desc)=>{\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/edit',\r\n                state:{\r\n                    id: id,\r\n                    name: name,\r\n                    key: key,\r\n                    desc: desc\r\n                }\r\n            })\r\n        }\r\n    }\r\n    goShow=(id)=>{\r\n        // console.log(id)\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/show',\r\n                state:{\r\n                    id: id\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 跳转到台账\r\n    goShowAccount=(name)=>{\r\n        return ()=>{\r\n            this.props.history.push({                              \r\n                pathname: '/trans',\r\n                state:{\r\n                    name: name\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"modeler-wrapper\">\r\n                {/* <Modeler></Modeler> */}\r\n                <Form layout=\"inline\" >\r\n                    <Form.Item label=\"流程名称\">\r\n                        <Input placeholder=\"请输入表单名称\" allowClear onChange={this.handleProName}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.openModal}>新增</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Table dataSource={this.state.tableData} pagination={false} rowClassName=\"rowClassName\">\r\n                    <Column title=\"流程名称\" dataIndex=\"name\" key=\"WorkflowName\" />\r\n                    <Column title=\"流程标识\" dataIndex=\"key\" key=\"Key\" />\r\n                    <Column title=\"创建人\" dataIndex=\"createdBy\" key=\"createdBy\" />\r\n                    <Column title=\"创建时间\" dataIndex=\"created\" key=\"created\" />\r\n                    <Column title=\"最后修改时间\" dataIndex=\"lastUpdated\" key=\"lastUpdated\" />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.Type === '表单' ?\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.goEdit(record.id, record.name, record.key, record.description)}>编辑</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShow(record.id)}>查看</Button>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShowAccount(record.TableName)}>查看</Button>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n                <Modal\r\n                    title=\"提示\"\r\n                    visible={this.state.visible}\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    onOk={this.handleOk}\r\n                    confirmLoading={this.state.confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    确定删除该表单吗？\r\n                </Modal>\r\n                <Pagination\r\n                    current={this.state.curPage}\r\n                    total={this.state.total}\r\n                    showSizeChanger\r\n                    showQuickJumper\r\n                    defaultPageSize={20}\r\n                    onChange = {this.handlePageChange}\r\n                    showTotal={total => `共 ${total} 条数据`}>\r\n                </Pagination>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Process","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx",["138","139"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport { GetFormJson } from '../../apis/process'\r\n\r\nconst StartForm = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        const id = props.location.state.id\r\n        GetFormJson(id)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                setSchema(JSON.parse(res.data))\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n            <Button type=\"primary\" style={{ marginLeft: 30 }} onClick={handleClickReback}>\r\n                返回列表\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx",["140","141"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson } from '../../apis/process'\r\nimport {Modal, Form, Input, Button, message} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\n\r\nconst defaultValue = {\r\n    schema: {\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n      },\r\n    },\r\n    displayType: 'row',\r\n    showDescIcon: true,\r\n    labelWidth: 120,\r\n  };\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass NewForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '保存',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                onClick: () => this.goBackToList()\r\n            },\r\n        ]\r\n    }\r\n    handleScheam = ()=>{\r\n        this.setState({\r\n            isModalVisible: true\r\n        })\r\n    }\r\n    goBackToList=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    hanldeEveryObject=(obj)=>{\r\n\r\n    }\r\n    hanldeDeepObject = (properties) => {\r\n        let BaseTypeList = []\r\n        for(let key in properties) {\r\n            if (properties[key].hasOwnProperty('properties')) {\r\n                for(let childkey in properties[key].properties) {\r\n                    BaseTypeList.push({\r\n                        Name:properties[key].properties[childkey].title,\r\n                        Type: properties[key].properties[childkey].type\r\n                    })\r\n                }\r\n            } else {\r\n                BaseTypeList.push({\r\n                    Name:properties[key].title,\r\n                    Type: properties[key].type\r\n                })\r\n            }\r\n        }\r\n        const names = BaseTypeList.map((items)=> items.Name)\r\n        console.log(names)\r\n        const nameSet = new Set(names);\r\n        if (names.length === nameSet.size) {\r\n            return BaseTypeList\r\n        } else {\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        var cookies = document.cookie\r\n        var arr = cookies.split(\";\")\r\n        var cookieKeyVal = \"\"\r\n        arr.forEach(item=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > 0) {\r\n                cookieKeyVal  = item\r\n            }\r\n        })\r\n        var cookie = cookieKeyVal.split(\"=\")[1]\r\n\r\n        console.log(this.formNameRef.current.state.value)\r\n        if (!this.formNameRef.current.state.value) {\r\n            alert(\"表单名称必填\")\r\n            return false\r\n        }\r\n        let {properties} = FormInfo.schema\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.formDescRef.current.state.value,\r\n            key:this.formKeyRef.current.state.value,\r\n            modelType:2,\r\n            name: this.formNameRef.current.state.value,\r\n            BaseTypeList: this.hanldeDeepObject(properties)\r\n        }\r\n        if(!params.BaseTypeList){\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n        CreateModel(cookie,params)\r\n        .then(res=>{\r\n            alert(\"新增成功\")\r\n            this.setState({\r\n                isModalVisible: false\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewForm;\r\n","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx",["142"],"import React, { Component } from 'react'\r\nimport { getTableName, getSelectName } from '../../apis/process'\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport './transform.less'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\n\r\nexport default class Transform extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef = React.createRef()\r\n        this.state={\r\n            schema: {},\r\n            formData: {}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData = ()=>{\r\n        const tableName = this.props.location.state.name\r\n        getTableName(tableName)\r\n        .then((res)=>{\r\n            const dataArr = res.data.getMe[0].Groups\r\n            this.handleGroup(dataArr)\r\n        })\r\n    }\r\n    asyncFunc = async(name) =>{\r\n        let result = await getSelectName(name)\r\n        return result.data\r\n    }\r\n    hanldeSelect = async(name)=> {\r\n        let obj = {}\r\n        let data = await this.asyncFunc(name);\r\n        let enumVals = []\r\n        let enumNames = []\r\n        data.forEach((item)=>{\r\n            enumVals.push(item.NODEVALUE)\r\n            enumNames.push(item.NODENAME)\r\n        })\r\n        obj = {\r\n            title: name,\r\n            type: 'string',\r\n            enum: enumVals,\r\n            enumNames: enumNames\r\n        }\r\n        return obj\r\n    }\r\n    // 多级联动\r\n    hanldeSelectTreeNode=async(name)=>{\r\n        console.log(\"级联选择起码\")\r\n        return {\r\n            title: name,\r\n            \"ui:widget\": \"cascader\"\r\n        }\r\n    }\r\n    handleEveryGroup= async(schemaList)=>{\r\n        let obj = {}\r\n        let objKey = \"\"\r\n        for(let i=0;i<schemaList.length;i++) {\r\n            if (!schemaList[i].Visible){\r\n                return\r\n            }\r\n            const shape = schemaList[i].Shape\r\n            const type = schemaList[i].Type\r\n            const name = schemaList[i].FieldName\r\n            const itemObj = schemaList[i]\r\n            const ConfigInfo = schemaList[i].ConfigInfo\r\n            \r\n            if ((shape === \"文本\" || shape === \"编码\") && type === \"文本\") {\r\n                objKey =  `inputName_${i}`\r\n                obj[objKey] = await this.handleInput(itemObj)\r\n            } else if (shape === \"多行文本\") {\r\n                objKey =  `textarea_${i}`\r\n                obj[objKey] = await this.handleTextarea(name)\r\n            } else if ((shape + type).indexOf(\"数值\") > -1) {\r\n                objKey = `inputNumber_${i}`\r\n                obj[objKey] = await this.handleNumberInput(name)\r\n            } else if (shape === \"日期\") {\r\n                objKey = `date_${i}`\r\n                obj[objKey] = await this.handleDatePicker(name)\r\n            } else if (shape === \"日期时间\" || shape === \"时间\") {\r\n                objKey = `dateTime_${i}`\r\n                obj[objKey] = await this.handleDateTime(name)\r\n            } else if (shape === \"选择器\") {\r\n                if (ConfigInfo.indexOf('.') > -1) {\r\n                    objKey = `selectTreeNode_${i}_${ConfigInfo}`\r\n                    obj[objKey] = await this.hanldeSelectTreeNode(name)\r\n                } else {\r\n                    objKey = `selectName_${i}`\r\n                    obj[objKey] = await this.hanldeSelect(name)\r\n                }\r\n            } else if (shape === \"日期年份\") {\r\n                objKey = `selectYear_${i}`\r\n                obj[objKey] = await this.hanldeYearSelect(name)\r\n            } else if (shape === \"本人姓名\") {\r\n                objKey = `mySelfName_${i}`\r\n                obj[objKey] = await this.handleMySelfName(name)\r\n            } else if (shape === \"本人部门\") {\r\n                objKey = `mySelfDe_${i}`\r\n                obj[objKey] = await this.handleMySelfDepart(name)\r\n            } else if (shape === \"人员选择器\") {\r\n                objKey = `staffSelect_${i}`\r\n                obj[objKey] = await this.handleStaffSelect(name)\r\n            } else if (shape === \"附件\" || shape===\"可预览附件\") {\r\n                objKey = `file_${i}`\r\n                obj[objKey] = await this.handleFileUploadWidget(name)\r\n            } else if (shape === \"值选择器\") {\r\n                objKey = `selecValtName_${i}`\r\n                obj[objKey] = await this.hanldeValueSelect(itemObj)\r\n            } else if (shape === \"搜索选择器\") {\r\n                objKey = `selectSearchName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await this.hanldeSearchSelect(itemObj)\r\n            } else if (shape === \"台账选择器\") {\r\n                objKey = `accountName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await this.handleTableAccount(itemObj)\r\n            } else if (shape === \"可编辑值选择器\") {\r\n                objKey = `editble_${i}`\r\n                obj[objKey] = await this.handleEditBle(itemObj)\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n    // 处理校验规则\r\n    handlePattern=(ValidateRule)=>{\r\n        let obj = {}\r\n        // 如果不存在校验规则，直接返回\r\n        if (!ValidateRule) {\r\n            return\r\n        }\r\n        // 如果只有一条校验规则\r\n        if (ValidateRule.indexOf(',') < 0) {\r\n            if (ValidateRule.indexOf(':') > -1) {\r\n                let maxLengthArr = ValidateRule.split(':')\r\n                if (maxLengthArr[0] === 'maxlength') {\r\n                    obj.minLength = null\r\n                    obj.maxLength = parseInt(maxLengthArr[1])\r\n                }\r\n            } else if (ValidateRule.indexOf(':') < 0) {\r\n                if (ValidateRule === 'required') {\r\n                    obj.required = true\r\n                }\r\n            }\r\n        } else {\r\n            let arr = ValidateRule.split(',')\r\n            arr.forEach((item)=>{\r\n                if (item.indexOf(':') > -1) {\r\n                    let maxLengthArr = item.split(':')\r\n                    if (maxLengthArr[0] === 'maxlength') {\r\n                        obj.minLength = null\r\n                        obj.maxLength = parseInt(maxLengthArr[1])\r\n                    }\r\n                } else {\r\n                    if (item === \"required\") {\r\n                        obj.required = true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return obj\r\n    }\r\n    // 文本输入框\r\n    handleInput=(dataObj)=>{\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: 'string',\r\n            default: dataObj.PresetValue,\r\n            minLength: this.handlePattern(dataObj.ValidateRule).minLength,\r\n            maxLength: this.handlePattern(dataObj.ValidateRule).maxLength,\r\n            pattern: this.handlePattern(dataObj.ValidateRule).required ?  `^.{1,100}$` : \"\",\r\n            message:{\r\n                pattern: '此项必填'\r\n            }\r\n        }\r\n    }\r\n    // 多行文本 \r\n    handleTextarea=(title)=>{\r\n        return {\r\n            title,\r\n            type: 'string',\r\n            format: \"textarea\",\r\n            \"ui:width\": \"300%\"\r\n        }\r\n    }\r\n    // 数字输入框\r\n    handleNumberInput=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            pattern: \"^[0-9].*$\",\r\n            message: {\r\n                pattern: \"请输入数字\"\r\n            }\r\n        }\r\n    }\r\n    // 日期\r\n    handleDatePicker=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            format: \"date\",\r\n            \"ui:options\": {\r\n              format: \"YY/MM/DD\"\r\n            }\r\n        }\r\n    }\r\n    // 日期时间\r\n    handleDateTime=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            format: \"dateTime\",\r\n        }\r\n    }\r\n    // 日期年份\r\n    hanldeYearSelect=(title)=>{\r\n        let date = new Date()\r\n        const curYear = date.getFullYear()\r\n        const startYear = curYear - 10\r\n        let enumVals = []\r\n        let enumNames = []\r\n        for(let i = curYear ; i > startYear ; i--) {\r\n            enumNames.push(i)\r\n            enumVals.push(i)\r\n        }\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            enum: enumVals,\r\n            enumNames: enumNames,\r\n            default: curYear\r\n        }\r\n    }\r\n    // 值选择器\r\n    hanldeValueSelect=(dataObj)=>{\r\n        console.log(dataObj)\r\n        if (!dataObj.ConfigInfo) {\r\n            return\r\n        }\r\n        let myOptions = dataObj.ConfigInfo.split(',')\r\n        return {\r\n            title: dataObj.Alias,\r\n            type: \"string\",\r\n            enum: myOptions,\r\n            enumNames: myOptions,\r\n            default: dataObj.PresetValue\r\n        }\r\n    }\r\n    // 搜索选择器\r\n    hanldeSearchSelect=(dataObj)=>{\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"search\",\r\n        }\r\n    }\r\n    handleEditBle=(dataObj)=>{\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"editSearch\",\r\n            \"ui:options\": {\r\n                value: dataObj.ConfigInfo\r\n            }\r\n        }\r\n    }\r\n    // 本人姓名\r\n    handleMySelfName=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 本人部门\r\n    handleMySelfDepart=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 人员选择器\r\n    handleStaffSelect=(title)=>{\r\n        return {\r\n            title,\r\n            \"ui:widget\": \"staff\",\r\n        }\r\n    }\r\n    // 附件上传\r\n    handleFileUploadWidget=(title)=>{\r\n        return {\r\n            title,\r\n            \"ui:widget\": \"file\",\r\n        }\r\n    }\r\n    // 台账选择器\r\n    handleTableAccount=(dataObj)=>{\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"table\",\r\n        }\r\n    }\r\n    // 处理每个分组\r\n    handleGroup= async(dataArr)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i = 0; i< dataArr.length; i++) {\r\n            key = `object_${i}`\r\n            let objData =await this.handleEveryGroup(dataArr[i].Schema)\r\n            console.log(objData)\r\n            obj[key] = {\r\n                type:\"object\",\r\n                title: dataArr[i].GroupName,\r\n                properties: objData,\r\n                required:[]\r\n            }\r\n        }\r\n        this.setState({\r\n            schema:{\r\n                schema:{\r\n                    type: 'object',\r\n                    properties: obj,\r\n                    required:[]\r\n                },\r\n                displayType: \"row\",\r\n                showDescIcon: false,\r\n                column: 3,\r\n                labelWidth: 120\r\n            }\r\n        })\r\n    }\r\n    setFormData=(val)=>{\r\n    }\r\n    handleClickReback=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    render() {\r\n        const {formData} = this.state\r\n        return (\r\n            <div className=\"transform-wrapper\">\r\n                <FormRender\r\n                    ref={this.formRef}\r\n                    {...formData}\r\n                    {...this.state.schema}\r\n                    onChange={this.setFormData}\r\n                    widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\r\n                />\r\n                <div className=\"gobackBtn\">\r\n                    <Button type=\"primary\" onClick={this.handleClickReback}>\r\n                        返回列表\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx",["143","144","145","146","147","148","149","150","151","152","153","154"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport configData from '../../utils/config'\r\nimport { Button, message, Modal, Radio, Input, Table, Space} from 'antd';\r\nimport { getTableName, getSelectName, GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo, getUserName, UpdateTaskInfo, TaskGoBack, WorkflowUrging, GetFlowProcessInfo, WorkflowFileOperation, uploadToService} from '../../apis/process'\r\nimport './NeedToDeal.less'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\nconst { Search } = Input;\r\nconst { Column } = Table;\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [valid, setValid] = useState([])\r\n    const [FormKey, setFormKey] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [rebackVisible, setRebackVisible] = useState(false)\r\n    const [urgentVisible, setUrgentVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [userNameArr, setUserNameArr] = useState([])\r\n    const [userName, setUserName] = useState('')\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const [tableData, setTableData] = useState([])\r\n    const [fileTableData, setFileTableData] = useState([])\r\n    const [flowVisible, setFlowVisible] = useState(false)\r\n    const [fileVisible, setFileVisible] = useState(false)\r\n    const [uploadVisible, setUploadVisible] = useState(false)\r\n    const [upFileName, setUpFileName] = useState([])\r\n    const [column, setColumn] = useState(3)\r\n\r\n    const formRef = useRef();\r\n    const backRef = useRef();\r\n    const urgentRef = useRef();\r\n    const onValidate=(valid)=>{\r\n        setValid(valid)\r\n    }\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"taskId\") > -1) {\r\n                taskIdScope = decodeURI(item.split(\"=\")[1])\r\n                setTaskId(taskIdScope)\r\n                window.taskId = taskIdScope\r\n            } else if (item.indexOf(\"formId\") > -1) {\r\n                setFormId(decodeURI(item.split(\"=\")[1]))\r\n            }\r\n        })\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                if(fieldData.Type === \"台账\") {\r\n                    const tableName = fieldData.Config\r\n                    getTableName(tableName)\r\n                    .then((response)=>{\r\n                        const dataArr = response.data.getMe[0].Groups\r\n                        handleGroup(dataArr)\r\n                    })\r\n                } else {\r\n                    let schemaConfig =  JSON.parse(fieldData.Config)\r\n                    let fieldConfig = schemaConfig.schema.properties\r\n                    let formValObj = {}\r\n                    if (fieldData.formId) {\r\n                        formValObj = JSON.parse(fieldData.formId).values\r\n                        for(let skey in fieldConfig){\r\n                            for(let val in formValObj) {\r\n                                if (skey === val) {\r\n                                    fieldConfig[skey].default = formValObj[val]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    schemaConfig.schema.properties = fieldConfig\r\n                    setSchema(schemaConfig)\r\n                }\r\n                \r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    // 处理请求参数\r\n    const hanldeRouterParams =()=>{\r\n        // 处理Cookie\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                setCookie(itemArr[1])\r\n            }\r\n        })\r\n\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        console.log(search)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"processInstanceId\") > -1) {\r\n                console.log(item)\r\n                setProcessDefinitionId(item.split(\"=\")[1])\r\n            } else if (item.indexOf(\"userId\") > -1) {\r\n                setUserId(item.split(\"=\")[1])\r\n            } else if (item.indexOf(\"loginName\") > -1) {\r\n                setUserName(decodeURI(item.split(\"=\")[1]))\r\n            } else if (item.indexOf(\"FormKey\") > -1) {\r\n                setFormKey(decodeURI(item.split(\"=\")[1]))\r\n            }\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    const getTransferName =(value)=>{\r\n        getUserName(value)\r\n        .then((res)=>{\r\n            setUserNameArr(res.data.getMe)\r\n        })\r\n    }\r\n    // 保存\r\n    const saveTask=()=>{\r\n        if (valid.length > 0) {\r\n            message.error(\"提交失败,请按照提示填写表单\")\r\n            return\r\n        }\r\n        const myData = {\r\n            formId:JSON.stringify({\r\n                formId,\r\n                values: formData\r\n            }),\r\n            Config: JSON.stringify(schema),\r\n            FormKey: FormKey\r\n        }\r\n        TaskSave(cookie, taskId, userId, myData)\r\n        .then((res)=>{\r\n            message.success('保存成功');\r\n        })\r\n    }\r\n    // 完成\r\n    const completeTask=()=>{\r\n        if (valid.length > 0) {\r\n            message.error(\"提交失败,请按照提示填写表单\")\r\n            return\r\n        }\r\n        const myData = {\r\n            formId:JSON.stringify({\r\n                formId,\r\n                values: formData\r\n            }),\r\n            Config: JSON.stringify(schema),\r\n            FormKey: FormKey\r\n        }\r\n        SaveFormInfo(cookie, taskId, userId, myData)\r\n        .then((res)=>{\r\n            message.success('提交成功');\r\n        })\r\n    }\r\n    // 移交\r\n    const transferTo=()=>{\r\n        getTransferName(\"\")\r\n        setVisible(true)\r\n    }\r\n    // 回退按钮\r\n    const goBack =()=>{\r\n        setRebackVisible(true)\r\n    }\r\n    // 取消回退\r\n    const closeRebackModeler=()=>{\r\n        setRebackVisible(false)\r\n    }\r\n    // 确定回退\r\n    const sureRebackModeler=()=>{\r\n        const textVal = backRef.current.state.value\r\n        TaskGoBack(processDefinitionId,taskId,textVal)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"回退成功！\")\r\n                setRebackVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    //催办\r\n    const urgentTask=()=>{\r\n        setUrgentVisible(true)\r\n    }\r\n    // 取消催办\r\n    const closeUrgentModeler=()=>{\r\n        setUrgentVisible(false)\r\n    }\r\n    // 确定催办\r\n    const sureUrgentModeler=()=>{\r\n        const textVal = urgentRef.current.state.value\r\n        WorkflowUrging(processDefinitionId, userName, textVal)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"催办成功！\")\r\n                setUrgentVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    // 处理单个文件数据\r\n    const handleFileInfo=(pathname)=>{\r\n        var filename = ''\r\n        var pathnameArr = []\r\n        if (!pathname){\r\n            return\r\n        }\r\n        pathnameArr = pathname.split('/')\r\n        filename = pathnameArr[pathnameArr.length - 1]\r\n        return filename\r\n    }\r\n    // 附件\r\n    const uploadFile = ()=> {\r\n        WorkflowFileOperation(taskId)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                let arr = []\r\n                if (res.data.info !== \"\") {\r\n                    if (res.data.info.indexOf(',') > -1) {\r\n                        var infoArr = res.data.info.split(\",\")\r\n                        infoArr.forEach(item=>{\r\n                            arr.push({\r\n                                path: document.referrer + 'CityTemp/熊猫智慧水务平台' + item,\r\n                                name: handleFileInfo(item),\r\n                                state: \"上传成功\"\r\n                            })\r\n                        })\r\n                    } else {\r\n                        arr.push({\r\n                            path:  document.referrer + 'CityTemp/熊猫智慧水务平台' + res.data.info,\r\n                            name: handleFileInfo(res.data.info),\r\n                            state: \"上传成功\"\r\n                        })\r\n                    }\r\n                    console.log(arr)\r\n                    setFileTableData(arr)\r\n                }\r\n                setFileVisible(true)\r\n            }\r\n        })\r\n    }\r\n    // 打开上传附件窗口\r\n    const openUploadVisible=()=>{\r\n        setFileVisible(false)\r\n        setUploadVisible(true)\r\n    }\r\n    // 关闭附件上传窗口\r\n    const closeUploadVisible=()=>{\r\n        setUploadVisible(false)\r\n    }\r\n    // 确定上传附件\r\n    const sureUploadVisible=()=>{\r\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ taskId +'/' + upFileName.name;\r\n        var formData = new FormData();\r\n        formData.append(\"filedata\", upFileName);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"POST\", encodeURI(_url));\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    try {\r\n                        var data = JSON.parse(request.responseText);\r\n                        if (data && data.success) {\r\n                            message.success(\"数据上传成功\");\r\n                            fileuploadToService('workflow', taskId ,upFileName.name)\r\n                        } else {\r\n                            message.error(\"上传失败\")\r\n                        }\r\n                    } catch (e) {\r\n                        message.error(\"上传失败\")\r\n                    }\r\n                } else {\r\n                    message.error(\"上传失败\")\r\n                }\r\n            }\r\n        }\r\n        request.send(formData);\r\n    }\r\n    // 上传文件至服务器\r\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\r\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\r\n        uploadToService(taskId, FilePath)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"上传成功！\")\r\n                setUploadVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    const hanldeFileUpload=(e)=>{\r\n        console.log(e.target.files[0])\r\n        setUpFileName(e.target.files[0])\r\n    }\r\n    const closeFileVisible=()=>{\r\n        setFileVisible(false)\r\n    }\r\n    // 流转信息\r\n    const showTransFlow=()=>{\r\n        GetFlowProcessInfo(processDefinitionId)\r\n        .then((res)=>{\r\n            setTableData(res.data.getMe)\r\n            setFlowVisible(true)\r\n        })\r\n    }\r\n    const closeFlow=()=>{\r\n        setFlowVisible(false)\r\n    }\r\n    const sureFlow =()=>{\r\n        setFlowVisible(false)\r\n    }\r\n    const goShowHistoryForm=(taskId)=>{\r\n        return ()=>{\r\n            props.history.push({\r\n                pathname: '/hisflow',\r\n                state:{\r\n                    taskId: taskId\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 流程图\r\n    const showModeler=()=>{\r\n        const imgSrc =  document.referrer + configData.baseURL + '/GetWorkflowDiagram?processInstanceId=' + processDefinitionId + '&t=' + (new Date()).getTime()\r\n        setProcessImgSrc(imgSrc)\r\n        setModelerVisible(true)\r\n    }\r\n    const closeModeler=()=>{\r\n        setModelerVisible(false)\r\n    }\r\n    // 移交Modal\r\n    const handleOK=()=>{\r\n        if (!transValue) {\r\n            message.error(\"请检查移交人！\")\r\n            return\r\n        }\r\n        let Condition = JSON.stringify({\r\n            assignee: transValue\r\n        })\r\n        UpdateTaskInfo(Condition, taskId)\r\n        .then((res)=>{\r\n            const parseData = JSON.parse(res.data)\r\n            if (parseData.assignee === transValue) {\r\n                message.success(\"移交成功\")\r\n                setVisible(false)\r\n            } else {\r\n                message.error(\"移交失败，请检查移交人！\")\r\n            }\r\n        })\r\n    }\r\n    const handleCancel=()=>{\r\n        setVisible(false)\r\n    }\r\n    const handleSetTrans=(e)=>{\r\n        setTransValue(e.target.value)\r\n    }\r\n    \r\n    const asyncFunc = async(name) =>{\r\n        let result = await getSelectName(name)\r\n        return result.data\r\n    }\r\n\r\n    const hanldeSelect = async(name)=> {\r\n        let obj = {}\r\n        let data = await asyncFunc(name);\r\n        let enumVals = []\r\n        let enumNames = []\r\n        data.forEach((item)=>{\r\n            enumVals.push(item.NODEVALUE)\r\n            enumNames.push(item.NODENAME)\r\n        })\r\n        obj = {\r\n            title: name,\r\n            type: 'string',\r\n            enum: enumVals,\r\n            enumNames: enumNames\r\n        }\r\n        return obj\r\n    }\r\n\r\n    // 多级联动\r\n    const hanldeSelectTreeNode=async(name)=>{\r\n        return {\r\n            title: name,\r\n            \"ui:widget\": \"cascader\"\r\n        }\r\n    }\r\n\r\n    const handleGroup= async(dataArr)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i = 0; i< dataArr.length; i++) {\r\n            key = `object_${i}`\r\n            let objData =await handleEveryGroup(dataArr[i].Schema)\r\n            obj[key] = {\r\n                type:\"object\",\r\n                title: dataArr[i].GroupName,\r\n                properties: objData,\r\n                required: judgeRequired(objData)\r\n            }\r\n            \r\n        }\r\n        setSchema({\r\n            schema:{\r\n                type: 'object',\r\n                properties: obj\r\n            },\r\n            displayType: \"row\",\r\n            showDescIcon: false,\r\n            column: column,\r\n            labelWidth: 120\r\n        })\r\n    }\r\n\r\n    const handleEveryGroup= async(schemaList)=>{\r\n        let obj = {}\r\n        let objKey = \"\"\r\n        for(let i=0;i<schemaList.length;i++) {\r\n            if (!schemaList[i].Visible){\r\n                return\r\n            }\r\n            const shape = schemaList[i].Shape\r\n            const type = schemaList[i].Type\r\n            const name = schemaList[i].FieldName\r\n            const itemObj = schemaList[i]\r\n            const ConfigInfo = schemaList[i].ConfigInfo\r\n            \r\n            if ((shape === \"文本\" || shape === \"编码\") && type === \"文本\") {\r\n                objKey =  `inputName_${i}`\r\n                obj[objKey] = await handleInput(itemObj)\r\n            } else if (shape === \"多行文本\") {\r\n                objKey =  `textarea_${i}`\r\n                obj[objKey] = await handleTextarea(itemObj)\r\n            } else if ((shape + type).indexOf(\"数值\") > -1) {\r\n                objKey = `inputNumber_${i}`\r\n                obj[objKey] = await handleNumberInput(itemObj)\r\n            } else if (shape === \"日期\") {\r\n                objKey = `date_${i}`\r\n                obj[objKey] = await handleDatePicker(itemObj)\r\n            } else if (shape === \"日期时间\" || shape === \"时间\") {\r\n                objKey = `dateTime_${i}`\r\n                obj[objKey] = await handleDateTime(itemObj)\r\n            } else if (shape === \"选择器\") {\r\n                if (ConfigInfo.indexOf('.') > -1) {\r\n                    objKey = `selectTreeNode_${i}_${ConfigInfo}`\r\n                    obj[objKey] = await hanldeSelectTreeNode(name)\r\n                } else {\r\n                    objKey = `selectName_${i}`\r\n                    obj[objKey] = await hanldeSelect(name)\r\n                }\r\n            } else if (shape === \"日期年份\") {\r\n                objKey = `selectYear_${i}`\r\n                obj[objKey] = await hanldeYearSelect(itemObj)\r\n            } else if (shape === \"本人姓名\") {\r\n                objKey = `mySelfName_${i}`\r\n                obj[objKey] = await handleMySelfName(name)\r\n            } else if (shape === \"本人部门\") {\r\n                objKey = `mySelfDe_${i}`\r\n                obj[objKey] = await handleMySelfDepart(name)\r\n            } else if (shape === \"人员选择器\") {\r\n                objKey = `staffSelect_${i}`\r\n                obj[objKey] = await handleStaffSelect(itemObj)\r\n            } else if (shape === \"附件\" || shape===\"可预览附件\") {\r\n                objKey = `fileUpload_${i}`\r\n                obj[objKey] = await handleFileUploadWidget(name)\r\n            } else if (shape === \"值选择器\") {\r\n                objKey = `selecValtName_${i}`\r\n                obj[objKey] = await hanldeValueSelect(itemObj)\r\n            } else if (shape === \"搜索选择器\") {\r\n                objKey = `selectSearchName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await hanldeSearchSelect(itemObj)\r\n            } else if (shape === \"台账选择器\") {\r\n                objKey = `accountName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await handleTableAccount(itemObj)\r\n            } else if (shape === \"可编辑值选择器\") {\r\n                objKey = `editble_${i}`\r\n                obj[objKey] = await handleEditBle(itemObj)\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n\r\n    // 处理校验规则\r\n    const handlePattern=(ValidateRule)=>{\r\n        let obj = {}\r\n        // 如果不存在校验规则，直接返回\r\n        if (!ValidateRule) {\r\n            obj.required = false\r\n            return obj\r\n        }\r\n        // 如果只有一条校验规则\r\n        if (ValidateRule.indexOf(',') < 0) {\r\n            if (ValidateRule.indexOf(':') > -1) {\r\n                let maxLengthArr = ValidateRule.split(':')\r\n                if (maxLengthArr[0] === 'maxlength') {\r\n                    obj.minLength = 0\r\n                    obj.maxLength = parseInt(maxLengthArr[1])\r\n                }\r\n            } else if (ValidateRule.indexOf(':') < 0) {\r\n                if (ValidateRule === 'required') {\r\n                    obj.required = true\r\n                } else {\r\n                    obj.required = false\r\n                }\r\n            }\r\n        } else {\r\n            let arr = ValidateRule.split(',')\r\n            arr.forEach((item)=>{\r\n                if (item.indexOf(':') > -1) {\r\n                    let maxLengthArr = item.split(':')\r\n                    if (maxLengthArr[0] === 'maxlength') {\r\n                        obj.minLength = 0\r\n                        obj.maxLength = parseInt(maxLengthArr[1])\r\n                    }\r\n                } else {\r\n                    if (item === \"required\") {\r\n                        obj.required = true\r\n                    } else {\r\n                        obj.required = false\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return obj\r\n    }\r\n\r\n    // 文本输入框\r\n    const handleInput=(dataObj)=>{\r\n        const { minLength, maxLength, required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: 'string',\r\n            default: dataObj.PresetValue,\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ?  `^.{${minLength},${maxLength}}$` : \"\",\r\n            message:{\r\n                pattern: required ? '此项必填': \"\"\r\n            }\r\n        }\r\n    }\r\n    // 多行文本 \r\n    const handleTextarea=(dataObj)=>{\r\n        const { minLength, maxLength, required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: 'string',\r\n            format: \"textarea\",\r\n            \"ui:width\": `${column}00%`,\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ?  `^.{${minLength},${maxLength}}$` : \"\",\r\n            message:{\r\n                pattern: required ? '此项必填': \"\"\r\n            }\r\n        }\r\n    }\r\n    // 数字输入框\r\n    const handleNumberInput=(dataObj)=>{\r\n        const { minLength, maxLength, required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ? \"^(\\-|\\+)?\\d+(\\.\\d+)?$\" : \"\",\r\n            message: {\r\n                pattern: \"请输入数字\"\r\n            }\r\n        }\r\n    }\r\n    // 日期\r\n    const handleDatePicker=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            format: \"date\",\r\n            \"ui:options\": {\r\n                format: \"YY/MM/DD\"\r\n            },\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择日期\"\r\n            }\r\n        }\r\n    }\r\n    // 日期时间\r\n    const handleDateTime=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            format: \"dateTime\",\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择日期时间\"\r\n            }\r\n        }\r\n    }\r\n    // 日期年份\r\n    const hanldeYearSelect=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        let date = new Date()\r\n        const curYear = date.getFullYear()\r\n        const startYear = curYear - 10\r\n        let enumVals = []\r\n        let enumNames = []\r\n        for(let i = curYear ; i > startYear ; i--) {\r\n            enumNames.push(i)\r\n            enumVals.push(i)\r\n        }\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            enum: enumVals,\r\n            enumNames: enumNames,\r\n            default: curYear,\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择年份\"\r\n            }\r\n        }\r\n    }\r\n    // 值选择器\r\n    const hanldeValueSelect=(dataObj)=>{\r\n        if (!dataObj.ConfigInfo) {\r\n            return\r\n        }\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        let myOptions = dataObj.ConfigInfo.split(',')\r\n        return {\r\n            title: dataObj.Alias,\r\n            type: \"string\",\r\n            enum: myOptions,\r\n            enumNames: myOptions,\r\n            default: dataObj.PresetValue,\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 搜索选择器\r\n    const hanldeSearchSelect=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"search\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 可编辑值选择器\r\n    const handleEditBle=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"editSearch\",\r\n            \"ui:options\": {\r\n                value: dataObj.ConfigInfo\r\n            },\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 本人姓名\r\n    const handleMySelfName=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 本人部门\r\n    const handleMySelfDepart=(title)=>{\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 人员选择器\r\n    const handleStaffSelect=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"staff\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 附件上传\r\n    const handleFileUploadWidget=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"file\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 台账选择器\r\n    const handleTableAccount=(dataObj)=>{\r\n        const { required } = handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"table\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 判断是否是必填字段\r\n    const judgeRequired=(objData)=>{\r\n        let requireList = []\r\n        for(let ckey in objData) {\r\n            if (objData[ckey].pattern && objData[ckey].pattern !== \"\") {\r\n                requireList.push(ckey)\r\n            }\r\n        }\r\n        return requireList\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldeRouterParams()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={saveTask}>保存</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={completeTask}>完成</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={transferTo}>移交</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={goBack}>回退</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={urgentTask}>催办</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"任务移交\" visible={visible} onOk={handleOK} onCancel={handleCancel}\r\n                bodyStyle={{height:'500px',overflowY:'auto'}}>\r\n                <div>\r\n                    <Search\r\n                        placeholder=\"请输入姓名\"\r\n                        allowClear\r\n                        enterButton=\"搜索\"\r\n                        size=\"large\"\r\n                        onSearch={getTransferName}\r\n                    />\r\n                </div>\r\n                <Radio.Group name=\"radiogroup\" value={transValue} onChange={handleSetTrans}>\r\n                    <div style={{display: 'flex',flexDirection: 'column'}}>\r\n                        {\r\n                            userNameArr.map((item,index)=>{\r\n                                return(\r\n                                    <Radio value={item.JobNum} key={index}>\r\n                                        <div style={{display:\"flex\", height:'36px',lineHeight:\"36px\"}}>\r\n                                            <p style={{width:'120px'}}>{item.DepName}</p>\r\n                                            <p>{item.Name}</p>\r\n                                        </div>\r\n                                    </Radio>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Radio.Group>\r\n            </Modal>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onCancel={closeModeler} onOk={closeModeler} width={800}\r\n                bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal>\r\n\r\n            <Modal title=\"回退\" visible={rebackVisible} onCancel={closeRebackModeler} onOk={sureRebackModeler}\r\n                bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <Input type=\"text\" ref={backRef}></Input>   \r\n            </Modal>\r\n\r\n            <Modal title=\"催办\" visible={urgentVisible} onCancel={closeUrgentModeler} onOk={sureUrgentModeler}\r\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <Input type=\"text\" ref={urgentRef}></Input>   \r\n            </Modal>\r\n\r\n            <Modal title=\"流转信息\" visible={flowVisible} onCancel={closeFlow} onOk={sureFlow} width={900}\r\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <Table dataSource={tableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\r\n                    <Column title=\"操作步骤\" dataIndex=\"TaskName\" key=\"TaskName\" />\r\n                    <Column title=\"开始时间\" dataIndex=\"STime\" key=\"STime\" />\r\n                    <Column title=\"结束时间\" dataIndex=\"ETime\" key=\"ETime\" />\r\n                    <Column title=\"操作人账号\" dataIndex=\"OperationMan\" key=\"OperationMan\" />\r\n                    <Column\r\n                        title=\"流程状态\"\r\n                        key=\"state\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.DeleteReason !== \"\" ?\r\n                                    <span>回退</span>\r\n                                    :\r\n                                    <span>已完成</span>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.DeleteReason !== \"\" ?\r\n                                    <div>\r\n                                        {record.GoBackReason}\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={goShowHistoryForm(record.TaskID)}>查看</Button>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n            </Modal>\r\n\r\n            <Modal title=\"附件\" visible={fileVisible} onCancel={closeFileVisible} okText=\"上传附件\" onOk={openUploadVisible} width={680}\r\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <Table dataSource={fileTableData} pagination={false} rowClassName=\"rowClassName\" style={{width:'100%'}}>\r\n                    <Column title=\"文件名\" dataIndex=\"name\" key=\"name\" />\r\n                    <Column title=\"状态\" dataIndex=\"state\" key=\"state\" />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    <div>\r\n                                        <a href={record.path} download={upFileName.name} style={{marginRight:'10px'}}>下载</a>\r\n                                        <a href={record.path} target=\"_blank\">预览</a>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n            </Modal>\r\n\r\n            <Modal title=\"上传附件\" visible={uploadVisible} onCancel={closeUploadVisible} onOk={sureUploadVisible}\r\n            bodyStyle={{ display: 'flex',justifyContent: 'center',alignItems:'center'}}>\r\n                <Input type=\"file\" onChange={hanldeFileUpload}></Input>\r\n            </Modal>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                onValidate={onValidate}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx",["155"],"import React, { useState } from \"react\";\r\nimport FormRender from \"form-render/lib/antd\";\r\nimport SCHEMA from \"./schema.json\";\r\nimport Cascade from \"./Cascader/Cascader\";\r\nimport Calendar from './Sequelize/Sequelize'\r\nclass Demo extends React.Component {\r\n    state = {\r\n        formData: {},\r\n        valid: []\r\n    }\r\n\r\n    submit = () => {\r\n        if (this.state.valid.length > 0) {\r\n            alert(\"没有通过校验\");\r\n        } else {\r\n            alert(JSON.stringify(this.state.formData, null, 4));\r\n        }\r\n    };\r\n\r\n    onValidate = valid => {\r\n        console.log(valid);\r\n    }\r\n    listenChange=(params)=>{\r\n        console.log(params)\r\n    }\r\n    render(){\r\n        return (\r\n            <div style={{ padding: 60 }}>\r\n                <FormRender\r\n                    {...SCHEMA}\r\n                    formData={this.state.formData}\r\n                    onChange={this.listenChange}\r\n                    onValidate={this.onValidate}\r\n                    widgets={{ cascade: Cascade,calendar: Calendar }}\r\n                />\r\n                <button onClick={this.submit}>提交</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Demo\r\n","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx",["156","157","158"],"E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx",["159","160"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson, UpdateFormDef } from '../../apis/process'\r\nimport {Modal, Form, Input, Button, message} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass EditForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '确定修改',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                type: 'primary',\r\n                onClick: () => this.goBackToHome()\r\n            }\r\n        ]\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData =()=>{\r\n        const id = this.props.location.state.id\r\n        GetFormJson(id)\r\n          .then((res)=>{\r\n              if (res.status === 200) {\r\n                  this.setState({\r\n                    defaultValue: JSON.parse(res.data)\r\n                  })\r\n              }\r\n          })\r\n    }\r\n    handleScheam = ()=>{\r\n      this.handleOk()\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    goBackToHome=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    hanldeDeepObject = (properties) => {\r\n        let BaseTypeList = []\r\n        for(let key in properties) {\r\n            if (properties[key].hasOwnProperty('properties')) {\r\n                for(let childkey in properties[key].properties) {\r\n                    BaseTypeList.push({\r\n                        Name:properties[key].properties[childkey].title,\r\n                        Type: properties[key].properties[childkey].type\r\n                    })\r\n                }\r\n            } else {\r\n                BaseTypeList.push({\r\n                    Name:properties[key].title,\r\n                    Type: properties[key].type\r\n                })\r\n            }\r\n        }\r\n        const names = BaseTypeList.map((items)=> items.Name)\r\n        console.log(names)\r\n        const nameSet = new Set(names);\r\n        if (names.length === nameSet.size) {\r\n            return BaseTypeList\r\n        } else {\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        let {properties} = FormInfo.schema\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.props.location.state.desc,\r\n            key: this.props.location.state.key,\r\n            modelType:2,\r\n            name: this.props.location.state.name,\r\n            BaseTypeList: this.hanldeDeepObject(properties)\r\n        }\r\n        if(!params.BaseTypeList){\r\n            message.error(\"您提交的表单组件不可有重名，请检查！\")\r\n            return false\r\n        }\r\n        UpdateFormDef(this.props.location.state.id,params)\r\n        .then(res=>{\r\n            alert(\"修改成功\")\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={this.state.defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditForm;\r\n","E:\\react-flowable\\src\\apis\\process.js",["161"],"import request from '../utils/request'\r\n\r\n// 流程列表\r\nexport function GetWorkflowBaseInfo (WorkflowName, userName, STime, ETime, pageIndex, pageSize) {\r\n    return request({\r\n        url: '/GetWorkflowBaseInfo?WorkflowName=' + WorkflowName +`&UserName=${userName}` + `&STime=` + STime + `&ETime=` + ETime + `&pageIndex=` + pageIndex + `&pageSize=` + pageSize + `&sortFields=created&direction=desc`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 删除流程\r\nexport function UpdateStatus (id, type) {\r\n    return request({\r\n        url: `/UpdateStatus?id=${id}&type${type}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 登录\r\nexport function flowableLogin (data) {\r\n    return request({\r\n        url: `/Flowable_Login`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 新增流程\r\nexport function CreateModel (cookie, data) {\r\n    return request({\r\n        url: `/CreateModel?Cookie=${cookie}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 查询表单列表\r\nexport function GetFormListInfo (FormName, pageIndex, pageSize) {\r\n    return request({\r\n        url: `/GetFormListInfo?FormName=${FormName}&pageIndex=${pageIndex}&pageSize=${pageSize}&sortFields=created&direction=desc`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 查询表单列表\r\nexport function GetFormJson (id) {\r\n    return request({\r\n        url: `/GetFormJson?FormID=${id}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 删除表单\r\nexport function DeleteFormLogic (name, id) {\r\n    return request({\r\n        url: `/DeleteFormLogic?UserName=${name}&FormID=${id}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 编辑表单\r\nexport function UpdateFormDef (id, data) {\r\n    return request({\r\n        url: `/UpdateFormDef?FormID=${id}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 任务发起\r\nexport function WorkflowStart (cookie, userId, data) {\r\n    return request({\r\n        url: `/WorkflowStart?Cookie=${cookie}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 查询表单\r\nexport function GetStartForm (FlowDefID) {\r\n    return request({\r\n        url: `/GetStartForm?FlowDefID=${FlowDefID}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 查询在办表单\r\nexport function GetFormList (Cookie, taskId) {\r\n    return request({\r\n        url: `/GetFormList?Cookie=${Cookie}&TaskID=${taskId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-完成\r\nexport function SaveFormInfo (Cookie, taskId, userId, data) {\r\n    return request({\r\n        url: `/SaveFormInfo?Cookie=${Cookie}&TaskID=${taskId}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 在办-保存\r\nexport function TaskSave (Cookie, taskId, userId, data) {\r\n    return request({\r\n        url: `/TaskSave?Cookie=${Cookie}&TaskID=${taskId}&UserID=${userId}`,\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 在办-查询任务详情\r\nexport function GetTaskBaseInfo (taskId) {\r\n    return request({\r\n        url: `/GetTaskBaseInfo?TaskID=${taskId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务移交\r\nexport function UpdateTaskInfo (CONDITION,TASKID) {\r\n    return request({\r\n        url: `/UpdateTaskInfo?Condition=${CONDITION}&TaskID=${TASKID}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务回退\r\nexport function TaskGoBack (processInstanceId,TASKID, textVal) {\r\n    return request({\r\n        url: `/TaskGoBack?PROC_INST_ID_=${processInstanceId}&TaskID=${TASKID}&Comment=${textVal}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务催办\r\nexport function WorkflowUrging (processInstanceId, UserName, textVal) {\r\n    return request({\r\n        url: `/TaskGoBack?ProcInstID=${processInstanceId}&UserName=${UserName}&Content=${textVal}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-任务流转信息\r\nexport function GetFlowProcessInfo (processInstanceId) {\r\n    return request({\r\n        url: `/GetFlowProcessInfo?PROC_INST_ID_=${processInstanceId}`,\r\n        method: 'get'\r\n    })\r\n}\r\n// 在办-附件\r\nexport function WorkflowFileOperation (TaskID) {\r\n    return request({\r\n        url: `/WorkflowFileOperation?TaskID=${TaskID}&Type=search`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 在办-附件上传到服务器\r\nexport function uploadToService (TaskID, FilePath) {\r\n    return request({\r\n        url: `/WorkflowFileOperation?TaskID=${TaskID}&Type=add&FilePath=${FilePath}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 流程发起权限配置\r\nexport function UpdateWorkFlowRight (USERNAME, FORMKEYLIST) {\r\n    return request({\r\n        url: `/UpdateWorkFlowRight?UserName=${USERNAME}&FormKeyList=${FORMKEYLIST}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n\r\n// 新增流程  \r\nexport function getAssetsList(){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/CountyProduct.svc/AccountManage/GetTableGroupMetaV3?tableName=资产管理_资产明细表&columnName=设备状态`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账查询\r\nexport function getTableName(name){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/CountyProduct.svc/AccountManage/GetTableGroupMetaV3?tableName=${name}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 选择器选项的值查询\r\nexport function getSelectName(nodeName){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_WorkFlow/REST/WorkFlowREST.svc/WorkFlow/175/?nodeName=${nodeName}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 姓名查询\r\nexport function getUserName(name){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/rest/services/OA.svc/GetAllPerson_PandaWisdom?UserName=${name}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 人员选择器查询\r\nexport function getUserListForRole(){\r\n    return request({\r\n        url: `http://localhost:8089/Cityinterface/rest/services/CountyProduct.svc/AccountManage/getUserListForRole?_version=9999`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账的表查询\r\nexport function GetAccountConfigInfo(accountName){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_CaseManage/REST/CaseManageREST.svc/GetAccountConfigInfo?accountName=${accountName}`,\r\n        method: 'get'\r\n    })\r\n}\r\n\r\n// 台账的表查询\r\nexport function GetAccountPageList(pageIndex, pageSize, accountName, info){\r\n    return request({\r\n        url: `http://localhost:8089/CityInterface/Services/CityServer_CaseManage/REST/CaseManageREST.svc/GetAccountPageList?pageIndex=${pageIndex}&pageSize=${pageSize}&sortFields=录入时间&direction=desc&accountName=${accountName}&info=${info}`,\r\n        method: 'get'\r\n    })\r\n}\r\n","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx",[],"E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx",[],"E:\\react-flowable\\src\\libs\\transform\\transform.js",["162","163","164","165","166"],"import { getSelectName } from '../../apis/process'\r\nclass FormTransfer {\r\n    constructor(dataArr){\r\n        // 实例化时候传递过来的表单数据对象\r\n        this.dataArr = dataArr\r\n        this.column = 3\r\n        this.schema = {}\r\n        this.handleGroup()\r\n    }\r\n    // 处理数组数据\r\n    async handleGroup(){\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i = 0; i< this.dataArr.length; i++) {\r\n            key = `object_${i}`\r\n            let objData =await this.handleEveryGroup(this.dataArr[i].Schema)\r\n            obj[key] = {\r\n                type:\"object\",\r\n                title: this.dataArr[i].GroupName,\r\n                properties: objData,\r\n                required: this.judgeRequired(objData)\r\n            }\r\n        }\r\n        this.schema = JSON.stringify({\r\n            schema:{\r\n                type: 'object',\r\n                properties: obj\r\n            },\r\n            displayType: \"row\",\r\n            showDescIcon: false,\r\n            column: this.column,\r\n            labelWidth: 120\r\n        })\r\n    }\r\n    async handleEveryGroup(schemaList){\r\n        let obj = {}\r\n        let objKey = \"\"\r\n        for(let i=0;i<schemaList.length;i++) {\r\n            if (!schemaList[i].Visible){\r\n                return\r\n            }\r\n            const shape = schemaList[i].Shape\r\n            const type = schemaList[i].Type\r\n            const name = schemaList[i].FieldName\r\n            const itemObj = schemaList[i]\r\n            const ConfigInfo = schemaList[i].ConfigInfo\r\n            \r\n            if ((shape === \"文本\" || shape === \"编码\") && type === \"文本\") {\r\n                objKey =  `inputName_${i}`\r\n                obj[objKey] = await this.handleInput(itemObj)\r\n            } else if (shape === \"多行文本\") {\r\n                objKey =  `textarea_${i}`\r\n                obj[objKey] = await this.handleTextarea(itemObj)\r\n            } else if ((shape + type).indexOf(\"数值\") > -1) {\r\n                objKey = `inputNumber_${i}`\r\n                obj[objKey] = await this.handleNumberInput(itemObj)\r\n            } else if (shape === \"日期\") {\r\n                objKey = `date_${i}`\r\n                obj[objKey] = await this.handleDatePicker(itemObj)\r\n            } else if (shape === \"日期时间\" || shape === \"时间\") {\r\n                objKey = `dateTime_${i}`\r\n                obj[objKey] = await this.handleDateTime(itemObj)\r\n            } else if (shape === \"选择器\") {\r\n                if (ConfigInfo.indexOf('.') > -1) {\r\n                    objKey = `selectTreeNode_${i}_${ConfigInfo}`\r\n                    obj[objKey] = await this.hanldeSelectTreeNode(name)\r\n                } else {\r\n                    objKey = `selectName_${i}`\r\n                    obj[objKey] = await this.hanldeSelect(name)\r\n                }\r\n            } else if (shape === \"日期年份\") {\r\n                objKey = `selectYear_${i}`\r\n                obj[objKey] = await this.hanldeYearSelect(itemObj)\r\n            } else if (shape === \"本人姓名\") {\r\n                objKey = `mySelfName_${i}`\r\n                obj[objKey] = await this.handleMySelfName(name)\r\n            } else if (shape === \"本人部门\") {\r\n                objKey = `mySelfDe_${i}`\r\n                obj[objKey] = await this.handleMySelfDepart(name)\r\n            } else if (shape === \"人员选择器\") {\r\n                objKey = `staffSelect_${i}`\r\n                obj[objKey] = await this.handleStaffSelect(itemObj)\r\n            } else if (shape === \"附件\" || shape===\"可预览附件\") {\r\n                objKey = `fileUpload_${i}`\r\n                obj[objKey] = await this.handleFileUploadWidget(name)\r\n            } else if (shape === \"值选择器\") {\r\n                objKey = `selecValtName_${i}`\r\n                obj[objKey] = await this.hanldeValueSelect(itemObj)\r\n            } else if (shape === \"搜索选择器\") {\r\n                objKey = `selectSearchName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await this.hanldeSearchSelect(itemObj)\r\n            } else if (shape === \"台账选择器\") {\r\n                objKey = `accountName_${i}_${ConfigInfo}`\r\n                obj[objKey] = await this.handleTableAccount(itemObj)\r\n            } else if (shape === \"可编辑值选择器\") {\r\n                objKey = `editble_${i}`\r\n                obj[objKey] = await this.handleEditBle(itemObj)\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n    // 处理校验规则\r\n    handlePattern(ValidateRule){\r\n        let obj = {}\r\n        // 如果不存在校验规则，直接返回\r\n        if (!ValidateRule) {\r\n            obj.required = false\r\n            return obj\r\n        }\r\n        // 如果只有一条校验规则\r\n        if (ValidateRule.indexOf(',') < 0) {\r\n            if (ValidateRule.indexOf(':') > -1) {\r\n                let maxLengthArr = ValidateRule.split(':')\r\n                if (maxLengthArr[0] === 'maxlength') {\r\n                    obj.minLength = 0\r\n                    obj.maxLength = parseInt(maxLengthArr[1])\r\n                }\r\n            } else if (ValidateRule.indexOf(':') < 0) {\r\n                if (ValidateRule === 'required') {\r\n                    obj.required = true\r\n                } else {\r\n                    obj.required = false\r\n                }\r\n            }\r\n        } else {\r\n            let arr = ValidateRule.split(',')\r\n            arr.forEach((item)=>{\r\n                if (item.indexOf(':') > -1) {\r\n                    let maxLengthArr = item.split(':')\r\n                    if (maxLengthArr[0] === 'maxlength') {\r\n                        obj.minLength = 0\r\n                        obj.maxLength = parseInt(maxLengthArr[1])\r\n                    }\r\n                } else {\r\n                    if (item === \"required\") {\r\n                        obj.required = true\r\n                    } else {\r\n                        obj.required = false\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return obj\r\n    }\r\n\r\n    // 文本输入框\r\n    handleInput(dataObj){\r\n        const { minLength, maxLength, required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: 'string',\r\n            default: dataObj.PresetValue,\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ?  `^.{${minLength},${maxLength}}$` : \"\",\r\n            message:{\r\n                pattern: required ? '此项必填': \"\"\r\n            }\r\n        }\r\n    }\r\n    // 多行文本 \r\n    handleTextarea(dataObj){\r\n        const { minLength, maxLength, required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: 'string',\r\n            format: \"textarea\",\r\n            \"ui:width\": `${this.column}00%`,\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ?  `^.{${minLength},${maxLength}}$` : \"\",\r\n            message:{\r\n                pattern: required ? '此项必填': \"\"\r\n            }\r\n        }\r\n    }\r\n    // 数字输入框\r\n    handleNumberInput(dataObj){\r\n        const { minLength, maxLength, required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            minLength: minLength,\r\n            maxLength: maxLength,\r\n            pattern: required ? \"^(\\-|\\+)?\\d+(\\.\\d+)?$\" : \"\",\r\n            message: {\r\n                pattern: \"请输入数字\"\r\n            }\r\n        }\r\n    }\r\n    // 日期\r\n    handleDatePicker(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            format: \"date\",\r\n            \"ui:options\": {\r\n                format: \"YY/MM/DD\"\r\n            },\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择日期\"\r\n            }\r\n        }\r\n    }\r\n    // 日期时间\r\n    handleDateTime(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            format: \"dateTime\",\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择日期时间\"\r\n            }\r\n        }\r\n    }\r\n    // 日期年份\r\n    hanldeYearSelect(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        let date = new Date()\r\n        const curYear = date.getFullYear()\r\n        const startYear = curYear - 10\r\n        let enumVals = []\r\n        let enumNames = []\r\n        for(let i = curYear ; i > startYear ; i--) {\r\n            enumNames.push(i)\r\n            enumVals.push(i)\r\n        }\r\n        return {\r\n            title:dataObj.Alias,\r\n            type: \"string\",\r\n            enum: enumVals,\r\n            enumNames: enumNames,\r\n            default: curYear,\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"请选择年份\"\r\n            }\r\n        }\r\n    }\r\n    // 值选择器\r\n    hanldeValueSelect(dataObj){\r\n        if (!dataObj.ConfigInfo) {\r\n            return\r\n        }\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        let myOptions = dataObj.ConfigInfo.split(',')\r\n        return {\r\n            title: dataObj.Alias,\r\n            type: \"string\",\r\n            enum: myOptions,\r\n            enumNames: myOptions,\r\n            default: dataObj.PresetValue,\r\n            pattern: required ? \"^.{1,30}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 搜索选择器\r\n    hanldeSearchSelect(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"search\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 可编辑值选择器\r\n    handleEditBle(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"editSearch\",\r\n            \"ui:options\": {\r\n                value: dataObj.ConfigInfo\r\n            },\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 本人姓名\r\n    handleMySelfName(title){\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 本人部门\r\n    handleMySelfDepart(title){\r\n        return {\r\n            title,\r\n            type: \"string\",\r\n            \"ui:readonly\": true\r\n        }\r\n    }\r\n\r\n    // 人员选择器\r\n    handleStaffSelect(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"staff\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 附件上传\r\n    handleFileUploadWidget(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"file\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 台账选择器\r\n    handleTableAccount(dataObj){\r\n        const { required } = this.handlePattern(dataObj.ValidateRule)\r\n        return {\r\n            title: dataObj.Alias,\r\n            \"ui:widget\": \"table\",\r\n            pattern: required ? \"^.{1,100}$\" : \"\",\r\n            message: {\r\n                pattern: \"必填项\"\r\n            }\r\n        }\r\n    }\r\n    // 判断是否是必填字段\r\n    judgeRequired(objData){\r\n        let requireList = []\r\n        for(let ckey in objData) {\r\n            if (objData[ckey].pattern && objData[ckey].pattern !== \"\") {\r\n                requireList.push(ckey)\r\n            }\r\n        }\r\n        return requireList\r\n    }\r\n    // 接口请求异步函数\r\n    async asyncFunc(name){\r\n        let result = await getSelectName(name)\r\n        return result.data\r\n    }\r\n\r\n    async hanldeSelect(name){\r\n        let obj = {}\r\n        let data = await this.asyncFunc(name);\r\n        let enumVals = []\r\n        let enumNames = []\r\n        data.forEach((item)=>{\r\n            enumVals.push(item.NODEVALUE)\r\n            enumNames.push(item.NODENAME)\r\n        })\r\n        obj = {\r\n            title: name,\r\n            type: 'string',\r\n            enum: enumVals,\r\n            enumNames: enumNames\r\n        }\r\n        return obj\r\n    }\r\n\r\n    // 多级联动\r\n    hanldeSelectTreeNode(name){\r\n        return {\r\n            title: name,\r\n            \"ui:widget\": \"cascader\"\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormTransfer","E:\\react-flowable\\src\\utils\\request.js",[],"E:\\react-flowable\\src\\utils\\config.js",[],"E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx",["167","168","169","170","171","172","173","174","175","176","177","178","179","180"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message, Modal, Radio } from 'antd';\r\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\r\nimport './DoneDeal.less'\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"taskId\") > -1) {\r\n                taskIdScope = decodeURI(item.split(\"=\")[1])\r\n                setTaskId(taskIdScope)\r\n            }\r\n        })\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                let schemaConfig =  JSON.parse(fieldData.Config)\r\n                let fieldConfig = schemaConfig.schema.properties\r\n                let formValObj = JSON.parse(fieldData.formId).values\r\n                for(let skey in fieldConfig){\r\n                    for(let val in formValObj) {\r\n                        if (skey === val) {\r\n                            fieldConfig[skey].default = formValObj[val]\r\n                        }\r\n                    }\r\n                }\r\n                schemaConfig.schema.properties = fieldConfig\r\n                setFormId(JSON.parse(fieldData.formId).formId)\r\n                setSchema(schemaConfig)\r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    // 处理请求参数\r\n    const hanldeRouterParams =()=>{\r\n        // 处理Cookie\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                setCookie(itemArr[1])\r\n            }\r\n        })\r\n\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"processDefinitionId\") > -1) {\r\n                setProcessDefinitionId(decodeURI(item.split(\"=\")[1]))\r\n            } else if (item.indexOf(\"userId\") > -1) {\r\n                setUserId(item.split(\"=\")[1])\r\n            }\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    // 附件\r\n    const uploadFile=()=>{\r\n\r\n    }\r\n    // 流转信息\r\n    const showTransFlow=()=>{\r\n        \r\n    }\r\n    // 流程图\r\n    const showModeler=()=>{\r\n\r\n    }\r\n\r\n    // 移交Modal\r\n    const handleOK=()=>{\r\n\r\n    }\r\n    const handleCancel=()=>{\r\n\r\n    }\r\n    // 流程图Modal\r\n    const handleModelerOK=()=>{\r\n\r\n    }\r\n    const handleModelerCancel=()=>{\r\n\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldeRouterParams()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"任务移交\" visible={visible} onOk={handleOK} onCancel={handleCancel}>\r\n                <Radio.Group value={transValue}>\r\n\r\n                </Radio.Group>\r\n            </Modal>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message, Modal, Radio } from 'antd';\r\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\r\nimport './HistoryFlow.less'\r\nimport StaffSelectWidget from '../../components/StaffSelectWidget/StaffSelectWidget'\r\nimport TreeCascader from '../../components/TreeCascader/TreeCascader'\r\nimport SearchSelect from '../../components/SearchSelect/SearchSelect'\r\nimport TableAccount from '../../components/TableAccount/TableAccount'\r\nimport UploadFile from '../../components/UploadFile/UploadFile'\r\nimport EditbleSelct from '../../components/EditbleSelct/EditbleSelct'\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        taskIdScope = props.location.state.taskId\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                let schemaConfig =  JSON.parse(fieldData.Config)\r\n                let fieldConfig = schemaConfig.schema.properties\r\n                let formValObj = JSON.parse(fieldData.formId).values\r\n                for(let skey in fieldConfig){\r\n                    for(let val in formValObj) {\r\n                        if (skey === val) {\r\n                            fieldConfig[skey].default = formValObj[val]\r\n                        }\r\n                    }\r\n                }\r\n                schemaConfig.schema.properties = fieldConfig\r\n                setFormId(JSON.parse(fieldData.formId).formId)\r\n                setSchema(schemaConfig)\r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.go(-1)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal> */}\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n                widgets={{ staff: StaffSelectWidget, cascader: TreeCascader, search: SearchSelect, table: TableAccount, file: UploadFile, editSearch: EditbleSelct }}\r\n            />\r\n            <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={handleClickReback}>返回</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;","E:\\react-flowable\\src\\components\\StaffSelect\\StaffSelect.jsx",["204","205","206"],"// 自定义Form Render组件,人员选择器\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Modal, Button, Radio, Input } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { getUserListForRole } from '../../apis/process';\r\nimport './StaffSelect.less';\r\nconst { Search } = Input;\r\n\r\nconst StaffSelect =(props)=> {\r\n    const [visible, setVisible] = useState(false)\r\n    const [personArr, setPersonArr] = useState([])\r\n    const [person, setPerson] = useState('')\r\n    const getData =()=>{\r\n        getUserListForRole()\r\n        .then((res)=>{\r\n            let arr = []\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.LevelCode.indexOf('1-24') > -1) {\r\n                    arr.push(item)\r\n                }\r\n            })\r\n            setPersonArr(arr)\r\n        })\r\n    }\r\n    const onFocus = ()=>{\r\n        setVisible(true)\r\n    }\r\n    const onOk=()=>{\r\n        setVisible(false)\r\n        props.handleStaff(person);\r\n    }\r\n    const onCancel=()=>{\r\n        setVisible(false)\r\n        getData()\r\n    }\r\n    const onChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const handleChange=(e)=>{\r\n        console.log(e)\r\n        setPerson(e.target.value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        let arr = []\r\n        personArr.map((item) => {\r\n            let list = {\r\n                OUID: item.OUID,\r\n                OUName: item.OUName,\r\n                userList: []\r\n            }\r\n            item.userList.map((user) => {\r\n                if (user.userName.indexOf(e) > -1) {\r\n                    list.userList.push(user);\r\n                }\r\n            })\r\n            if (list.userList.length) {\r\n                arr.push(list);\r\n            }\r\n        })\r\n        setPersonArr(arr)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"personselect-wrapper\">\r\n            <div>\r\n                <span className=\"selectvalue\">{person}</span>\r\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\r\n            </div>\r\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\r\n                <Search\r\n                    placeholder=\"请输入姓名\"\r\n                    allowClear\r\n                    onSearch={onSearch}\r\n                    enterButton \r\n                />\r\n                {\r\n                    personArr.map((item,index)=>{\r\n                        return(\r\n                            <form key={index} className=\"fieldset-class\">\r\n                                <fieldset className=\"person-select\">\r\n                                    <legend className=\"personheader\">{item.OUName}</legend>\r\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\r\n                                        {\r\n                                            item.userList.map((child,childIndex)=>{\r\n                                                return(\r\n                                                    <Radio value={child.userName} key={childIndex}>{child.userName}</Radio>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Radio.Group>\r\n                                </fieldset>\r\n                            </form>\r\n                        )\r\n                    })\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default StaffSelect\r\n","E:\\react-flowable\\src\\components\\UploadFile\\UploadFile.jsx",["207","208","209","210","211","212","213","214","215"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Modal, Button, Radio, Input,message } from 'antd';\r\nimport { uploadToService } from '../../apis/process';\r\nimport { CloudUploadOutlined } from '@ant-design/icons';\r\nimport './UploadFile.less';\r\nconst { Search } = Input;\r\n\r\nconst UploadFile =(props)=> {\r\n    const [upFileName, setUpFileName] = useState(null)\r\n    const [taskId, setTaskId] = useState(window.taskId)\r\n\r\n    const handleChange=(e)=>{\r\n        console.log(e)\r\n        setUpFileName(e.target.files[0])\r\n    }\r\n\r\n    // 确定上传附件\r\n    const sureUploadVisible=()=>{\r\n        var _url = document.referrer + \"cityinterface/rest/services/filedownload.svc/uploadfile/workflow/\"+ props.name +'/' + upFileName.name;\r\n        var formData = new FormData();\r\n        formData.append(\"filedata\", upFileName);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"POST\", encodeURI(_url));\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    try {\r\n                        var data = JSON.parse(request.responseText);\r\n                        if (data && data.success) {\r\n                            message.success(\"数据上传成功\");\r\n                            // fileuploadToService('workflow', taskId ,upFileName.name)\r\n                            props.onChange(props.name, upFileName)\r\n                        } else {\r\n                            message.error(\"上传失败\")\r\n                        }\r\n                    } catch (e) {\r\n                        message.error(\"上传失败\")\r\n                    }\r\n                } else {\r\n                    message.error(\"上传失败\")\r\n                }\r\n            }\r\n        }\r\n        request.send(formData);\r\n    }\r\n    // 上传文件至服务器\r\n    const fileuploadToService=(folderName, timeStamp, fileName)=> {\r\n        const FilePath = `/${folderName}/${timeStamp}/${fileName}`\r\n        uploadToService(taskId, FilePath)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"上传成功！\")\r\n                // setUploadVisible(false)\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n    }, [])\r\n    return (\r\n        <div className=\"fileupload-wrapper\">\r\n            <Input.Group compact>\r\n                <Input size=\"small\" type=\"file\" style={{ width: '80%' }} placeholder=\"请点击选择文件\" onChange={handleChange}></Input>\r\n                <CloudUploadOutlined size=\"small\" style={{ width: '20%' }} type=\"primary\" className=\"uploadBtn\" onClick={sureUploadVisible}>上传</CloudUploadOutlined>\r\n            </Input.Group>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default UploadFile\r\n","E:\\react-flowable\\src\\pages\\FlowPermission\\FlowPermission.jsx",["216","217","218","219","220"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Button, Input, Form, Row, Col, Checkbox, message } from 'antd';\r\nimport { getUserListForRole, GetWorkflowBaseInfo, UpdateWorkFlowRight } from '../../apis/process';\r\nimport StaffSelect from '../../components/StaffSelect/StaffSelect';\r\nimport './FlowPermission.less';\r\nconst { Search } = Input;\r\n\r\nclass FlowPermission extends React.Component {\r\n    state={\r\n        userName: '',\r\n        flowName: '',\r\n        flowArr: [],\r\n        defaultVal: [],\r\n        keyList: []\r\n    }\r\n    handleStaff=async (val)=>{\r\n        this.setState({\r\n            userName: val\r\n        })\r\n    }\r\n    \r\n    onChange=(event)=>{\r\n        const value = event.target.value;\r\n        let updateData = []\r\n        this.state.flowArr.forEach((item)=>{\r\n            if (item.value === value) {\r\n                item.checked = !item.checked\r\n            }\r\n            updateData.push(item)\r\n        })\r\n        console.log(updateData)\r\n        this.setState({\r\n            flowArr: updateData\r\n        })\r\n    }\r\n\r\n    getInput=(e)=>{\r\n        this.setState({\r\n            flowName: e.target.value\r\n        })\r\n    }\r\n    \r\n    getData=()=>{\r\n        console.log(this.state.userName)\r\n        let arr =[]\r\n        let name =  ''\r\n        GetWorkflowBaseInfo(name, this.state.userName, '', '', 1, 1000)\r\n        .then((res)=>{\r\n            res.data.getMe.forEach((item)=>{\r\n                arr.push({\r\n                    label: item.WorkflowName,\r\n                    value: item.Key,\r\n                    checked: item.AccessRight === \"1\" ? true: false\r\n                })\r\n            })\r\n            this.setState({\r\n                flowArr: arr\r\n            })\r\n        })\r\n    }\r\n    linkToModeler=()=>{\r\n        let keyList = []\r\n        this.state.flowArr.forEach((item)=>{\r\n            if (item.checked) {\r\n                keyList.push(item.value)\r\n            }\r\n        })\r\n        let FORMKEYLIST = keyList.toString()\r\n        UpdateWorkFlowRight(this.state.userName, FORMKEYLIST)\r\n        .then((res)=>{\r\n            if (res.data.statusCode === \"0000\") {\r\n                message.success(\"挂接成功\")\r\n            } else {\r\n                message.error(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    handleRouteParams=()=>{\r\n        const search = window.location.search.slice(1)\r\n        console.log(search)\r\n        const searchArr = search.split(\"=\")\r\n        console.log(searchArr)\r\n        this.setState({\r\n            userName:decodeURI(searchArr[1])\r\n        },()=>{\r\n            console.log(this.state.userName)\r\n            this.getData()\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.handleRouteParams()\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"flowpermiss-wrapper\">\r\n                <div className=\"form-headerbox\">\r\n                    <Form layout=\"inline\">\r\n                        <Form.Item label=\"人员选择\">\r\n                            <StaffSelect handleStaff={this.handleStaff}></StaffSelect>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"流程名称\">\r\n                            <Input type=\"text\" placeholder=\"请输入流程名称\" size=\"small\" allowClear onChange={this.getInput}></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.linkToModeler}>挂接</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"contentbox\">\r\n                    <Row gutter={[20, 10]}>\r\n                        {\r\n                            this.state.flowArr.map((item,index)=>{\r\n                                return(\r\n                                    <Col span={6} key={index}>\r\n                                        <Checkbox value={item.value} checked={item.checked} onChange={this.onChange}>{item.label}</Checkbox>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default FlowPermission\r\n","E:\\react-flowable\\src\\pages\\StartPermission\\StartPermission.jsx",["221","222","223","224","225","226","227","228","229","230","231"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Input, Form, Row, Col, Checkbox, message } from 'antd';\r\nimport { getUserListForRole, GetWorkflowBaseInfo, UpdateWorkFlowRight } from '../../apis/process';\r\nimport StaffSelect from '../../components/StaffSelect/StaffSelect';\r\nimport { PartitionOutlined, ArrowRightOutlined } from '@ant-design/icons';\r\nimport './StartPermission.less';\r\nimport flowIcon from \"../../assets/flow-icon.png\"\r\nimport flowArrowIcon from \"../../assets/flow-arrow-right.png\"\r\nconst { Search } = Input;\r\n\r\nclass StartPermission extends React.Component {\r\n    state={\r\n        userName: '',\r\n        flowName: '',\r\n        flowArr: [],\r\n        defaultVal: [],\r\n        keyList: [],\r\n        userId: ''\r\n    }\r\n    \r\n    onChange=(val)=>{\r\n        this.setState({\r\n            keyList: val\r\n        })\r\n    }\r\n\r\n    getInput=(e)=>{\r\n        this.setState({\r\n            flowName: e.target.value\r\n        })\r\n    }\r\n    \r\n    getData=()=>{\r\n        let deArr = []\r\n        let name =  this.state.flowName || ''\r\n        // GetWorkflowBaseInfo(name, this.state.userName, '', '', 1, 1000)\r\n        GetWorkflowBaseInfo(name, '王万里', '', '', 1, 1000)\r\n        .then((res)=>{\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.AccessRight === '1') {\r\n                    deArr.push(item)\r\n                }\r\n            })\r\n            console.log(deArr)\r\n            this.setState({\r\n                flowArr: deArr\r\n            })\r\n        })\r\n    }\r\n    handleRouteParams=()=>{\r\n        let userId = \"\"\r\n        let userName = ''\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"userId\") > -1) {\r\n                userId = item.split(\"=\")[1]\r\n            } else if (item.indexOf(\"userName\") > -1) {\r\n                userName = decodeURI(item.split(\"=\")[1])\r\n            }\r\n        })\r\n        this.setState({\r\n            userId: userId,\r\n            userName: userName\r\n        },()=>{\r\n            this.getData()\r\n        })\r\n    }\r\n    handleStart=(flowName, FlowDefID)=>{\r\n        console.log(flowName, FlowDefID)\r\n        debugger\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/start',\r\n                state:{\r\n                    flowName: flowName,\r\n                    FlowDefID: FlowDefID,\r\n                    userId: this.state.userId\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // this.handleRouteParams()\r\n        this.getData()\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"flowpermiss-wrapper\">\r\n                <div className=\"form-headerbox\">\r\n                    <Form layout=\"inline\">\r\n                        <Form.Item label=\"流程名称\">\r\n                            <Input type=\"text\" placeholder=\"请输入流程名称\" size=\"small\" allowClear onChange={this.getInput}></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"contentbox\">\r\n                    <Row gutter={[20, 10]}>\r\n                        {\r\n                            this.state.flowArr.map((item,index)=>{\r\n                                return(\r\n                                    <Col span={6} key={index}>\r\n                                        <div className=\"card-wrapper\" onClick={this.handleStart(item.WorkflowName, item.FlowID)}>\r\n                                            <div className=\"left-card\">\r\n                                                <img src={flowIcon} alt=\"\" className=\"flow-icon\"/>\r\n                                                <span>{item.WorkflowName}</span>\r\n                                            </div>\r\n                                            <div className=\"arrow-class\">\r\n                                                <img src={flowArrowIcon} alt=\"\"/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default StartPermission\r\n","E:\\react-flowable\\src\\components\\TreeCascader\\TreeCascader.jsx",[],"E:\\react-flowable\\src\\components\\SearchSelect\\SearchSelect.jsx",["232","233"],"// 自定义Form Render组件\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Select } from 'antd';\r\nimport { getSelectName } from '../../apis/process';\r\nimport './SearchSelect.less';\r\nconst { Option } = Select;\r\n\r\nconst SearchSelect =(myOptions)=> {\r\n    const [optionList, setOptionList] = useState([])\r\n    const hanldeChange=(value)=>{\r\n        console.log(value)\r\n        myOptions.onChange(myOptions.name, value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        console.log(e)\r\n    }\r\n    const getData = ()=>{\r\n        let arr1 =  myOptions.name.split('_')\r\n        let str = arr1[arr1.length-1]\r\n        getSelectName(str)\r\n        .then((res)=>{\r\n            setOptionList(res.data)\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"fileupload-wrapper\">\r\n            <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                onChange={hanldeChange}\r\n                onSearch={onSearch}\r\n                filterOption={(input, option) =>option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n            >\r\n                {\r\n                    optionList.map((item,index)=>{\r\n                        return(\r\n                            <Option value={item.NODEVALUE} key={index}>{item.NODENAME}</Option>\r\n                        )\r\n                    })\r\n                }\r\n            </Select>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchSelect\r\n","E:\\react-flowable\\src\\components\\TableAccount\\TableAccount.jsx",["234","235","236","237"],"// 自定义Form Render组件,人员选择器\r\nimport React from 'react';\r\nimport { Modal, Button, Radio, Input, Table, Space } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { GetAccountConfigInfo, GetAccountPageList } from '../../apis/process';\r\nimport './TableAccount.less';\r\nconst { Column } = Table;\r\nconst { Search } = Input;\r\n\r\nclass TableAccount extends React.Component {\r\n    state={\r\n        visible: false,\r\n        columns: [],\r\n        tableData: [],\r\n        tableAccountValue: '',\r\n        searchVal: '',\r\n        rowSelection: {\r\n            onChange: (selectedRowKeys) => {\r\n                this.setState({\r\n                    tableAccountValue: selectedRowKeys\r\n                })\r\n                // let input = document.getElementById(\"tableAccountInput\")\r\n                // input.value = selectedRowKeys\r\n            }\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData = () => {\r\n        let arr1 = this.props.name.split('.')\r\n        let accountName = arr1[0]\r\n        let rowkey = \"\"\r\n        if (arr1[1].inedxOf('|')> -1) {\r\n            let keyArr = arr1[1].split('|')\r\n            rowkey = keyArr[0]\r\n        } else {\r\n            rowkey = arr1[1]\r\n        }\r\n        let info = this.state.searchVal || ''\r\n        // let accountName = '项目信息台账简略版'\r\n        // let info = this.state.searchVal || ''\r\n        // let rowkey = '项目流水号'\r\n        GetAccountConfigInfo(accountName)\r\n            .then((res) => {\r\n                let colArr = []\r\n                let arr = res.data.getMe[0].WebShowFieldGroup.split(',')\r\n                arr.forEach(item => {\r\n                    if (!item) {\r\n                        return\r\n                    }\r\n                    colArr.push({\r\n                        key: (new Date()).getTime(),\r\n                        title: item,\r\n                        dataIndex: item,\r\n                    })\r\n                })\r\n                this.setState({\r\n                    columns: colArr\r\n                },()=>{\r\n                    GetAccountPageList(1, 2000, accountName, info)\r\n                    .then((response) => {\r\n                        let arrWrap = []\r\n                        response.data.getMe.forEach(async (item) => {\r\n                            let obj = this.hanldeItem(item)\r\n                            obj.key = obj[rowkey]\r\n                            arrWrap.push(obj)\r\n                        })\r\n                        this.setState({\r\n                            tableData: arrWrap\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n    }\r\n\r\n    hanldeItem = (obj) => {\r\n        const dataObj = obj\r\n        let objarr = []\r\n        let objobj = {}\r\n        dataObj.WebRow.forEach((item) => {\r\n            objarr.push(item.FieldValue)\r\n        })\r\n        for (let i = 0; i < this.state.columns.length; i++) {\r\n            for (let j = 0; j < objarr.length; j++) {\r\n                if (i === j) {\r\n                    objobj[this.state.columns[i].dataIndex] = objarr[j]\r\n                }\r\n            }\r\n        }\r\n        return objobj\r\n    }\r\n    hanldeInputClick = (e) => {\r\n        this.setState({\r\n            visible: true\r\n        })\r\n    }\r\n    onOk = () => {\r\n        this.setState({\r\n            visible: false\r\n        },()=>{\r\n            this.props.onChange(this.props.name, this.state.tableAccountValue)\r\n        })\r\n    }\r\n    onCancel = () => {\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    onSearch = (val) => {\r\n        this.setState({\r\n            searchVal: val\r\n        },()=>{\r\n            this.getData()\r\n        })\r\n    }\r\n    hanldeInputChange=(e)=>{\r\n        console.log(e)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"tableAccount-wrapper\">\r\n                <div>\r\n                    <span className=\"keyclass\">{this.state.tableAccountValue}</span>\r\n                    <Button type=\"primary\" size=\"small\" shape=\"round\" onClick={this.hanldeInputClick}>台账选择器</Button>\r\n                    {/* <Input type=\"text\" id=\"tableAccountInput\" onChange={this.hanldeInputChange} defaultValue={this.state.tableAccountValue} onClick={this.hanldeInputClick}></Input> */}\r\n                </div>\r\n                <Modal title=\"流转信息\" visible={this.state.visible} onCancel={this.onCancel} onOk={this.onOk} width={900}\r\n                    bodyStyle={{ height: '500px', overflowY: 'auto' }} wrapClassName=\"personModalClass\">\r\n                    <Search\r\n                        placeholder=\"请输入姓名\"\r\n                        allowClear\r\n                        onSearch={this.onSearch}\r\n                        enterButton\r\n                    />\r\n                    <Table\r\n                        rowSelection={{\r\n                            type: 'radio',\r\n                            ...this.state.rowSelection,\r\n                        }}\r\n                        columns={this.state.columns}\r\n                        dataSource={this.state.tableData}\r\n                        rowClassName=\"rowClassName\" style={{ width: '100%' }}>\r\n                    </Table>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TableAccount\r\n","E:\\react-flowable\\src\\components\\EditbleSelct\\EditbleSelct.jsx",[],"E:\\react-flowable\\src\\components\\StaffSelectWidget\\StaffSelectWidget.jsx",["238","239","240"],"// 自定义Form Render组件,人员选择器\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Modal, Button, Radio, Input } from 'antd';\r\nimport { UserAddOutlined } from '@ant-design/icons';\r\nimport { getUserListForRole } from '../../apis/process';\r\nimport './StaffSelectWidget.less';\r\nconst { Search } = Input;\r\n\r\nconst StaffSelectWidget =(props)=> {\r\n    const [visible, setVisible] = useState(false)\r\n    const [personArr, setPersonArr] = useState([])\r\n    const [person, setPerson] = useState('')\r\n    const getData =()=>{\r\n        getUserListForRole()\r\n        .then((res)=>{\r\n            let arr = []\r\n            res.data.getMe.forEach((item)=>{\r\n                if (item.LevelCode.indexOf('1-24') > -1) {\r\n                    arr.push(item)\r\n                }\r\n            })\r\n            setPersonArr(arr)\r\n        })\r\n    }\r\n    const onFocus = ()=>{\r\n        setVisible(true)\r\n    }\r\n    const onOk=()=>{\r\n        setVisible(false)\r\n        props.onChange(props.name, person)\r\n    }\r\n    const onCancel=()=>{\r\n        setVisible(false)\r\n        getData()\r\n    }\r\n    const onChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const handleChange=(e)=>{\r\n        setPerson(e.target.value)\r\n    }\r\n    const onSearch=(e)=>{\r\n        let arr = []\r\n        personArr.map((item) => {\r\n            let list = {\r\n                OUID: item.OUID,\r\n                OUName: item.OUName,\r\n                userList: []\r\n            }\r\n            item.userList.map((user) => {\r\n                if (user.userName.indexOf(e) > -1) {\r\n                    list.userList.push(user);\r\n                }\r\n            })\r\n            if (list.userList.length) {\r\n                arr.push(list);\r\n            }\r\n        })\r\n        setPersonArr(arr)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n    return (\r\n        <div className=\"personselect-wrapper\">\r\n            <div>\r\n                <span className=\"selectvalue\">{person}</span>\r\n                <Button type=\"primary\" size=\"small\" shape=\"round\" icon={<UserAddOutlined />} onClick={onFocus}></Button>\r\n            </div>\r\n            <Modal title=\"人员选择器\" visible={visible} onOk={onOk} onCancel={onCancel} wrapClassName=\"personModalClass\" bodyStyle={{height:'500px',overflowY:'auto'}}>\r\n                <Search\r\n                    placeholder=\"请输入姓名\"\r\n                    allowClear\r\n                    onSearch={onSearch}\r\n                    enterButton \r\n                />\r\n                {\r\n                    personArr.map((item,index)=>{\r\n                        return(\r\n                            <form key={index} className=\"fieldset-class\">\r\n                                <fieldset className=\"person-select\">\r\n                                    <legend className=\"personheader\">{item.OUName}</legend>\r\n                                    <Radio.Group className=\"person-radio\" name=\"person\" onChange={handleChange} value={person}>\r\n                                        {\r\n                                            item.userList.map((child,childIndex)=>{\r\n                                                return(\r\n                                                    <Radio value={child.userName}>{child.userName}</Radio>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Radio.Group>\r\n                                </fieldset>\r\n                            </form>\r\n                        )\r\n                    })\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default StaffSelectWidget\r\n",{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":29},{"ruleId":"241","severity":1,"message":"245","line":2,"column":45,"nodeType":"243","messageId":"244","endLine":2,"endColumn":56},{"ruleId":"241","severity":1,"message":"246","line":2,"column":58,"nodeType":"243","messageId":"244","endLine":2,"endColumn":71},{"ruleId":"241","severity":1,"message":"247","line":6,"column":9,"nodeType":"243","messageId":"244","endLine":6,"endColumn":17},{"ruleId":"248","severity":1,"message":"249","line":34,"column":66,"nodeType":"250","messageId":"251","endLine":34,"endColumn":67},{"ruleId":"248","severity":1,"message":"249","line":35,"column":63,"nodeType":"250","messageId":"251","endLine":35,"endColumn":64},{"ruleId":"252","severity":1,"message":"253","line":21,"column":7,"nodeType":"254","endLine":21,"endColumn":9,"suggestions":"255"},{"ruleId":"241","severity":1,"message":"256","line":23,"column":11,"nodeType":"243","messageId":"244","endLine":23,"endColumn":22},{"ruleId":"241","severity":1,"message":"257","line":3,"column":22,"nodeType":"243","messageId":"244","endLine":3,"endColumn":33},{"ruleId":"241","severity":1,"message":"258","line":4,"column":29,"nodeType":"243","messageId":"244","endLine":4,"endColumn":35},{"ruleId":"241","severity":1,"message":"259","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":20},{"ruleId":"241","severity":1,"message":"260","line":45,"column":20,"nodeType":"243","messageId":"244","endLine":45,"endColumn":29},{"ruleId":"241","severity":1,"message":"256","line":146,"column":11,"nodeType":"243","messageId":"244","endLine":146,"endColumn":22},{"ruleId":"241","severity":1,"message":"261","line":152,"column":11,"nodeType":"243","messageId":"244","endLine":152,"endColumn":28},{"ruleId":"262","severity":1,"message":"263","line":306,"column":36,"nodeType":"250","messageId":"264","endLine":306,"endColumn":38},{"ruleId":"262","severity":1,"message":"263","line":307,"column":36,"nodeType":"250","messageId":"264","endLine":307,"endColumn":38},{"ruleId":"265","severity":1,"message":"266","line":614,"column":36,"nodeType":"267","messageId":"268","endLine":614,"endColumn":37,"suggestions":"269"},{"ruleId":"265","severity":1,"message":"270","line":614,"column":39,"nodeType":"267","messageId":"268","endLine":614,"endColumn":40,"suggestions":"271"},{"ruleId":"265","severity":1,"message":"272","line":614,"column":43,"nodeType":"267","messageId":"268","endLine":614,"endColumn":44,"suggestions":"273"},{"ruleId":"265","severity":1,"message":"274","line":614,"column":47,"nodeType":"267","messageId":"268","endLine":614,"endColumn":48,"suggestions":"275"},{"ruleId":"265","severity":1,"message":"272","line":614,"column":49,"nodeType":"267","messageId":"268","endLine":614,"endColumn":50,"suggestions":"276"},{"ruleId":"252","severity":1,"message":"253","line":787,"column":8,"nodeType":"254","endLine":787,"endColumn":10,"suggestions":"277"},{"ruleId":"278","severity":1,"message":"279","line":907,"column":41,"nodeType":"280","endLine":907,"endColumn":79},{"ruleId":"241","severity":1,"message":"281","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"259","line":4,"column":8,"nodeType":"243","messageId":"244","endLine":4,"endColumn":20},{"ruleId":"241","severity":1,"message":"260","line":20,"column":20,"nodeType":"243","messageId":"244","endLine":20,"endColumn":29},{"ruleId":"252","severity":1,"message":"253","line":431,"column":7,"nodeType":"254","endLine":431,"endColumn":9,"suggestions":"282"},{"ruleId":"241","severity":1,"message":"245","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":21},{"ruleId":"241","severity":1,"message":"258","line":4,"column":29,"nodeType":"243","messageId":"244","endLine":4,"endColumn":35},{"ruleId":"248","severity":1,"message":"249","line":6,"column":91,"nodeType":"250","messageId":"251","endLine":6,"endColumn":92},{"ruleId":"265","severity":1,"message":"266","line":185,"column":36,"nodeType":"267","messageId":"268","endLine":185,"endColumn":37,"suggestions":"283"},{"ruleId":"265","severity":1,"message":"270","line":185,"column":39,"nodeType":"267","messageId":"268","endLine":185,"endColumn":40,"suggestions":"284"},{"ruleId":"265","severity":1,"message":"272","line":185,"column":43,"nodeType":"267","messageId":"268","endLine":185,"endColumn":44,"suggestions":"285"},{"ruleId":"265","severity":1,"message":"274","line":185,"column":47,"nodeType":"267","messageId":"268","endLine":185,"endColumn":48,"suggestions":"286"},{"ruleId":"265","severity":1,"message":"272","line":185,"column":49,"nodeType":"267","messageId":"268","endLine":185,"endColumn":50,"suggestions":"287"},{"ruleId":"241","severity":1,"message":"288","line":3,"column":18,"nodeType":"243","messageId":"244","endLine":3,"endColumn":25},{"ruleId":"241","severity":1,"message":"289","line":4,"column":23,"nodeType":"243","messageId":"244","endLine":4,"endColumn":35},{"ruleId":"241","severity":1,"message":"290","line":4,"column":37,"nodeType":"243","messageId":"244","endLine":4,"endColumn":45},{"ruleId":"241","severity":1,"message":"291","line":10,"column":12,"nodeType":"243","messageId":"244","endLine":10,"endColumn":18},{"ruleId":"241","severity":1,"message":"292","line":11,"column":12,"nodeType":"243","messageId":"244","endLine":11,"endColumn":18},{"ruleId":"241","severity":1,"message":"293","line":12,"column":12,"nodeType":"243","messageId":"244","endLine":12,"endColumn":31},{"ruleId":"241","severity":1,"message":"294","line":13,"column":12,"nodeType":"243","messageId":"244","endLine":13,"endColumn":18},{"ruleId":"241","severity":1,"message":"295","line":14,"column":12,"nodeType":"243","messageId":"244","endLine":14,"endColumn":18},{"ruleId":"241","severity":1,"message":"296","line":15,"column":21,"nodeType":"243","messageId":"244","endLine":15,"endColumn":31},{"ruleId":"241","severity":1,"message":"297","line":16,"column":28,"nodeType":"243","messageId":"244","endLine":16,"endColumn":45},{"ruleId":"241","severity":1,"message":"298","line":17,"column":24,"nodeType":"243","messageId":"244","endLine":17,"endColumn":37},{"ruleId":"241","severity":1,"message":"299","line":18,"column":27,"nodeType":"243","messageId":"244","endLine":18,"endColumn":43},{"ruleId":"241","severity":1,"message":"256","line":97,"column":11,"nodeType":"243","messageId":"244","endLine":97,"endColumn":22},{"ruleId":"241","severity":1,"message":"261","line":103,"column":11,"nodeType":"243","messageId":"244","endLine":103,"endColumn":28},{"ruleId":"241","severity":1,"message":"288","line":3,"column":18,"nodeType":"243","messageId":"244","endLine":3,"endColumn":25},{"ruleId":"241","severity":1,"message":"300","line":3,"column":27,"nodeType":"243","messageId":"244","endLine":3,"endColumn":32},{"ruleId":"241","severity":1,"message":"301","line":3,"column":34,"nodeType":"243","messageId":"244","endLine":3,"endColumn":39},{"ruleId":"241","severity":1,"message":"289","line":4,"column":23,"nodeType":"243","messageId":"244","endLine":4,"endColumn":35},{"ruleId":"241","severity":1,"message":"290","line":4,"column":37,"nodeType":"243","messageId":"244","endLine":4,"endColumn":45},{"ruleId":"241","severity":1,"message":"291","line":16,"column":12,"nodeType":"243","messageId":"244","endLine":16,"endColumn":18},{"ruleId":"241","severity":1,"message":"292","line":17,"column":12,"nodeType":"243","messageId":"244","endLine":17,"endColumn":18},{"ruleId":"241","severity":1,"message":"302","line":17,"column":20,"nodeType":"243","messageId":"244","endLine":17,"endColumn":29},{"ruleId":"241","severity":1,"message":"293","line":18,"column":12,"nodeType":"243","messageId":"244","endLine":18,"endColumn":31},{"ruleId":"241","severity":1,"message":"303","line":18,"column":33,"nodeType":"243","messageId":"244","endLine":18,"endColumn":55},{"ruleId":"241","severity":1,"message":"294","line":19,"column":12,"nodeType":"243","messageId":"244","endLine":19,"endColumn":18},{"ruleId":"241","severity":1,"message":"304","line":19,"column":20,"nodeType":"243","messageId":"244","endLine":19,"endColumn":29},{"ruleId":"241","severity":1,"message":"295","line":20,"column":12,"nodeType":"243","messageId":"244","endLine":20,"endColumn":18},{"ruleId":"241","severity":1,"message":"305","line":21,"column":12,"nodeType":"243","messageId":"244","endLine":21,"endColumn":19},{"ruleId":"241","severity":1,"message":"296","line":21,"column":21,"nodeType":"243","messageId":"244","endLine":21,"endColumn":31},{"ruleId":"241","severity":1,"message":"306","line":22,"column":12,"nodeType":"243","messageId":"244","endLine":22,"endColumn":26},{"ruleId":"241","severity":1,"message":"297","line":22,"column":28,"nodeType":"243","messageId":"244","endLine":22,"endColumn":45},{"ruleId":"241","severity":1,"message":"307","line":23,"column":12,"nodeType":"243","messageId":"244","endLine":23,"endColumn":22},{"ruleId":"241","severity":1,"message":"298","line":23,"column":24,"nodeType":"243","messageId":"244","endLine":23,"endColumn":37},{"ruleId":"241","severity":1,"message":"308","line":24,"column":12,"nodeType":"243","messageId":"244","endLine":24,"endColumn":25},{"ruleId":"241","severity":1,"message":"299","line":24,"column":27,"nodeType":"243","messageId":"244","endLine":24,"endColumn":43},{"ruleId":"241","severity":1,"message":"256","line":73,"column":11,"nodeType":"243","messageId":"244","endLine":73,"endColumn":22},{"ruleId":"252","severity":1,"message":"253","line":84,"column":8,"nodeType":"254","endLine":84,"endColumn":10,"suggestions":"309"},{"ruleId":"241","severity":1,"message":"310","line":36,"column":11,"nodeType":"243","messageId":"244","endLine":36,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":45,"column":30,"nodeType":"313","messageId":"314","endLine":45,"endColumn":32},{"ruleId":"311","severity":1,"message":"312","line":51,"column":38,"nodeType":"313","messageId":"314","endLine":51,"endColumn":40},{"ruleId":"241","severity":1,"message":"315","line":2,"column":38,"nodeType":"243","messageId":"244","endLine":2,"endColumn":44},{"ruleId":"241","severity":1,"message":"300","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":15},{"ruleId":"241","severity":1,"message":"258","line":3,"column":17,"nodeType":"243","messageId":"244","endLine":3,"endColumn":23},{"ruleId":"241","severity":1,"message":"301","line":3,"column":25,"nodeType":"243","messageId":"244","endLine":3,"endColumn":30},{"ruleId":"241","severity":1,"message":"316","line":7,"column":9,"nodeType":"243","messageId":"244","endLine":7,"endColumn":15},{"ruleId":"241","severity":1,"message":"302","line":11,"column":20,"nodeType":"243","messageId":"244","endLine":11,"endColumn":29},{"ruleId":"262","severity":1,"message":"263","line":26,"column":36,"nodeType":"250","messageId":"264","endLine":26,"endColumn":38},{"ruleId":"262","severity":1,"message":"263","line":27,"column":36,"nodeType":"250","messageId":"264","endLine":27,"endColumn":38},{"ruleId":"241","severity":1,"message":"317","line":48,"column":11,"nodeType":"243","messageId":"244","endLine":48,"endColumn":30},{"ruleId":"241","severity":1,"message":"281","line":2,"column":17,"nodeType":"243","messageId":"244","endLine":2,"endColumn":25},{"ruleId":"241","severity":1,"message":"318","line":2,"column":27,"nodeType":"243","messageId":"244","endLine":2,"endColumn":36},{"ruleId":"241","severity":1,"message":"315","line":2,"column":38,"nodeType":"243","messageId":"244","endLine":2,"endColumn":44},{"ruleId":"241","severity":1,"message":"319","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":28},{"ruleId":"241","severity":1,"message":"316","line":7,"column":9,"nodeType":"243","messageId":"244","endLine":7,"endColumn":15},{"ruleId":"241","severity":1,"message":"281","line":2,"column":17,"nodeType":"243","messageId":"244","endLine":2,"endColumn":25},{"ruleId":"241","severity":1,"message":"318","line":2,"column":27,"nodeType":"243","messageId":"244","endLine":2,"endColumn":36},{"ruleId":"241","severity":1,"message":"315","line":2,"column":38,"nodeType":"243","messageId":"244","endLine":2,"endColumn":44},{"ruleId":"241","severity":1,"message":"320","line":3,"column":41,"nodeType":"243","messageId":"244","endLine":3,"endColumn":49},{"ruleId":"241","severity":1,"message":"288","line":3,"column":51,"nodeType":"243","messageId":"244","endLine":3,"endColumn":58},{"ruleId":"241","severity":1,"message":"319","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":28},{"ruleId":"241","severity":1,"message":"321","line":4,"column":51,"nodeType":"243","messageId":"244","endLine":4,"endColumn":70},{"ruleId":"241","severity":1,"message":"322","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":19},{"ruleId":"241","severity":1,"message":"323","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":27},{"ruleId":"241","severity":1,"message":"324","line":6,"column":29,"nodeType":"243","messageId":"244","endLine":6,"endColumn":47},{"ruleId":"241","severity":1,"message":"316","line":10,"column":9,"nodeType":"243","messageId":"244","endLine":10,"endColumn":15},{"ruleId":"241","severity":1,"message":"315","line":2,"column":38,"nodeType":"243","messageId":"244","endLine":2,"endColumn":44},{"ruleId":"252","severity":1,"message":"253","line":27,"column":8,"nodeType":"254","endLine":27,"endColumn":10,"suggestions":"325"},{"ruleId":"241","severity":1,"message":"301","line":3,"column":25,"nodeType":"243","messageId":"244","endLine":3,"endColumn":30},{"ruleId":"241","severity":1,"message":"326","line":3,"column":46,"nodeType":"243","messageId":"244","endLine":3,"endColumn":51},{"ruleId":"241","severity":1,"message":"327","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":25},{"ruleId":"241","severity":1,"message":"328","line":7,"column":9,"nodeType":"243","messageId":"244","endLine":7,"endColumn":15},{"ruleId":"241","severity":1,"message":"310","line":36,"column":11,"nodeType":"243","messageId":"244","endLine":36,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":44,"column":30,"nodeType":"313","messageId":"314","endLine":44,"endColumn":32},{"ruleId":"311","severity":1,"message":"312","line":50,"column":38,"nodeType":"313","messageId":"314","endLine":50,"endColumn":40},"no-unused-vars","'GetWorkflowBaseInfo' is defined but never used.","Identifier","unusedVar","'CreateModel' is defined but never used.","'flowableLogin' is defined but never used.","'TextArea' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["329"],"'handleClick' is assigned a value but never used.","'GetFormJson' is defined but never used.","'Button' is defined but never used.","'FormTransfer' is defined but never used.","'setColumn' is assigned a value but never used.","'handleClickReback' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["330","331"],"Unnecessary escape character: \\+.",["332","333"],"Unnecessary escape character: \\d.",["334","335"],"Unnecessary escape character: \\..",["336","337"],["338","339"],["340"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useState' is defined but never used.",["341"],["342","343"],["344","345"],["346","347"],["348","349"],["350","351"],"'message' is defined but never used.","'SaveFormInfo' is defined but never used.","'TaskSave' is defined but never used.","'cookie' is assigned a value but never used.","'taskId' is assigned a value but never used.","'processDefinitionId' is assigned a value but never used.","'userId' is assigned a value but never used.","'formId' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'setModelerVisible' is assigned a value but never used.","'setTransValue' is assigned a value but never used.","'setProcessImgSrc' is assigned a value but never used.","'Modal' is defined but never used.","'Radio' is defined but never used.","'setTaskId' is assigned a value but never used.","'setProcessDefinitionId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'visible' is assigned a value but never used.","'modelerVisible' is assigned a value but never used.","'transValue' is assigned a value but never used.","'processImgSrc' is assigned a value but never used.",["352"],"'onChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useRef' is defined but never used.","'Search' is assigned a value but never used.","'fileuploadToService' is assigned a value but never used.","'useEffect' is defined but never used.","'getUserListForRole' is defined but never used.","'Checkbox' is defined but never used.","'UpdateWorkFlowRight' is defined but never used.","'StaffSelect' is defined but never used.","'PartitionOutlined' is defined but never used.","'ArrowRightOutlined' is defined but never used.",["353"],"'Space' is defined but never used.","'UserAddOutlined' is defined but never used.","'Column' is assigned a value but never used.",{"desc":"354","fix":"355"},{"messageId":"356","fix":"357","desc":"358"},{"messageId":"359","fix":"360","desc":"361"},{"messageId":"356","fix":"362","desc":"358"},{"messageId":"359","fix":"363","desc":"361"},{"messageId":"356","fix":"364","desc":"358"},{"messageId":"359","fix":"365","desc":"361"},{"messageId":"356","fix":"366","desc":"358"},{"messageId":"359","fix":"367","desc":"361"},{"messageId":"356","fix":"368","desc":"358"},{"messageId":"359","fix":"369","desc":"361"},{"desc":"354","fix":"370"},{"desc":"354","fix":"371"},{"messageId":"356","fix":"372","desc":"358"},{"messageId":"359","fix":"373","desc":"361"},{"messageId":"356","fix":"374","desc":"358"},{"messageId":"359","fix":"375","desc":"361"},{"messageId":"356","fix":"376","desc":"358"},{"messageId":"359","fix":"377","desc":"361"},{"messageId":"356","fix":"378","desc":"358"},{"messageId":"359","fix":"379","desc":"361"},{"messageId":"356","fix":"380","desc":"358"},{"messageId":"359","fix":"381","desc":"361"},{"desc":"354","fix":"382"},{"desc":"354","fix":"383"},"Update the dependencies array to be: [getData]",{"range":"384","text":"385"},"removeEscape",{"range":"386","text":"387"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"388","text":"389"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"390","text":"387"},{"range":"391","text":"389"},{"range":"392","text":"387"},{"range":"393","text":"389"},{"range":"394","text":"387"},{"range":"395","text":"389"},{"range":"396","text":"387"},{"range":"397","text":"389"},{"range":"398","text":"385"},{"range":"399","text":"385"},{"range":"400","text":"387"},{"range":"401","text":"389"},{"range":"402","text":"387"},{"range":"403","text":"389"},{"range":"404","text":"387"},{"range":"405","text":"389"},{"range":"406","text":"387"},{"range":"407","text":"389"},{"range":"408","text":"387"},{"range":"409","text":"389"},{"range":"410","text":"385"},{"range":"411","text":"385"},[640,642],"[getData]",[21780,21781],"",[21780,21780],"\\",[21783,21784],[21783,21783],[21787,21788],[21787,21787],[21791,21792],[21791,21791],[21793,21794],[21793,21793],[26607,26609],[14355,14357],[7097,7098],[7097,7097],[7100,7101],[7100,7100],[7104,7105],[7104,7104],[7108,7109],[7108,7108],[7110,7111],[7110,7110],[3474,3476],[765,767]]