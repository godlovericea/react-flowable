[{"E:\\react-flowable\\src\\index.js":"1","E:\\react-flowable\\src\\App.js":"2","E:\\react-flowable\\src\\reportWebVitals.js":"3","E:\\react-flowable\\src\\pages\\process\\Process.jsx":"4","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx":"5","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx":"6","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx":"7","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx":"8","E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx":"9","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx":"10","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx":"11","E:\\react-flowable\\src\\apis\\process.js":"12","E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx":"13","E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx":"14","E:\\react-flowable\\src\\libs\\transform\\transform.js":"15","E:\\react-flowable\\src\\utils\\request.js":"16","E:\\react-flowable\\src\\utils\\config.js":"17","E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx":"18","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx":"19"},{"size":837,"mtime":1614221302246,"results":"20","hashOfConfig":"21"},{"size":1441,"mtime":1614668241646,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1609127554707,"results":"23","hashOfConfig":"21"},{"size":8256,"mtime":1614673317572,"results":"24","hashOfConfig":"21"},{"size":1328,"mtime":1614582933643,"results":"25","hashOfConfig":"21"},{"size":4402,"mtime":1614221303302,"results":"26","hashOfConfig":"21"},{"size":4081,"mtime":1614582270199,"results":"27","hashOfConfig":"21"},{"size":21102,"mtime":1614681977827,"results":"28","hashOfConfig":"21"},{"size":1174,"mtime":1614221302812,"results":"29","hashOfConfig":"21"},{"size":7043,"mtime":1614582925555,"results":"30","hashOfConfig":"21"},{"size":3931,"mtime":1614221303279,"results":"31","hashOfConfig":"21"},{"size":5364,"mtime":1614680199726,"results":"32","hashOfConfig":"21"},{"size":505,"mtime":1614221303266,"results":"33","hashOfConfig":"21"},{"size":1320,"mtime":1614221302266,"results":"34","hashOfConfig":"21"},{"size":3053,"mtime":1614497268658,"results":"35","hashOfConfig":"21"},{"size":2947,"mtime":1611710653906,"results":"36","hashOfConfig":"21"},{"size":301,"mtime":1614648039493,"results":"37","hashOfConfig":"21"},{"size":6200,"mtime":1614668832504,"results":"38","hashOfConfig":"21"},{"size":4581,"mtime":1614669628314,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qf848r",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"E:\\react-flowable\\src\\index.js",[],"E:\\react-flowable\\src\\App.js",[],"E:\\react-flowable\\src\\reportWebVitals.js",[],"E:\\react-flowable\\src\\pages\\process\\Process.jsx",["87","88","89","90","91","92"],"import React from \"react\";\r\nimport { GetWorkflowBaseInfo, UpdateStatus, CreateModel, flowableLogin, GetFormListInfo, DeleteFormLogic } from '../../apis/process'\r\n// import Modeler from \"../../components/Modeler\";\r\nimport { Table, Space, Button, Form, Input, Pagination, Modal, message } from 'antd';\r\nimport './process.less'\r\nconst { TextArea } = Input;\r\nconst { Column } = Table;\r\nclass Process extends React.Component{\r\n    state={\r\n        tableData: [],// 表格数据\r\n        name: '', // 检索栏流程名称\r\n        startDate: '',// 检索栏起始日期\r\n        endDate: '',// 检索栏截止日期\r\n        total: 0, // 数据总数\r\n        curPage: 1,// 当前页码\r\n        pageSize: 20,// 当前分页条数\r\n        confirmLoading: false,// 加载新增接口loading效果\r\n        visible: false, // 模态框显示隐藏\r\n        processName: '',// 新增流程名称\r\n        processKey: '',// 新增流程标识\r\n        processDesc: '',// 新增流程描述\r\n        cookieData: '',\r\n        formId: '', // 表单ID\r\n    }\r\n    handleProName = (e)=>{\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    handleDateChange =(date, dateString)=>{\r\n        console.log(date)\r\n        console.log(dateString)\r\n        this.setState({\r\n            startDate: !dateString[0] ? '' : dateString[0] + ' ' + '00:00:00',\r\n            endDate: !dateString[1]? '' : dateString[1] + ' ' +'23:59:59',\r\n        })\r\n    }\r\n    handlePageChange =(curPage, pageSize) => {\r\n        this.setState({\r\n            curPage: curPage,\r\n            pageSize: pageSize\r\n        },()=>{\r\n            console.log(this.state.curPage,this.state.pageSize)\r\n            this.getData()\r\n        })\r\n        \r\n    }\r\n    handlePageSizeChange=(page, size)=>{\r\n        console.log(page)\r\n        console.log(size)\r\n    }\r\n    // 拉取数据\r\n    getData = ()=> {\r\n        GetFormListInfo(this.state.name,this.state.curPage, this.state.pageSize)\r\n        .then(res=>{\r\n            this.setState({\r\n                tableData: res.data.getMe,\r\n                total: res.data.totalRcdNum\r\n            })\r\n        })\r\n    }\r\n    // 删除流程\r\n    delProcess =(record) =>{\r\n        return ()=>{\r\n            UpdateStatus(record.ID, 0)\r\n            .then((res)=>{\r\n                this.getData()\r\n            })\r\n        }\r\n    }\r\n    // 删除表单\r\n    delForm = (id)=>{\r\n        return ()=>{\r\n            this.setState({\r\n                visible: true,\r\n                formId: id\r\n            })\r\n        }\r\n    }\r\n    handleOk=()=>{\r\n        DeleteFormLogic('', this.state.formId)\r\n        .then((res)=>{\r\n            if(res.data.statusCode === \"0000\") {\r\n                message.success(\"删除成功\")\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                this.getData()\r\n            } else {\r\n                message.success(res.data.errMsg)\r\n            }\r\n        })\r\n    }\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            visible: false\r\n        })\r\n    }\r\n    handleCreateProcessName=(e)=>{\r\n        this.setState({\r\n            processName: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessKey=(e)=>{\r\n        this.setState({\r\n            processKey: e.target.value\r\n        })\r\n    }\r\n    handleCreateProcessDesc=(e)=>{\r\n        this.setState({\r\n            processDesc: e.target.value\r\n        })\r\n    }\r\n    openModal=()=>{\r\n        this.props.history.push({\r\n            pathname: '/new'\r\n        })\r\n    }\r\n    goEdit=(id,name,key,desc)=>{\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/edit',\r\n                state:{\r\n                    id: id,\r\n                    name: name,\r\n                    key: key,\r\n                    desc: desc\r\n                }\r\n            })\r\n        }\r\n    }\r\n    goShow=(id)=>{\r\n        // console.log(id)\r\n        return ()=>{\r\n            this.props.history.push({\r\n                pathname: '/show',\r\n                state:{\r\n                    id: id\r\n                }\r\n            })\r\n        }\r\n    }\r\n    // 跳转到台账\r\n    goShowAccount=(name)=>{\r\n        return ()=>{\r\n            this.props.history.push({                              \r\n                pathname: '/trans',\r\n                state:{\r\n                    name: name\r\n                }\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"modeler-wrapper\">\r\n                {/* <Modeler></Modeler> */}\r\n                <Form layout=\"inline\" >\r\n                    <Form.Item label=\"流程名称\">\r\n                        <Input placeholder=\"请输入流程名称\" allowClear onChange={this.handleProName}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.getData}>查询</Button>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.openModal}>新增</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Table dataSource={this.state.tableData} pagination={false} rowClassName=\"rowClassName\">\r\n                    <Column title=\"流程名称\" dataIndex=\"name\" key=\"WorkflowName\" />\r\n                    <Column title=\"流程标识\" dataIndex=\"key\" key=\"Key\" />\r\n                    <Column title=\"创建人\" dataIndex=\"createdBy\" key=\"createdBy\" />\r\n                    <Column title=\"创建时间\" dataIndex=\"created\" key=\"created\" />\r\n                    <Column title=\"最后修改时间\" dataIndex=\"lastUpdated\" key=\"lastUpdated\" />\r\n                    <Column\r\n                        title=\"操作\"\r\n                        key=\"action\"\r\n                        render={(text, record) => (\r\n                            <Space size=\"middle\">\r\n                                {\r\n                                    record.Type === '表单' ?\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.goEdit(record.id, record.name, record.key, record.description)}>编辑</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShow(record.id)}>查看</Button>\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" style={{marginRight:\"10px\"}} onClick={this.delForm(record.id)}>删除</Button>\r\n                                        <Button className=\"localBtnClass\" size=\"small\" type=\"primary\" onClick={this.goShowAccount(record.TableName)}>查看</Button>\r\n                                    </div>\r\n                                }\r\n                            </Space>\r\n                        )}\r\n                    />\r\n                </Table>\r\n                <Modal\r\n                    title=\"提示\"\r\n                    visible={this.state.visible}\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    onOk={this.handleOk}\r\n                    confirmLoading={this.state.confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    确定删除该表单吗？\r\n                </Modal>\r\n                <Pagination\r\n                    current={this.state.curPage}\r\n                    total={this.state.total}\r\n                    showSizeChanger\r\n                    showQuickJumper\r\n                    defaultPageSize={20}\r\n                    onChange = {this.handlePageChange}\r\n                    showTotal={total => `共 ${total} 条数据`}>\r\n                </Pagination>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Process","E:\\react-flowable\\src\\pages\\ShowForm\\ShowForm.jsx",["93","94"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport { GetFormJson } from '../../apis/process'\r\n\r\nconst StartForm = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        const id = props.location.state.id\r\n        GetFormJson(id)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                setSchema(JSON.parse(res.data))\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n            <Button type=\"primary\" style={{ marginLeft: 30 }} onClick={handleClickReback}>\r\n                返回列表\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\NewForm\\NewForm.jsx",["95","96"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson } from '../../apis/process'\r\nimport {Modal, Form, Input, Button} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\n\r\nconst defaultValue = {\r\n    schema: {\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n      },\r\n    },\r\n    displayType: 'row',\r\n    showDescIcon: true,\r\n    labelWidth: 120,\r\n  };\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass NewForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '保存',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                onClick: () => this.goBackToList()\r\n            },\r\n        ]\r\n    }\r\n    handleScheam = ()=>{\r\n        this.setState({\r\n            isModalVisible: true\r\n        })\r\n    }\r\n    goBackToList=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        var cookies = document.cookie\r\n        var arr = cookies.split(\";\")\r\n        var cookieKeyVal = \"\"\r\n        arr.forEach(item=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > 0) {\r\n                cookieKeyVal  = item\r\n            }\r\n        })\r\n        var cookie = cookieKeyVal.split(\"=\")[1]\r\n\r\n        console.log(this.formNameRef.current.state.value)\r\n        if (!this.formNameRef.current.state.value) {\r\n            alert(\"表单名称必填\")\r\n            return false\r\n        }\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.formDescRef.current.state.value,\r\n            key:this.formKeyRef.current.state.value,\r\n            modelType:2,\r\n            name: this.formNameRef.current.state.value\r\n        }\r\n        CreateModel(cookie,params)\r\n        .then(res=>{\r\n            alert(\"新增成功\")\r\n            this.setState({\r\n                isModalVisible: false\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewForm;\r\n","E:\\react-flowable\\src\\pages\\Transform\\Transform.jsx",["97"],"import React, { Component } from 'react'\r\nimport { getTableName, getSelectName } from '../../apis/process'\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button } from 'antd';\r\nimport './transform.less'\r\n\r\nexport default class Transform extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef = React.createRef()\r\n        this.state={\r\n            schema: {}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData = ()=>{\r\n        const tableName = this.props.location.state.name\r\n        getTableName(tableName)\r\n        .then((res)=>{\r\n            const dataArr = res.data.getMe[0].Groups\r\n            this.handleGroup(dataArr)\r\n        })\r\n    }\r\n    asyncFunc = async(name) =>{\r\n        let result = await getSelectName(name)\r\n        return result.data\r\n    }\r\n    hanldeSelect = async(name)=> {\r\n        let obj = {}\r\n        let data = await this.asyncFunc(name);\r\n        let enumVals = []\r\n        let enumNames = []\r\n        data.forEach((item)=>{\r\n            enumVals.push(item.NODEVALUE)\r\n            enumNames.push(item.NODENAME)\r\n        })\r\n        obj = {\r\n            title: name,\r\n            type: 'string',\r\n            enum: enumVals,\r\n            enumNames: enumNames\r\n        }\r\n        return obj\r\n    }\r\n    handleEveryGroup= async(schemaList)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i=0;i<schemaList.length;i++) {\r\n            if (schemaList[i].Shape.indexOf(\"文本\") > -1) {\r\n                key = `inputName_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: schemaList[i].Type === '数值' ? 'number' : 'string',\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"日期\") > -1) {\r\n                key = `date_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: \"range\",\r\n                    format: \"date\"\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"时间\") > -1) {\r\n                key = `dateTime_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: \"range\",\r\n                    format: \"dateTime\"\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"选择器\") > -1) {\r\n                let formObj =await this.hanldeSelect(schemaList[i].FieldName)\r\n                key = `selectName_${i}`\r\n                obj[key] = formObj\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n    handleGroup= async(dataArr)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i = 0; i< dataArr.length; i++) {\r\n            key = `object_${i}`\r\n            let objData =await this.handleEveryGroup(dataArr[i].Schema)\r\n            console.log(objData)\r\n            obj[key] = {\r\n                type:\"object\",\r\n                title: dataArr[i].GroupName,\r\n                properties: objData\r\n            }\r\n        }\r\n        this.setState({\r\n            schema:{\r\n                schema:{\r\n                    type: 'object',\r\n                    properties: obj,\r\n                },\r\n                displayType: \"row\",\r\n                showDescIcon: false,\r\n                column: 3,\r\n                labelWidth: 120\r\n            }\r\n        })\r\n    }\r\n    setFormData=(val)=>{\r\n    }\r\n    handleClickReback=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"transform-wrapper\">\r\n                <FormRender\r\n                    ref={this.formRef}\r\n                    {...this.state.schema}\r\n                    onChange={this.setFormData}\r\n                />\r\n                <div className=\"gobackBtn\">\r\n                    <Button type=\"primary\" onClick={this.handleClickReback}>\r\n                        返回列表\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","E:\\react-flowable\\src\\pages\\NeedToDeal\\NeedToDeal.jsx",["98","99","100","101","102","103","104","105","106","107","108","109"],"E:\\react-flowable\\src\\pages\\Customize\\Customize.jsx",["110"],"import React, { useState } from \"react\";\r\nimport FormRender from \"form-render/lib/antd\";\r\nimport SCHEMA from \"./schema.json\";\r\nimport Cascade from \"./Cascader/Cascader\";\r\nimport Calendar from './Sequelize/Sequelize'\r\nclass Demo extends React.Component {\r\n    state = {\r\n        formData: {},\r\n        valid: []\r\n    }\r\n\r\n    submit = () => {\r\n        if (this.state.valid.length > 0) {\r\n            alert(\"没有通过校验\");\r\n        } else {\r\n            alert(JSON.stringify(this.state.formData, null, 4));\r\n        }\r\n    };\r\n\r\n    onValidate = valid => {\r\n        console.log(valid);\r\n    }\r\n    listenChange=(params)=>{\r\n        console.log(params)\r\n    }\r\n    render(){\r\n        return (\r\n            <div style={{ padding: 60 }}>\r\n                <FormRender\r\n                    {...SCHEMA}\r\n                    formData={this.state.formData}\r\n                    onChange={this.listenChange}\r\n                    onValidate={this.onValidate}\r\n                    widgets={{ cascade: Cascade,calendar: Calendar }}\r\n                />\r\n                <button onClick={this.submit}>提交</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Demo\r\n","E:\\react-flowable\\src\\pages\\StartForm\\StartForm.jsx",["111","112"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message } from 'antd';\r\nimport FormTransfer from '../../libs/transform/transform'\r\nimport { GetStartForm, WorkflowStart, getTableName, getSelectName } from '../../apis/process'\r\nimport \"./startform.less\"\r\n// import schema from '../../json/schema.json';\r\n\r\nconst StartForm = () => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    // const [cookie, setCookie] = useState('')\r\n    const [formId, setFormId] = useState('')\r\n    // const [FlowDefID, setFlowDefID] = useState('')\r\n    // const [name, setName] = useState('')\r\n    // const [userId, setUserId] = useState(null)\r\n    // const [processDefinitionId, setProcessDefinitionId] = useState('')\r\n\r\n    const formRef = useRef();\r\n\r\n    const asyncFunc = async(name) =>{\r\n        let result = await getSelectName(name)\r\n        return result.data\r\n    }\r\n\r\n    const hanldeSelect = async(name)=> {\r\n        let obj = {}\r\n        let data = await asyncFunc(name);\r\n        let enumVals = []\r\n        let enumNames = []\r\n        data.forEach((item)=>{\r\n            enumVals.push(item.NODEVALUE)\r\n            enumNames.push(item.NODENAME)\r\n        })\r\n        obj = {\r\n            title: name,\r\n            type: 'string',\r\n            enum: enumVals,\r\n            enumNames: enumNames\r\n        }\r\n        return obj\r\n    }\r\n\r\n    const handleEveryGroup= async(schemaList)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i=0;i<schemaList.length;i++) {\r\n            if (schemaList[i].Shape.indexOf(\"文本\") > -1) {\r\n                key = `inputName_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: schemaList[i].Type === '数值' ? 'number' : 'string',\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"日期\") > -1) {\r\n                key = `date_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: \"range\",\r\n                    format: \"date\"\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"时间\") > -1) {\r\n                key = `dateTime_${i}`\r\n                obj[key] = {\r\n                    title: schemaList[i].FieldName,\r\n                    type: \"range\",\r\n                    format: \"dateTime\"\r\n                }\r\n            } else if (schemaList[i].Shape.indexOf(\"选择器\") > -1) {\r\n                let formObj =await hanldeSelect(schemaList[i].FieldName)\r\n                key = `selectName_${i}`\r\n                obj[key] = formObj\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n\r\n    const handleGroup= async(dataArr)=>{\r\n        let obj = {}\r\n        let key = \"\"\r\n        for(let i = 0; i< dataArr.length; i++) {\r\n            key = `object_${i}`\r\n            let objData =await handleEveryGroup(dataArr[i].Schema)\r\n            obj[key] = {\r\n                type:\"object\",\r\n                title: dataArr[i].GroupName,\r\n                properties: objData\r\n            }\r\n        }\r\n        setSchema({\r\n            schema:{\r\n                type: 'object',\r\n                properties: obj\r\n            },\r\n            displayType: \"row\",\r\n            showDescIcon: false,\r\n            column: 3,\r\n            labelWidth: 120\r\n        })\r\n    }\r\n\r\n    const getData =()=>{\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"FlowDefID\") > -1) {\r\n                // setFlowDefID(item.split(\"=\")[1])\r\n                // console.log(FlowDefID, \"FlowDefID\")\r\n                GetStartForm(item.split(\"=\")[1])\r\n                    .then((res=>{\r\n                        if (res.data.Errmsg) {\r\n                            alert(res.data.Errmsg)\r\n                            return\r\n                        }\r\n                        setFormId(res.data.FormID)\r\n                        if (res.data.Type === \"台账\") {\r\n                            const tableName = res.data.Form\r\n                            getTableName(tableName)\r\n                            .then((response)=>{\r\n                                const dataArr = response.data.getMe[0].Groups\r\n                                handleGroup(dataArr)\r\n                            })\r\n                        } else if (res.data.Type === \"表单\") {\r\n                            let resData = `${res.data.Form}`// 这里必须强转字符串，否则无法解析成对象\r\n                            let jsonData = JSON.parse(resData)\r\n                            setSchema(jsonData)\r\n                        }\r\n                    }))\r\n            } \r\n            \r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    },[])\r\n\r\n    const handleSubmit = () => {\r\n        // alert(JSON.stringify(formData, null, 2));\r\n        let processDefinitionId = \"\"\r\n        let name = \"\"\r\n        let userId = \"\"\r\n        let cookie = \"\"\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"processDefinitionId\") > -1) {\r\n                processDefinitionId = decodeURI(item.split(\"=\")[1])\r\n            } else if (item.indexOf(\"name\") > -1) {\r\n                name = decodeURI(item.split(\"=\")[1])\r\n            } else if (item.indexOf(\"userId\") > -1) {\r\n                userId = item.split(\"=\")[1]\r\n            }\r\n        })\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookie = itemArr[1]\r\n            }\r\n        })\r\n        var FormInfo=JSON.stringify({\r\n            formId,\r\n            values: formData\r\n        })\r\n        var date = new Date()\r\n        const myData = {\r\n            FormInfo,\r\n            Config: JSON.stringify(schema),\r\n            processDefinitionId,\r\n            name: `${name} - ${date.getDate()} ${date.getMonth() + 1} ${date.getFullYear()}`,\r\n        }\r\n        WorkflowStart(cookie, userId, myData)\r\n        .then((res)=>{\r\n            message.success(\"提交成功\")\r\n        })\r\n    };\r\n\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"startwrap\">\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n            <Button style={{ marginLeft: 30 }} onClick={handleClick}>\r\n                重置\r\n            </Button>\r\n            <Button type=\"primary\" onClick={handleSubmit}>\r\n                提交\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartForm;","E:\\react-flowable\\src\\pages\\EditForm\\EditForm.jsx",["113","114"],"import React from 'react';\r\nimport Generator from 'fr-generator';\r\nimport { CreateModel,GetFormJson, UpdateFormDef } from '../../apis/process'\r\nimport {Modal, Form, Input, Button} from 'antd'\r\n// import FormTransfer from '../../libs/transform/transform'\r\n\r\nconst templates = [\r\n  {\r\n    text: '模板1',\r\n    name: 'something',\r\n    schema: {\r\n      title: '对象',\r\n      description: '这是一个对象类型',\r\n      type: 'object',\r\n      properties: {\r\n        inputName: {\r\n          title: '简单输入框',\r\n          type: 'string',\r\n        },\r\n        selectName: {\r\n          title: '单选',\r\n          type: 'string',\r\n          enum: ['a', 'b', 'c'],\r\n          enumNames: ['早', '中', '晚'],\r\n        },\r\n        dateName: {\r\n          title: '时间选择',\r\n          type: 'string',\r\n          format: 'date',\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nclass EditForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.genRef = React.createRef();\r\n        this.formNameRef = React.createRef();\r\n        this.formKeyRef = React.createRef();\r\n        this.formDescRef = React.createRef();\r\n        this.state = {\r\n            isModalVisible: false,\r\n            defaultValue: {},\r\n            templates: []\r\n        }\r\n        this.extraButtons = [\r\n            true, true, false, true, \r\n            { \r\n                text: '确定修改',\r\n                type: 'primary',\r\n                onClick: () => this.handleScheam()\r\n            },\r\n            { \r\n                text: '返回列表',\r\n                type: 'primary',\r\n                onClick: () => this.goBackToHome()\r\n            }\r\n        ]\r\n    }\r\n    componentDidMount(){\r\n        this.getData()\r\n    }\r\n    getData =()=>{\r\n        const id = this.props.location.state.id\r\n        GetFormJson(id)\r\n          .then((res)=>{\r\n              if (res.status === 200) {\r\n                  this.setState({\r\n                    defaultValue: JSON.parse(res.data)\r\n                  })\r\n              }\r\n          })\r\n    }\r\n    handleScheam = ()=>{\r\n      this.handleOk()\r\n    }\r\n    handleCancel= ()=>{\r\n        this.setState({\r\n            isModalVisible: false\r\n        })\r\n    }\r\n    goBackToHome=()=>{\r\n        this.props.history.push({\r\n            pathname: '/home'\r\n        })\r\n      }\r\n    handleOk=()=>{\r\n        const FormInfo = this.genRef.current && this.genRef.current.getValue()\r\n        const params = {\r\n            FormInfo: JSON.stringify(FormInfo),\r\n            description:this.props.location.state.desc,\r\n            key: this.props.location.state.key,\r\n            modelType:2,\r\n            name: this.props.location.state.name\r\n        }\r\n        UpdateFormDef(this.props.location.state.id,params)\r\n        .then(res=>{\r\n            alert(\"修改成功\")\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ height: '100vh' }}>\r\n                <Generator ref={this.genRef} defaultValue={this.state.defaultValue} templates={templates} extraButtons={this.extraButtons}/>\r\n                <Modal title=\"保存表单\" visible={this.state.isModalVisible} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Form layout={\"horizontal\"}>\r\n                        <Form.Item label=\"表单名称\">\r\n                            <Input ref={this.formNameRef} placeholder=\"请输入表单名称\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单标识\">\r\n                            <Input ref={this.formKeyRef} placeholder=\"请输入表单标识\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"表单备注\">\r\n                            <Input ref={this.formDescRef} placeholder=\"请输入表单备注\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditForm;\r\n","E:\\react-flowable\\src\\apis\\process.js",[],"E:\\react-flowable\\src\\pages\\Customize\\Sequelize\\Sequelize.jsx",[],"E:\\react-flowable\\src\\pages\\Customize\\Cascader\\Cascader.jsx",[],"E:\\react-flowable\\src\\libs\\transform\\transform.js",[],"E:\\react-flowable\\src\\utils\\request.js",[],"E:\\react-flowable\\src\\utils\\config.js",[],"E:\\react-flowable\\src\\pages\\DoneDeal\\DoneDeal.jsx",["115","116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message, Modal, Radio } from 'antd';\r\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\r\nimport './DoneDeal.less'\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"taskId\") > -1) {\r\n                taskIdScope = decodeURI(item.split(\"=\")[1])\r\n                setTaskId(taskIdScope)\r\n            }\r\n        })\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                let schemaConfig =  JSON.parse(fieldData.Config)\r\n                let fieldConfig = schemaConfig.schema.properties\r\n                let formValObj = JSON.parse(fieldData.formId).values\r\n                for(let skey in fieldConfig){\r\n                    for(let val in formValObj) {\r\n                        if (skey === val) {\r\n                            fieldConfig[skey].default = formValObj[val]\r\n                        }\r\n                    }\r\n                }\r\n                schemaConfig.schema.properties = fieldConfig\r\n                setFormId(JSON.parse(fieldData.formId).formId)\r\n                setSchema(schemaConfig)\r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    // 处理请求参数\r\n    const hanldeRouterParams =()=>{\r\n        // 处理Cookie\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                setCookie(itemArr[1])\r\n            }\r\n        })\r\n\r\n        // 处理任务ID\r\n        const search = window.location.search.slice(1)\r\n        const searchArr = search.split(\"&\")\r\n        searchArr.forEach((item)=>{\r\n            if (item.indexOf(\"processDefinitionId\") > -1) {\r\n                setProcessDefinitionId(decodeURI(item.split(\"=\")[1]))\r\n            } else if (item.indexOf(\"userId\") > -1) {\r\n                setUserId(item.split(\"=\")[1])\r\n            }\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.push({\r\n            pathname: '/home'\r\n        })\r\n    }\r\n    // 附件\r\n    const uploadFile=()=>{\r\n\r\n    }\r\n    // 流转信息\r\n    const showTransFlow=()=>{\r\n        \r\n    }\r\n    // 流程图\r\n    const showModeler=()=>{\r\n\r\n    }\r\n\r\n    // 移交Modal\r\n    const handleOK=()=>{\r\n\r\n    }\r\n    const handleCancel=()=>{\r\n\r\n    }\r\n    // 流程图Modal\r\n    const handleModelerOK=()=>{\r\n\r\n    }\r\n    const handleModelerCancel=()=>{\r\n\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n        hanldeRouterParams()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"任务移交\" visible={visible} onOk={handleOK} onCancel={handleCancel}>\r\n                <Radio.Group value={transValue}>\r\n\r\n                </Radio.Group>\r\n            </Modal>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal>\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;","E:\\react-flowable\\src\\pages\\HistoryFlow\\HistoryFlow.jsx",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport FormRender from 'form-render/lib/antd';\r\nimport { Button, message, Modal, Radio } from 'antd';\r\nimport { GetFormList, SaveFormInfo, TaskSave, GetTaskBaseInfo } from '../../apis/process'\r\nimport './HistoryFlow.less'\r\n\r\nconst NeedToDeal = (props) => {\r\n    const [formData, setFormData] = useState({});\r\n    const [schema, setSchema] = useState({})\r\n    const [cookie, setCookie] = useState(\"\")\r\n    const [taskId, setTaskId] = useState(\"\")\r\n    const [processDefinitionId, setProcessDefinitionId] = useState(\"\")\r\n    const [userId, setUserId] = useState(\"\")\r\n    const [formId, setFormId] = useState(\"\")\r\n    const [visible, setVisible] = useState(false)\r\n    const [modelerVisible, setModelerVisible] = useState(false)\r\n    const [transValue, setTransValue] = useState(null)\r\n    const [processImgSrc, setProcessImgSrc] = useState(null)\r\n    // 流程详细信息\r\n    const [Assignee, setAssignee] = useState(null)\r\n    const [ETime, setETime] = useState(null)\r\n    const [STime, setSTime] = useState(null)\r\n    const [TaskName, setTaskName] = useState(null)\r\n    const formRef = useRef();\r\n    const getData =()=>{\r\n        let cookieScope = \"\"\r\n        let taskIdScope = \"\"\r\n        let winCookie = window.document.cookie\r\n        let winCookieArr = winCookie.split(\";\")\r\n        winCookieArr.forEach((item)=>{\r\n            if (item.indexOf(\"FLOWABLE_REMEMBER_ME\") > -1) {\r\n                let itemArr = item.split(\"=\")\r\n                cookieScope = itemArr[1]\r\n                setCookie(cookieScope)\r\n            }\r\n        })\r\n        // 处理任务ID\r\n        taskIdScope = props.location.state.taskId\r\n        GetFormList(cookieScope, taskIdScope)\r\n        .then((res)=>{\r\n            if (res.status === 200) {\r\n                let fieldData = res.data\r\n                let schemaConfig =  JSON.parse(fieldData.Config)\r\n                let fieldConfig = schemaConfig.schema.properties\r\n                let formValObj = JSON.parse(fieldData.formId).values\r\n                for(let skey in fieldConfig){\r\n                    for(let val in formValObj) {\r\n                        if (skey === val) {\r\n                            fieldConfig[skey].default = formValObj[val]\r\n                        }\r\n                    }\r\n                }\r\n                schemaConfig.schema.properties = fieldConfig\r\n                setFormId(JSON.parse(fieldData.formId).formId)\r\n                setSchema(schemaConfig)\r\n            }\r\n        })\r\n        GetTaskBaseInfo(taskIdScope)\r\n        .then((response)=>{\r\n            let data = response.data\r\n            setTaskName(data.TaskName)\r\n            setAssignee(data.Assignee)\r\n            setSTime(data.STime)\r\n            setETime(data.ETime)\r\n        })\r\n    }\r\n    const handleClick = () => {\r\n        formRef.current.resetData({}).then(res => {\r\n        alert(JSON.stringify(res, null, 2));\r\n        });\r\n    };\r\n\r\n    const handleClickReback = ()=>{\r\n        props.history.go(-1)\r\n    }\r\n    useEffect(()=>{\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"needWrap\">\r\n            <div className=\"deal-headerbox\">\r\n                <h2 className=\"dealheaders\">{TaskName}</h2>\r\n                <div className=\"dealdetails\">\r\n                    <p className=\"detail-items\">当前处理人：{Assignee}</p>\r\n                    <p className=\"detail-items\">起始时间：{STime}</p>\r\n                    <p className=\"detail-items\">截止时间：{ETime}</p>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"btnGroups\">\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={uploadFile}>附件</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showTransFlow}>流转信息</Button>\r\n                <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={showModeler}>流程图</Button>\r\n            </div>\r\n            <Modal title=\"流程图\" visible={modelerVisible} onOk={handleModelerOK} onCancel={handleModelerCancel}>\r\n                <img src={processImgSrc} alt=\"process\"/>\r\n            </Modal> */}\r\n            <FormRender\r\n                ref={formRef}\r\n                {...schema}\r\n                formData={formData}\r\n                onChange={setFormData}\r\n            />\r\n            <Button type=\"primary\" shape=\"round\" style={{ marginRight: 15, width:80 }} onClick={handleClickReback}>返回</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedToDeal;",{"ruleId":"152","severity":1,"message":"153","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":29},{"ruleId":"152","severity":1,"message":"156","line":2,"column":45,"nodeType":"154","messageId":"155","endLine":2,"endColumn":56},{"ruleId":"152","severity":1,"message":"157","line":2,"column":58,"nodeType":"154","messageId":"155","endLine":2,"endColumn":71},{"ruleId":"152","severity":1,"message":"158","line":6,"column":9,"nodeType":"154","messageId":"155","endLine":6,"endColumn":17},{"ruleId":"159","severity":1,"message":"160","line":34,"column":66,"nodeType":"161","messageId":"162","endLine":34,"endColumn":67},{"ruleId":"159","severity":1,"message":"160","line":35,"column":63,"nodeType":"161","messageId":"162","endLine":35,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":21,"column":7,"nodeType":"165","endLine":21,"endColumn":9,"suggestions":"166"},{"ruleId":"152","severity":1,"message":"167","line":23,"column":11,"nodeType":"154","messageId":"155","endLine":23,"endColumn":22},{"ruleId":"152","severity":1,"message":"168","line":3,"column":22,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"169","line":4,"column":29,"nodeType":"154","messageId":"155","endLine":4,"endColumn":35},{"ruleId":"152","severity":1,"message":"170","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":20},{"ruleId":"152","severity":1,"message":"171","line":36,"column":12,"nodeType":"154","messageId":"155","endLine":36,"endColumn":23},{"ruleId":"152","severity":1,"message":"172","line":36,"column":25,"nodeType":"154","messageId":"155","endLine":36,"endColumn":39},{"ruleId":"152","severity":1,"message":"173","line":40,"column":11,"nodeType":"154","messageId":"155","endLine":40,"endColumn":18},{"ruleId":"152","severity":1,"message":"167","line":119,"column":11,"nodeType":"154","messageId":"155","endLine":119,"endColumn":22},{"ruleId":"152","severity":1,"message":"174","line":125,"column":11,"nodeType":"154","messageId":"155","endLine":125,"endColumn":28},{"ruleId":"175","severity":1,"message":"176","line":269,"column":36,"nodeType":"161","messageId":"177","endLine":269,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":270,"column":36,"nodeType":"161","messageId":"177","endLine":270,"endColumn":38},{"ruleId":"152","severity":1,"message":"178","line":306,"column":11,"nodeType":"154","messageId":"155","endLine":306,"endColumn":27},{"ruleId":"152","severity":1,"message":"179","line":309,"column":11,"nodeType":"154","messageId":"155","endLine":309,"endColumn":25},{"ruleId":"152","severity":1,"message":"180","line":375,"column":11,"nodeType":"154","messageId":"155","endLine":375,"endColumn":26},{"ruleId":"152","severity":1,"message":"181","line":378,"column":11,"nodeType":"154","messageId":"155","endLine":378,"endColumn":30},{"ruleId":"182","severity":1,"message":"183","line":504,"column":41,"nodeType":"184","endLine":504,"endColumn":79},{"ruleId":"152","severity":1,"message":"185","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"170","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":134,"column":7,"nodeType":"165","endLine":134,"endColumn":9,"suggestions":"186"},{"ruleId":"152","severity":1,"message":"156","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":21},{"ruleId":"152","severity":1,"message":"169","line":4,"column":29,"nodeType":"154","messageId":"155","endLine":4,"endColumn":35},{"ruleId":"152","severity":1,"message":"187","line":3,"column":18,"nodeType":"154","messageId":"155","endLine":3,"endColumn":25},{"ruleId":"152","severity":1,"message":"188","line":4,"column":23,"nodeType":"154","messageId":"155","endLine":4,"endColumn":35},{"ruleId":"152","severity":1,"message":"189","line":4,"column":37,"nodeType":"154","messageId":"155","endLine":4,"endColumn":45},{"ruleId":"152","severity":1,"message":"190","line":10,"column":12,"nodeType":"154","messageId":"155","endLine":10,"endColumn":18},{"ruleId":"152","severity":1,"message":"191","line":11,"column":12,"nodeType":"154","messageId":"155","endLine":11,"endColumn":18},{"ruleId":"152","severity":1,"message":"192","line":12,"column":12,"nodeType":"154","messageId":"155","endLine":12,"endColumn":31},{"ruleId":"152","severity":1,"message":"193","line":13,"column":12,"nodeType":"154","messageId":"155","endLine":13,"endColumn":18},{"ruleId":"152","severity":1,"message":"194","line":14,"column":12,"nodeType":"154","messageId":"155","endLine":14,"endColumn":18},{"ruleId":"152","severity":1,"message":"195","line":15,"column":21,"nodeType":"154","messageId":"155","endLine":15,"endColumn":31},{"ruleId":"152","severity":1,"message":"196","line":16,"column":28,"nodeType":"154","messageId":"155","endLine":16,"endColumn":45},{"ruleId":"152","severity":1,"message":"197","line":17,"column":24,"nodeType":"154","messageId":"155","endLine":17,"endColumn":37},{"ruleId":"152","severity":1,"message":"198","line":18,"column":27,"nodeType":"154","messageId":"155","endLine":18,"endColumn":43},{"ruleId":"152","severity":1,"message":"167","line":97,"column":11,"nodeType":"154","messageId":"155","endLine":97,"endColumn":22},{"ruleId":"152","severity":1,"message":"174","line":103,"column":11,"nodeType":"154","messageId":"155","endLine":103,"endColumn":28},{"ruleId":"152","severity":1,"message":"187","line":3,"column":18,"nodeType":"154","messageId":"155","endLine":3,"endColumn":25},{"ruleId":"152","severity":1,"message":"199","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":32},{"ruleId":"152","severity":1,"message":"200","line":3,"column":34,"nodeType":"154","messageId":"155","endLine":3,"endColumn":39},{"ruleId":"152","severity":1,"message":"188","line":4,"column":23,"nodeType":"154","messageId":"155","endLine":4,"endColumn":35},{"ruleId":"152","severity":1,"message":"189","line":4,"column":37,"nodeType":"154","messageId":"155","endLine":4,"endColumn":45},{"ruleId":"152","severity":1,"message":"190","line":10,"column":12,"nodeType":"154","messageId":"155","endLine":10,"endColumn":18},{"ruleId":"152","severity":1,"message":"191","line":11,"column":12,"nodeType":"154","messageId":"155","endLine":11,"endColumn":18},{"ruleId":"152","severity":1,"message":"201","line":11,"column":20,"nodeType":"154","messageId":"155","endLine":11,"endColumn":29},{"ruleId":"152","severity":1,"message":"192","line":12,"column":12,"nodeType":"154","messageId":"155","endLine":12,"endColumn":31},{"ruleId":"152","severity":1,"message":"202","line":12,"column":33,"nodeType":"154","messageId":"155","endLine":12,"endColumn":55},{"ruleId":"152","severity":1,"message":"193","line":13,"column":12,"nodeType":"154","messageId":"155","endLine":13,"endColumn":18},{"ruleId":"152","severity":1,"message":"203","line":13,"column":20,"nodeType":"154","messageId":"155","endLine":13,"endColumn":29},{"ruleId":"152","severity":1,"message":"194","line":14,"column":12,"nodeType":"154","messageId":"155","endLine":14,"endColumn":18},{"ruleId":"152","severity":1,"message":"204","line":15,"column":12,"nodeType":"154","messageId":"155","endLine":15,"endColumn":19},{"ruleId":"152","severity":1,"message":"195","line":15,"column":21,"nodeType":"154","messageId":"155","endLine":15,"endColumn":31},{"ruleId":"152","severity":1,"message":"205","line":16,"column":12,"nodeType":"154","messageId":"155","endLine":16,"endColumn":26},{"ruleId":"152","severity":1,"message":"196","line":16,"column":28,"nodeType":"154","messageId":"155","endLine":16,"endColumn":45},{"ruleId":"152","severity":1,"message":"206","line":17,"column":12,"nodeType":"154","messageId":"155","endLine":17,"endColumn":22},{"ruleId":"152","severity":1,"message":"197","line":17,"column":24,"nodeType":"154","messageId":"155","endLine":17,"endColumn":37},{"ruleId":"152","severity":1,"message":"207","line":18,"column":12,"nodeType":"154","messageId":"155","endLine":18,"endColumn":25},{"ruleId":"152","severity":1,"message":"198","line":18,"column":27,"nodeType":"154","messageId":"155","endLine":18,"endColumn":43},{"ruleId":"152","severity":1,"message":"167","line":67,"column":11,"nodeType":"154","messageId":"155","endLine":67,"endColumn":22},{"ruleId":"163","severity":1,"message":"164","line":78,"column":8,"nodeType":"165","endLine":78,"endColumn":10,"suggestions":"208"},"no-unused-vars","'GetWorkflowBaseInfo' is defined but never used.","Identifier","unusedVar","'CreateModel' is defined but never used.","'flowableLogin' is defined but never used.","'TextArea' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'handleClick' is assigned a value but never used.","'GetFormJson' is defined but never used.","'Button' is defined but never used.","'FormTransfer' is defined but never used.","'fileDataArr' is assigned a value but never used.","'setFileDataArr' is assigned a value but never used.","'nameRef' is assigned a value but never used.","'handleClickReback' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'goShowFileOnline' is assigned a value but never used.","'goDownloadFile' is assigned a value but never used.","'handleModelerOK' is assigned a value but never used.","'handleModelerCancel' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useState' is defined but never used.",["210"],"'message' is defined but never used.","'SaveFormInfo' is defined but never used.","'TaskSave' is defined but never used.","'cookie' is assigned a value but never used.","'taskId' is assigned a value but never used.","'processDefinitionId' is assigned a value but never used.","'userId' is assigned a value but never used.","'formId' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'setModelerVisible' is assigned a value but never used.","'setTransValue' is assigned a value but never used.","'setProcessImgSrc' is assigned a value but never used.","'Modal' is defined but never used.","'Radio' is defined but never used.","'setTaskId' is assigned a value but never used.","'setProcessDefinitionId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'visible' is assigned a value but never used.","'modelerVisible' is assigned a value but never used.","'transValue' is assigned a value but never used.","'processImgSrc' is assigned a value but never used.",["211"],{"desc":"212","fix":"213"},{"desc":"212","fix":"214"},{"desc":"212","fix":"215"},"Update the dependencies array to be: [getData]",{"range":"216","text":"217"},{"range":"218","text":"217"},{"range":"219","text":"217"},[640,642],"[getData]",[4788,4790],[3039,3041]]